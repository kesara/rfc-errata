[
  {
    "errata_id": "7185",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "11.1.16",
    "orig_text": "       <xs:attribute name=\"maxOccurs\" default=\"1\">\r\n         <xs:simpleType>\r\n           <xs:restriction base=\"xs:integer\">\r\n             <xs:minInclusive value=\"0\"/>\r\n           </xs:restriction>\r\n         </xs:simpleType>\r\n       </xs:attribute>\r\n",
    "correct_text": "       <xs:attribute name=\"maxOccurs\" default=\"unbounded\">\r\n         <xs:simpleType>\r\n           <xs:union>\r\n             <xs:simpleType>\r\n               <xs:restriction base=\"xs:integer\">\r\n                 <xs:minInclusive value=\"0\"/>\r\n               </xs:restriction>\r\n             </xs:simpleType>\r\n             <xs:simpleType>\r\n               <xs:restriction base=\"xs:string\">\r\n                 <xs:enumeration value=\"unbounded\"/>\r\n               </xs:restriction>\r\n             </xs:simpleType>\r\n           </xs:union>\r\n         </xs:simpleType>\r\n       </xs:attribute>\r\n",
    "notes": "maxOccurs doesn't have a defined default value and has no upper bound.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/issues/395",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7186",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "10.2.",
    "orig_text": "   The version of the EBML Body is found in EBMLDocTypeVersion.  A\r\n   parser for the particular DocType format can read the EBML Document\r\n   if it can read either the EBMLDocTypeVersion version of that format\r\n   or a version equal or higher than the one found in\r\n   EBMLDocTypeReadVersion.\r\n",
    "correct_text": "   The version of the EBML Body is found in DocTypeVersion.  A parser\r\n   for the particular DocType format can read the EBML Document if it\r\n   can read either the DocTypeVersion version of that format or a\r\n   version equal or higher than the one found in DocTypeReadVersion.\r\n",
    "notes": "Use DocTypeVersion in the text rather than EBMLDocTypeVersion for more consistency.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/405",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7187",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "15.1.",
    "orig_text": "   Non-mandatory EBML Elements can be added in a new EBMLDocTypeVersion.\r\n   Since they are not mandatory, they won't be found in older versions\r\n   of the EBMLDocTypeVersion, just as they might not be found in newer\r\n   versions.  This causes no compatibility issue.\r\n",
    "correct_text": "   Non-mandatory EBML Elements can be added in a new DocTypeVersion.\r\n   Since they are not mandatory, they won't be found in older versions\r\n   of the DocTypeVersion, just as they might not be found in newer\r\n   versions.  This causes no compatibility issue.\r\n",
    "notes": "Use DocTypeVersion in the text rather than EBMLDocTypeVersion for more consistency.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/405",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2022-11-15 13:40:03"
  },
  {
    "errata_id": "7188",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "15.2.",
    "orig_text": "   EBML Elements MAY be marked as deprecated in a new EBMLDocTypeVersion\r\n   using the \"maxver\" attribute of the EBML Schema.  If such an Element\r\n   is found in an EBML Document with a newer version of the\r\n   EBMLDocTypeVersion, it SHOULD be discarded.\r\n",
    "correct_text": "   EBML Elements MAY be marked as deprecated in a new DocTypeVersion\r\n   using the \"maxver\" attribute of the EBML Schema.  If such an Element\r\n   is found in an EBML Document with a newer version of the\r\n   DocTypeVersion, it SHOULD be discarded.\r\n",
    "notes": "Use DocTypeVersion in the text rather than EBMLDocTypeVersion for more consistency.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/405",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7189",
    "doc-id": "RFC8794",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "17.1.",
    "orig_text": "   One-octet Element IDs MUST be between 0x81 and 0xFE.  These items are\r\n   valuable because they are short, and they need to be used for\r\n   commonly repeated elements.  Element IDs are to be allocated within\r\n   this range according to the \"RFC Required\" policy [RFC8126].\r\n\r\n   The following one-octet Element IDs are RESERVED: 0xFF and 0x80.\r\n\r\n   Values in the one-octet range of 0x00 to 0x7F are not valid for use\r\n   as an Element ID.\r\n\r\n   Two-octet Element IDs MUST be between 0x407F and 0x7FFE.  Element IDs\r\n   are to be allocated within this range according to the \"Specification\r\n   Required\" policy [RFC8126].\r\n\r\n   The following two-octet Element IDs are RESERVED: 0x7FFF and 0x4000.\r\n\r\n   Values in the two-octet ranges of 0x0000 to 0x3FFF and 0x8000 to\r\n   0xFFFF are not valid for use as an Element ID.\r\n\r\n   Three-octet Element IDs MUST be between 0x203FFF and 0x3FFFFE.\r\n   Element IDs are to be allocated within this range according to the\r\n   \"First Come First Served\" policy [RFC8126].\r\n\r\n   The following three-octet Element IDs are RESERVED: 0x3FFFFF and\r\n   0x200000.\r\n\r\n   Values in the three-octet ranges of 0x000000 to 0x1FFFFF and 0x400000\r\n   to 0xFFFFFF are not valid for use as an Element ID.\r\n\r\n   Four-octet Element IDs MUST be between 0x101FFFFF and 0x1FFFFFFE.\r\n   Four-octet Element IDs are somewhat special in that they are useful\r\n   for resynchronizing to major structures in the event of data\r\n   corruption or loss.  As such, four-octet Element IDs are split into\r\n   two categories.  Four-octet Element IDs whose lower three octets (as\r\n   encoded) would make printable 7-bit ASCII values (0x20 to 0x7E,\r\n   inclusive) MUST be allocated by the \"Specification Required\" policy.\r\n   Sequential allocation of values is not required: specifications\r\n   SHOULD include a specific request and are encouraged to do early\r\n   allocations.\r\n\r\n   To be clear about the above category: four-octet Element IDs always\r\n   start with hex 0x10 to 0x1F, and that octet may be chosen so that the\r\n   entire VINT has some desirable property, such as a specific CRC.  The\r\n   other three octets, when ALL having values between 0x20 (32, ASCII\r\n   Space) and 0x7E (126, ASCII \"~\"), fall into this category.\r\n\r\n   Other four-octet Element IDs may be allocated by the \"First Come\r\n   First Served\" policy.\r\n\r\n   The following four-octet Element IDs are RESERVED: 0x1FFFFFFF and\r\n   0x10000000.\r\n\r\n   Values in the four-octet ranges of 0x00000000 to 0x0FFFFFFF and\r\n   0x20000000 to 0xFFFFFFFF are not valid for use as an Element ID.\r\n\r\n",
    "correct_text": "   One-octet Element IDs MUST be between 0x80 and 0xFE.  These items are\r\n   valuable because they are short, and they need to be used for\r\n   commonly repeated elements.  Element IDs are to be allocated within\r\n   this range according to the \"RFC Required\" policy [RFC8126].\r\n\r\n   The following one-octet Element ID is RESERVED: 0xFF.\r\n\r\n   Values in the one-octet range of 0x00 to 0x7F are not valid for use\r\n   as an Element ID.\r\n\r\n   Two-octet Element IDs MUST be between 0x407F and 0x7FFE.  Element IDs\r\n   are to be allocated within this range according to the \"Specification\r\n   Required\" policy [RFC8126].\r\n\r\n   The following two-octet Element ID is RESERVED: 0x7FFF.\r\n\r\n   Values in the two-octet ranges of 0x0000 to 0x4000 and 0x8000 to\r\n   0xFFFF are not valid for use as an Element ID.\r\n\r\n   Three-octet Element IDs MUST be between 0x203FFF and 0x3FFFFE.\r\n   Element IDs are to be allocated within this range according to the\r\n   \"First Come First Served\" policy [RFC8126].\r\n\r\n   The following three-octet Element ID is RESERVED: 0x3FFFFF.\r\n\r\n   Values in the three-octet ranges of 0x000000 to 0x200000 and 0x400000\r\n   to 0xFFFFFF are not valid for use as an Element ID.\r\n\r\n   Four-octet Element IDs MUST be between 0x101FFFFF and 0x1FFFFFFE.\r\n   Four-octet Element IDs are somewhat special in that they are useful\r\n   for resynchronizing to major structures in the event of data\r\n   corruption or loss.  As such, four-octet Element IDs are split into\r\n   two categories.  Four-octet Element IDs whose lower three octets (as\r\n   encoded) would make printable 7-bit ASCII values (0x20 to 0x7E,\r\n   inclusive) MUST be allocated by the \"Specification Required\" policy.\r\n   Sequential allocation of values is not required: specifications\r\n   SHOULD include a specific request and are encouraged to do early\r\n   allocations.\r\n\r\n   To be clear about the above category: four-octet Element IDs always\r\n   start with hex 0x10 to 0x1F, and that octet may be chosen so that the\r\n   entire VINT has some desirable property, such as a specific CRC.  The\r\n   other three octets, when ALL having values between 0x20 (32, ASCII\r\n   Space) and 0x7E (126, ASCII \"~\"), fall into this category.\r\n\r\n   Other four-octet Element IDs may be allocated by the \"First Come\r\n   First Served\" policy.\r\n\r\n   The following four-octet Element ID is RESERVED: 0x1FFFFFFF.\r\n\r\n   Values in the four-octet ranges of 0x00000000 to 0x10000000 and\r\n   0x20000000 to 0xFFFFFFFF are not valid for use as an Element ID.\r\n",
    "notes": "Allow 0x80 EBML ID (and similar) since it's used in Matroska.\r\n\r\nThis changes the rules for the IANA registry.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/408",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "164",
    "verifier_name": "Murray Kucherawy",
    "update_date": "2023-07-09 17:35:14"
  },
  {
    "errata_id": "7190",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "11.1.6.2.",
    "orig_text": "   EBMLAtomName           = ALPHA / DIGIT 0*EBMLNameChar\r\n",
    "correct_text": "   EBMLAtomName           = (ALPHA / DIGIT) 0*EBMLNameChar\r\n",
    "notes": "Fix grouping in the EBMLAtomName\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/418",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7191",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "5.",
    "orig_text": "      +=========================+================+=================+\r\n      | Element ID Octet Length | Range of Valid | Number of Valid |\r\n      |                         |  Element IDs   |     Element IDs |\r\n      +=========================+================+=================+\r\n      |            1            |  0x81 - 0xFE   |             126 |\r\n      +-------------------------+----------------+-----------------+\r\n",
    "correct_text": "      +=========================+================+=================+\r\n      | Element ID Octet Length | Range of Valid | Number of Valid |\r\n      |                         |  Element IDs   |     Element IDs |\r\n      +=========================+================+=================+\r\n      |            1            |  0x80 - 0xFE   |             127 |\r\n      +-------------------------+----------------+-----------------+\r\n",
    "notes": "0x80 is allowed in Matroska so in EBML as well.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/414",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7192",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "7.6.",
    "orig_text": "   The Date Element stores an integer in the same format as the Signed\r\n   Integer Element that expresses a point in time referenced in\r\n   nanoseconds from the precise beginning of the third millennium of the\r\n   Gregorian Calendar in Coordinated Universal Time (also known as\r\n   2001-01-01T00:00:00.000000000 UTC).  This provides a possible\r\n   expression of time from 1708-09-11T00:12:44.854775808 UTC to\r\n   2293-04-11T11:47:16.854775807 UTC.\r\n",
    "correct_text": "   The Date Element stores an integer in the same format as the Signed\r\n   Integer Element that expresses a point in time referenced in\r\n   nanoseconds from the precise beginning of the third millennium of the\r\n   Gregorian Calendar in Coordinated Universal Time (also known as\r\n   2001-01-01T00:00:00.000000000 UTC).  This provides a possible\r\n   expression of time from September 1708 to April 2293.\r\n\r\n   The integer stored represents the number of nanoseconds between the\r\n   date to express and 2001-01-01T00:00:00.000000000 UTC, not counting\r\n   leap seconds.  That is 86,400,000,000,000 nanoseconds for each day.\r\n   Conversions from other date systems should ensure leap seconds are\r\n   not counted in EBML values.\r\n\r\n   The 2001-01-01T00:00:00.000000000 UTC date also corresponds to\r\n   978307200 seconds in Unix time [POSIX].\r\n",
    "notes": "Add some notice about leap seconds not being counted as in POSIX. Remove bogus nanosecond values.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/415",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2022-11-01 13:34:50"
  },
  {
    "errata_id": "7193",
    "doc-id": "RFC8794",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "19.",
    "orig_text": "   [Matroska] Lhomme, S., Bunkus, M., and D. Rice, \"Matroska Media\r\n              Container Format Specifications\", Work in Progress,\r\n              Internet-Draft, draft-ietf-cellar-matroska-05, 17 April\r\n              2020, <https://tools.ietf.org/html/draft-ietf-cellar-\r\n              matroska-05>.\r\n",
    "correct_text": "   [Matroska] Lhomme, S., Bunkus, M., and D. Rice, \"Matroska Media\r\n              Container Format Specifications\", Work in Progress,\r\n              Internet-Draft, draft-ietf-cellar-matroska-05, 17 April\r\n              2020, <https://tools.ietf.org/html/draft-ietf-cellar-\r\n              matroska-05>.\r\n\r\n   [POSIX]    IEEE and The Open Group, \"Portable Operating System\r\n              Interface (POSIX(R)) Base Specifications, Issue 7\",\r\n              DOI 10.1109/IEEESTD.2018.8277153, 31 January 2018,\r\n              <https://standards.ieee.org/standard/1003_1-2017.html>.\r\n",
    "notes": "Added a reference to POSIX for the new nanosecond explanation.\r\n\r\nSee https://github.com/ietf-wg-cellar/ebml-specification/pull/415",
    "submit_date": "2022-10-30",
    "submitter_name": "Steve Lhomme",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
