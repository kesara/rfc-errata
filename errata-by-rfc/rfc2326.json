[
  {
    "errata_id": 4199,
    "doc-id": "RFC2326",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 4,
    "orig_text": "4 RTSP Message\r\n\r\n   RTSP is a text-based protocol and uses the ISO 10646 character set in\r\n   UTF-8 encoding (RFC 2279 [21]). Lines are terminated by CRLF, but\r\n   receivers should be prepared to also interpret CR and LF by\r\n   themselves as line terminators.\r\n\r\n     Text-based protocols make it easier to add optional parameters in a\r\n     self-describing manner. Since the number of parameters and the\r\n     frequency of commands is low, processing efficiency is not a\r\n     concern. Text-based protocols, if done carefully, also allow easy\r\n     implementation of research prototypes in scripting languages such\r\n     as Tcl, Visual Basic and Perl.\r\n\r\n     The 10646 character set avoids tricky character set switching, but\r\n     is invisible to the application as long as US-ASCII is being used.\r\n     This is also the encoding used for RTCP. ISO 8859-1 translates\r\n     directly into Unicode with a high-order octet of zero. ISO 8859-1\r\n     characters with the most-significant bit set are represented as\r\n     1100001x 10xxxxxx. (See RFC 2279 [21])\r\n\r\n   RTSP messages can be carried over any lower-layer transport protocol\r\n   that is 8-bit clean.\r\n\r\n   Requests contain methods, the object the method is operating upon and\r\n   parameters to further describe the method. Methods are idempotent,\r\n   unless otherwise noted. Methods are also designed to require little\r\n   or no state maintenance at the media server.",
    "correct_text": "\r\n4 RTSP Message\r\n\r\n   RTSP is a text-based protocol and uses the ISO 10646 character set in\r\n   UTF-8 encoding (RFC 2279 [21]). Lines are terminated by CRLF, but\r\n   receivers should be prepared to also interpret CR and LF by\r\n   themselves as line terminators.\r\n\r\n     Text-based protocols make it easier to add optional parameters in a\r\n     self-describing manner. Since the number of parameters and the\r\n     frequency of commands is low, processing efficiency is not a\r\n     concern. Text-based protocols, if done carefully, also allow easy\r\n     implementation of research prototypes in scripting languages such\r\n     as Tcl, Visual Basic and Perl.\r\n\r\n     The 10646 character set avoids tricky character set switching, but\r\n     is invisible to the application as long as US-ASCII is being used.\r\n     This is also the encoding used for RTCP. ISO 8859-1 translates\r\n     directly into Unicode with a high-order octet of zero. ISO 8859-1\r\n     characters with the most-significant bit set are represented as\r\n     1100001x 10xxxxxx. (See RFC 2279 [21])\r\n\r\n   RTSP messages can be carried over any lower-layer transport protocol\r\n   that is 8-bit clean.\r\n\r\n   Requests contain methods, the object the method is operating upon and\r\n   parameters to further describe the method. Methods are idempotent,\r\n   unless otherwise noted. Methods are also designed to require little\r\n   or no state maintenance at the media server.\r\n\r\n*Please note the hexadecimal octet 0x36 should not be included in any \r\npart of a RTSP message, if present it should be replaced with binary \r\nescaped sequence as defined in: <consensus>*.",
    "notes": "Section [15.1 Base Syntax] makes the following definitions:\r\n..\r\nsafe               =  \"\\$\" | \"-\" | \"_\" | \".\" | \"+\"\r\n..\r\nreserved           =  \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\"\r\nextra              =  \"!\" | \"*\" | \"$'$\" | \"(\" | \")\" | \",\"\r\nunreserved         =  alpha | digit | safe | extra\r\nxchar              =  unreserved | reserved | escape\r\n\r\nHowever it doesn't explicitly state the association of \"$\" [hexadecimal 0x24]\r\n\r\nSection [10.12 Embedded (Interleaved) Binary Data] specified a mechanism of transferring RTSP messages over a TCP connection with a application layer header consisting of the hexadecimal octet 0x24; followed by a single octet channel identifier and the RFC4571 length specifier of the frame.\r\n\r\nDue to the fact 0x24 violates section 4's requirements based on the fact it cannot be masked with the octet (AND 0xc3) to ensure it is a valid character I am filing this errata.\r\n\r\nThe chosen octet may also be present, specifically in the types of RTSP messages which are interleaved during playback such as ANNOUNCE. E.g. 0x24 could be a part of the configuration specifying the bits per pixel or audio bit depth as part of the SDP inter alia.\r\n\r\nIn such cases the underlying parser would interpret this octet as the start of the defined application header and cause framing errors which could cause data loss as allow for buffer overflow attacks of carefully crafted binary data.\r\n\r\nThere are also definitions which need to be made in the stadard for what to do when less then the amount of bytes indicated by the application layer frame header are or are not present. (e.g. more or less bytes are required then are present during reception of the given the [$CXX] application header sequence).\r\n\r\nIt is based on these considerations among others that I recommend that \"$\" [hexadecimal octet 0x24] be added to the reserved list and if necessary an escaping mechanism be defined where it is replaced with an escaped sequence which is agreed upon after consensus.\r\n\r\nDue to the fact that drafts also specify that RTSP can be extended with any type of message so long as the data is not \"$\" the first character it is ambiguous may also appear elsewhere in the status line.\r\n\r\nThere are also issues with the ambiguous definition of pdu fragmentation defined in the latest draft, e.g. the mechanism defined as possibly required when pdu's larger then 65535 bytes are used however it specified no way to convey how this occurs or why.\r\n\r\nThe same can also be said for \"sink\" and \"source\" however I will address those definitions et al when appropriate.\r\n\r\nThank you for your time!\r\n\r\nThe review noted the following: \r\n\r\n\"The reason is that is is technical change that can cause compatibility issues, and\r\nfurther does not resolve the issue as it is missing the required\r\nescaping definitions (another technical change). In addition we know\r\nthat RFC 2326 is quite buggy and attempting to fix it with Errata does\r\nnot work.\"\r\n\r\nMMUSIC is considering whether this should be fixed in RTSP 2.0.\n --VERIFIER NOTES-- \nThe reviewer noted the following: \r\n\r\n\"The reason is that is is technical change that can cause compatibility issues, and\r\nfurther does not resolve the issue as it is missing the required\r\nescaping definitions (another technical change). In addition we know\r\nthat RFC 2326 is quite buggy and attempting to fix it with Errata does\r\nnot work.\"\r\n\r\nMMUSIC is considering whether this should be fixed in RTSP 2.0.",
    "submit_date": "2014-12-11",
    "submitter_name": "Julius Friedman",
    "verifier_id": 147,
    "verifier_name": "Ben Campbell",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5079,
    "doc-id": "RFC2326",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 10.8,
    "orig_text": "     S->C: GET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0\r\n           CSeq: 431\r\n           Content-Type: text/parameters\r\n           Session: 12345678\r\n           Content-Length: 15\r\n\r\n           packets_received\r\n           jitter",
    "correct_text": "     S->C: GET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0\r\n           CSeq: 431\r\n           Content-Type: text/parameters\r\n           Session: 12345678\r\n           Content-Length: 24\r\n\r\n           packets_received\r\n           jitter",
    "notes": "The Content-Length value is wrong, it should be either 24 (as proposed) or 26, depending on end-of-line marker used for message content.\n --VERIFIER NOTES-- \n   RFC 2326 has been obsoleted by RFC 7826. The similar examples in RFC 7826 appear to have correct content-length field values.",
    "submit_date": "2017-08-08",
    "submitter_name": "Vadim Zhukov",
    "verifier_id": 147,
    "verifier_name": "Ben Campbell",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 6862,
    "doc-id": "RFC2326",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 3.6,
    "orig_text": "     The syntax conforms to ISO 8601. The npt-sec notation is optimized\r\n     for automatic generation, the ntp-hhmmss notation for consumption\r\n     by human readers.",
    "correct_text": "     The syntax conforms to ISO 8601. The npt-sec notation is optimized\r\n     for automatic generation, the npt-hhmmss notation for consumption\r\n     by human readers.",
    "notes": "A typo, ntp-hhmmss â†’ npt-hhmmss.",
    "submit_date": "2022-02-25",
    "submitter_name": "Chris Morgan",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  }
]
