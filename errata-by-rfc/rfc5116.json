[
  {
    "errata_id": 4008,
    "doc-id": "RFC5116",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 2.2,
    "orig_text": "   The\r\n   authenticated decrypt operation will, with high probability, return\r\n   FAIL whenever the inputs N, P, and A were crafted by a nonce-\r\n   respecting adversary that does not know the secret key (assuming that\r\n   the AEAD algorithm is secure).",
    "correct_text": "   The\r\n   authenticated decrypt operation will, with high probability, return\r\n   FAIL whenever the inputs N, C, and A were crafted by a nonce-\r\n   respecting adversary that does not know the secret key (assuming that\r\n   the AEAD algorithm is secure).",
    "notes": "Inputs to the authenticated decrypt operation do not include plaintext P, but instead includes ciphertext C.\r\n\r\nThanks for the correction, since this is descriptive text, it will be marked as editorial.",
    "submit_date": "2014-06-08",
    "submitter_name": "Tapio Sokura",
    "verifier_id": 141,
    "verifier_name": "Kathleen Moriarty",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4268,
    "doc-id": "RFC5116",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 3.1,
    "orig_text": "As an example, the nonce 100 could be stored, after which the nonces\r\n1 through 99 could be used for encryption.  The nonce value 200 could\r\nbe stored at the same time that nonces 1 through 99 are being used,\r\nand so on.",
    "correct_text": "As an example, the nonce 100 could be stored, after which the nonces\r\n1 through 99 could be used for encryption.  Then, nonces 101 to 199\r\ncould be used after the nonce 200 was saved.",
    "notes": "This might be confusing in its original form, maybe even suggesting an interpretation where nonces are reused.",
    "submit_date": "2015-02-09",
    "submitter_name": "Martin Thomson",
    "verifier_id": 141,
    "verifier_name": "Kathleen Moriarty",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4338,
    "doc-id": "RFC5116",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "3.2.1",
    "orig_text": "      +-------------------+--------------------+---------------+\r\n      |    Fixed-Common   |   Fixed-Distinct   |    Counter    |\r\n      +-------------------+--------------------+---------------+\r\n       <---- implicit ---> <------------ explicit ------------>\r\n\r\n                 Figure 2: Partially implicit nonce format\r\n\r\n      The rationale for the partially implicit nonce format is as\r\n      follows.  This method of nonce construction incorporates the best\r\n      known practice; it is used by both GCM Encapuslating Security\r\n      Payload (ESP) [RFC4106] and CCM ESP [RFC4309], in which the Fixed\r\n      field contains the Salt value and the lowest eight octets of the\r\n      nonce are explicitly carried in the ESP packet.  In GCM ESP, the\r\n      Fixed field must be at least four octets long, so that it can\r\n      contain the Salt value.  In CCM ESP, the Fixed field must be at\r\n      least three octets long for the same reason.  This nonce\r\n      generation method is also used by several counter mode variants\r\n      including CTR ESP.\r\n",
    "correct_text": "      +-------------------+------------------------------------+\r\n      |    Fixed-Common   |           Fixed-Distinct           |\r\n      +-------------------+------------------------------------+\r\n       <---- implicit ---> <------------ explicit ------------->\r\n\r\n                 Figure 2: Partially implicit nonce format\r\n\r\n      The rationale for the partially implicit nonce format is as\r\n      follows.  This method of nonce construction incorporates the best\r\n      known practice; it is used by both GCM Encapuslating Security\r\n      Payload (ESP) [RFC4106] and CCM ESP [RFC4309], in which the\r\n      Fixed-Common field contains the Salt value and the lowest eight\r\n      octets of the nonce are explicitly carried in the ESP packet. In\r\n      GCM ESP, the Fixed-Common field must be at least four octets\r\n      long, so that it can contain the Salt value.  In CCM ESP, the\r\n      Fixed-Common field must be at least three octets long for the\r\n      same reason.  This nonce generation method is also used by\r\n      several counter mode variants including CTR ESP.\r\n",
    "notes": "The counter is generally not considered part of the nonce.\r\n\r\nThe counter itself is not /send/ as part of the nonce, so the figure doesn't comply with the sentence in the text above: \"We call the portion of the nonce that is stored or sent with the ciphertext the explicit part.\" Furthermore the text above also reads: \"lowest eight octets of the nonce are explicitly carried in the ESP packet\"\r\n\r\nThe referred to documents (e.g. RFC 4106) also explicitly specify a 12 byte nonce.\r\n\r\nThe GCM documentation recommends using a nonce of 96 bits (12 bytes) and then proceeds to build a counter (specified as J0) out of that. If the nonce is considered 128 bits instead then J0 is created using a GMAC invocation, which is probably not what was meant by this specification.\r\n\r\nFinally, the text about GCM ESP and CCM ESP didn't distinguish between Fixed-Common and Fixed Distinct. It seems clear to me that Fixed-Common was meant the text below Figure 2. (If this should be in a separate Report, please let me know - the text between these parentheses may be removed of course)",
    "submit_date": "2015-04-19",
    "submitter_name": "Maarten Bodewes",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5219,
    "doc-id": "RFC5116",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "5.1, 5.2",
    "orig_text": "P_MAX is 2^36 - 31 octets",
    "correct_text": "P_MAX is 2^36 - 32 octets",
    "notes": "There is an off-by-one error in the specification of the maximum input size for AES-GCM.\r\n\r\nNIST SP-800-38D [1] Section 5.2.1.1 says:\r\n\r\n    len(P) â‰¤ 2^39-256\r\n\r\n\r\n    (2^39-256) / 8 = 2^36 - 32\r\n\r\nSee also RFC 7539 Errata 4858.\r\n\r\n[1] http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf",
    "submit_date": "2017-12-28",
    "submitter_name": "Brian Smith",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5233,
    "doc-id": "RFC5116",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 5.3,
    "orig_text": "An AEAD_AES_128_CCM ciphertext is exactly 16 octets longer than its\r\n corresponding plaintext.",
    "correct_text": "An AEAD_AES_128_CCM ciphertext is exactly 2 octets longer than its\r\n corresponding plaintext.",
    "notes": "As described in NIST SP 800-38c the length of the MAC is given in bits. The algorithm specified therein at 6.2 returns a string of PLen + TLen bits.",
    "submit_date": "2018-01-10",
    "submitter_name": "Lars Maier",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 6415,
    "doc-id": "RFC5116",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": 3.2,
    "orig_text": "  Implementations\r\n   SHOULD support 12-octet nonces in which the Counter field is four\r\n   octets long.",
    "correct_text": "  Implementations\r\n   SHOULD support 12-octet nonces in which the Fixed field is four\r\n   octets long.",
    "notes": "The ascii diagram given shows the Fixed portion being smaller and the examples given in https://tools.ietf.org/id/draft-mcgrew-iv-gen-01.html also show that the Fixed portion is 4 bytes. \r\n\r\nAlso an 8 byte counter gives 2^64, where a 4 byte counter would only give 2^32",
    "submit_date": "2021-01-29",
    "submitter_name": "Jordan Smith",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  }
]
