[
  {
    "errata_id": "207",
    "doc-id": "RFC3961",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "The Unicode character g-clef used throughout the document says:",
    "orig_text": "           \"g-clef    U+1011E   F0 9D 84 9E\"",
    "correct_text": "           \"g-clef    U+1D11E   F0 9D 84 9E\"",
    "notes": "",
    "submit_date": "2006-04-05",
    "submitter_name": "Weijun Wang",
    "verifier_id": "2",
    "verifier_name": "Tim Polk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5522",
    "doc-id": "RFC3961",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "6.2.3",
    "orig_text": "                               des-cbc-crc\r\n   --------------------------------------------------------------------\r\n   protocol key format      8 bytes, parity in low bit of each\r\n\r\n   specific key structure   copy of original key\r\n\r\n   required checksum        rsa-md5-des\r\n   mechanism\r\n",
    "correct_text": "                               des-cbc-crc\r\n   --------------------------------------------------------------------\r\n   protocol key format      8 bytes, parity in low bit of each\r\n\r\n   specific key structure   copy of original key\r\n\r\n   required checksum        CRC32\r\n   mechanism\r\n",
    "notes": "des-cbc-crc is using the modified crc32 checksum, its required checksum should be CRC32, constant defined in section 8\n --VERIFIER NOTES-- \n   Rejected per submitter request; the required Checksum is a distinct operation, not a subset of the encryption operation.",
    "submit_date": "2018-10-12",
    "submitter_name": "Wrong required required checksum mechanism for des-cbc-crc",
    "verifier_id": "159",
    "verifier_name": "Benjamin Kaduk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "6973",
    "doc-id": "RFC3961",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "6.2",
    "orig_text": "6.2.1:\r\n\r\n   key-generation seed      8 bytes\r\n   length\r\n\r\n   random-to-key            des_random_to_key\r\n\r\n6.2.2:\r\n\r\n   key-generation seed      8 bytes\r\n   length\r\n\r\n   random-to-key            copy input, then fix parity bits\r\n\r\n6.2.3:\r\n\r\n   key-generation seed      8 bytes\r\n   length\r\n\r\n   random-to-key            copy input, then fix parity bits",
    "correct_text": "All sections:\r\n\r\n   key-generation seed      7 bytes\r\n   length\r\n\r\n   random-to-key            des_random_to_key",
    "notes": "Section 6.2 describes the random-to-key operation as:\r\n\r\n   For generation of a key from a random bitstring, we start with a 56-\r\n   bit string and, as with the string-to-key operation above, insert\r\n   parity bits.  If the result is a weak or semi-weak key, we modify it\r\n   by eXclusive-OR with the constant 0x00000000000000F0:\r\n\r\n        des_random_to_key(bitstring) {\r\n             return key_correction(add_parity_bits(bitstring));\r\n        }\r\n\r\nFor 6.2.1, the input should be 56-bits, not 64.\r\nFor 6.2.2 and 6.2.3, the random-to-key must also correct weak keys and not just the parity as currently described.\r\n\r\nOf course, this is all purely of academic interest as the 10-year anniversary of RFC6649 deprecating single DES is coming up in a couple of weeks. The distinction between a \"weak\" single DES key and a correctly generated random key only matters if your adversary is restricted to using graphing calculators.",
    "submit_date": "2022-05-12",
    "submitter_name": "Paul Miller",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
