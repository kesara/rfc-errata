[
  {
    "errata_id": "5791",
    "doc-id": "RFC8620",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "2.1",
    "orig_text": "\"capabilities\": {\r\n  \"urn:ietf:params:jmap:core\": {\r\n    \"maxSizeUpload\": 50000000,\r\n    \"maxConcurrentUpload\": 8,\r\n    \"maxSizeRequest\": 10000000,\r\n    \"maxConcurrentRequest\": 8,\r\n    \"maxCallsInRequest\": 32,\r\n    \"maxObjectsInGet\": 256,\r\n    \"maxObjectsInSet\": 128,\r\n    \"collationAlgorithms\": [\r\n      \"i;ascii-numeric\",\r\n      \"i;ascii-casemap\",\r\n      \"i;unicode-casemap\"\r\n    ]\r\n  },\r\n  \"urn:ietf:params:jmap:mail\": {}\r\n  \"urn:ietf:params:jmap:contacts\": {},\r\n  \"https://example.com/apis/foobar\": {\r\n    \"maxFoosFinangled\": 42\r\n  }\r\n}",
    "correct_text": "\"capabilities\": {\r\n  \"urn:ietf:params:jmap:core\": {\r\n    \"maxSizeUpload\": 50000000,\r\n    \"maxConcurrentUpload\": 8,\r\n    \"maxSizeRequest\": 10000000,\r\n    \"maxConcurrentRequests\": 8,\r\n    \"maxCallsInRequest\": 32,\r\n    \"maxObjectsInGet\": 256,\r\n    \"maxObjectsInSet\": 128,\r\n    \"collationAlgorithms\": [\r\n      \"i;ascii-numeric\",\r\n      \"i;ascii-casemap\",\r\n      \"i;unicode-casemap\"\r\n    ]\r\n  },\r\n  \"urn:ietf:params:jmap:mail\": {},\r\n  \"urn:ietf:params:jmap:contacts\": {},\r\n  \"https://example.com/apis/foobar\": {\r\n    \"maxFoosFinangled\": 42\r\n  }\r\n}",
    "notes": "In the capabilities section of the example Session Resource response, \"maxConcurrentRequest\" should be \"maxConcurrentRequests\". \r\n\r\nIn addition, the following line is missing a trailing comma:\r\n  \"urn:ietf:params:jmap:mail\": {}",
    "submit_date": "2019-07-02",
    "submitter_name": "Neil Jhaveri",
    "verifier_id": "116",
    "verifier_name": "Alexey Melnikov",
    "update_date": "2019-09-23 09:32:45"
  },
  {
    "errata_id": "6603",
    "doc-id": "RFC8620",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "5.6",
    "orig_text": "In the \"upToId\" request argument definition:\r\n\r\n      If the sort and\r\n      filter are both only on immutable properties, this allows the\r\n      server to omit changes after this point in the results, which can\r\n      significantly increase efficiency.  If they are not immutable,\r\n      this argument is ignored.\r\n\r\nIn the \"removed\" response argument definition:\r\n\r\n      If the sort and filter are both only on immutable properties and\r\n      an \"upToId\" is supplied and exists in the results, any ids that\r\n      were removed but have a higher index than \"upToId\" SHOULD be\r\n      omitted.\r\n\r\nIn the \"added\" response argument definition:\r\n\r\n      If the sort and filter are both only on immutable properties and\r\n      an \"upToId\" is supplied and exists in the results, any ids that\r\n      were added but have a higher index than \"upToId\" SHOULD be\r\n      omitted.",
    "correct_text": "In the upToId argument definition:\r\n\r\n      The server may be able to omit added or removed items that are \r\n      after the client's last cached id, making the update more efficient.\r\n\r\nIn the \"removed\" response argument definition:\r\n\r\n      If an \"upToId\" is supplied and existed in the old results, any ids\r\n      that were removed but had a higher index than \"upToId\" in those\r\n      results SHOULD be omitted.  If the server cannot calculate this,\r\n      the \"upToId\" MUST be ignored.\r\n\r\nIn the \"added\" response argument definition:\r\n\r\n      If an \"upToId\" is supplied and exists in the new results, any ids\r\n      that were added but have a higher index than \"upToId\" SHOULD be\r\n      omitted.",
    "notes": "This errata fixes two issues with the upToId definition:\r\n\r\n1. Using upToId doesn't require immutable properties in some server implementations; this is an implementation detail. The important thing is it's an optional optimisation that the server can ignore if it does not have the data to calculate it. The text has been updated to reflect this.\r\n\r\n2. Clarify that for the \"removed\" argument, the indexes we are comparing for the upToId optimisation are of the ids in the *old* results. The original text is unclear and seems to imply you might compare with the index of the id in the new results, which will give an incorrect result.",
    "submit_date": "2021-06-09",
    "submitter_name": "Neil Jenkins",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "6604",
    "doc-id": "RFC8620",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "5.6",
    "orig_text": "   If it *splices out* all ids in the removed array that it has in its\r\n   cached results, then:\r\n\r\n      removed = [ \"id2\", \"id31\", ... ];\r\n      fooIds => [ \"id1\", null, null, \"id3\", \"id4\", null, null, null ]\r\n\r\n   and *splices in* (one by one in order, starting with the lowest\r\n   index) all of the ids in the added array:\r\n\r\n  added = [{ id: \"id5\", index: 0, ... }];\r\n  fooIds => [ \"id5\", \"id1\", null, null, \"id3\", \"id4\", null, null, null ]",
    "correct_text": "   If it *splices out* all ids in the removed array that it has in its\r\n   cached results, then:\r\n\r\n      removed = [ \"id2\", \"id31\", ... ];\r\n      fooIds => [ \"id1\", null, null, \"id3\", \"id4\", null, null, null ]\r\n\r\n   and if any of the \"removed\" ids were not found, invalidates all\r\n   cached ids after the first gap in the sparse array:\r\n\r\n       fooIds => [ \"id1\", null, null, null, null, null, null, null ]\r\n\r\n   and *splices in* (one by one in order, starting with the lowest\r\n   index) all of the ids in the added array:\r\n\r\n   added = [{ id: \"id5\", index: 0, ... }];\r\n   fooIds => [ \"id5\", \"id1\", null, null, null, null, null, null, null ]",
    "notes": "Adds a critical step that was omitted from the description for how a client should process a \"/queryUpdates\" response. Without this step, the client could end up with ids in incorrect positions in its cached query results.",
    "submit_date": "2021-06-09",
    "submitter_name": "Neil Jenkins",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "6605",
    "doc-id": "RFC8620",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "5.5",
    "orig_text": "   o  position: \"UnsignedInt\"\r\n\r\n      The zero-based index of the first result in the \"ids\" array within\r\n      the complete list of query results.",
    "correct_text": "   o  position: \"UnsignedInt\"\r\n\r\n      The zero-based index of the first result in the \"ids\" array within\r\n      the complete list of query results.  If the \"ids\" array is empty,\r\n      the value is undefined and MUST NOT be used by the client.",
    "notes": "The position response argument in \"/query\" is only defined when there is at least one id returned in the response. Make it clearer that when there are no ids returned, the client cannot rely on it being any particular value.",
    "submit_date": "2021-06-09",
    "submitter_name": "Neil Jenkins",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "6606",
    "doc-id": "RFC8620",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "3.3",
    "orig_text": "o  using: \"String[]\"\r\n\r\n      The set of capabilities the client wishes to use.  The client MAY\r\n      include capability identifiers even if the method calls it makes\r\n      do not utilise those capabilities.  The server advertises the set\r\n      of specifications it supports in the Session object (see\r\n      Section 2), as keys on the \"capabilities\" property.",
    "correct_text": "o  using: \"String[]\"\r\n\r\n      The set of capabilities the client wishes to use.  The client MAY\r\n      include capability identifiers even if the method calls it makes\r\n      do not utilise those capabilities.  The server advertises the set\r\n      of specifications it supports in the Session object (see\r\n      Section 2), as keys on the \"capabilities\" property.  The\r\n      \"urn:ietf:params:jmap:core\" capability represents this document\r\n      and MUST be included in the \"using\" list.  This is to allow a\r\n      smooth upgrade path for future revisions to the core JMAP\r\n      specification with different capability identifiers.",
    "notes": "The original text was unclear on whether the capability for this document (JMAP core) had to be included in the \"using\" list, or just those of extensions to JMAP core. Clarify that the \"core\" capability must also be included, and give the rationale.",
    "submit_date": "2021-06-09",
    "submitter_name": "Neil Jenkins",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "6607",
    "doc-id": "RFC8620",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "5.3",
    "orig_text": "   [...]                             In the case of records with\r\n   references to the same type, the server MUST order the creates and\r\n   updates within a single method call so that creates happen before\r\n   their creation ids are referenced by another create/update/destroy in\r\n   the same call.",
    "correct_text": "   [...]                             In the case of records with\r\n   references to the same type, the server MUST order the creates and\r\n   updates within a single method call so that creates happen before\r\n   their creation ids are referenced by another create/update/destroy in\r\n   the same call.\r\n\r\n   A record may be updated/destroyed in the same request as it is\r\n   created.  The update/destroy arguments may use creation ids as keys\r\n   by prefixing the creation id with a \"#\".",
    "notes": "Clarify that it's explicitly permitted to update/destroy records created in the same request using the same mechanism as setting foreign keys in records.",
    "submit_date": "2021-06-09",
    "submitter_name": "Neil Jenkins",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
