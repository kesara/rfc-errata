[
  {
    "errata_id": 899,
    "doc-id": "RFC3659",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 6.5,
    "orig_text": "   That those pathnames all exist does not imply that the TVFS sever\r\n   will necessarily grant any kind of access rights to the named paths,\r\n   or that access to the same file via different pathnames will\r\n   necessarily be granted equal rights.",
    "correct_text": "   That those pathnames all exist does not imply that the TVFS server\r\n   will necessarily grant any kind of access rights to the named paths,\r\n   or that access to the same file via different pathnames will\r\n   necessarily be granted equal rights.",
    "notes": "typo: sever --> server\r\n\r\nfrom pending",
    "submit_date": "2007-04-14",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 2,
    "verifier_name": "RFC Editor",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 900,
    "doc-id": "RFC3659",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 7,
    "orig_text": "   The MLST and MLSD commands also extend the FTP protocol as presented\r\n   in STD 9, RFC 959 [3] and STD 3, RFC 1123 [9] to allow that\r\n   transmission of 8-bit data over the control connection.",
    "correct_text": "   The MLST and MLSD commands also extend the FTP protocol as presented\r\n   in STD 9, RFC 959 [3] and STD 3, RFC 1123 [9] to allow the\r\n   transmission of 8-bit data over the control connection.",
    "notes": "typo: that --> the\r\n\r\nfrom pending",
    "submit_date": "2007-04-14",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 2,
    "verifier_name": "RFC Editor",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 901,
    "doc-id": "RFC3659",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "7.5.4",
    "orig_text": "   The create fact indicates when a file, or directory, was first\r\n   created.  Exactly what \"creation\" is for this purpose is not\r\n   specified here, and may vary from server to server.  About all that\r\n   can be said about the value returned is that it can never indicate a\r\n   later time than the modify fact.",
    "correct_text": "   The create fact indicates when a file, or directory, was first\r\n   created.  Exactly what \"creation\" is for this purpose is not\r\n   specified here, and may vary from server to server.",
    "notes": "It is one of the benefits of 'Create' timestamps for directory\r\nentries that there is *no* enforced relationship between that\r\ntimestamp and the 'Modify' timestamp related to the file *content*.\r\n\r\nWe still support legacy systems from Hewlett-Packard that indeed\r\nmaintain three timestamps per directory entry: 'Create', 'Modify',\r\nand 'Access'.  The very useful behaviour of the File System and\r\nthe proprietary Networking Services is as follows: If you move a\r\nfile to another directory or copy it (within a system, or across\r\nthe network), the 'Modify' timestamp does not change (since the\r\nfile content is unchanged from what it was then), only the 'Create'\r\ntimestamp of the new directory entry is set to the current time.\r\n(This means the 'Modify' timestamp behaves like a 'last update'\r\ntimestamp embedded in the file content, e.g., in a PDF file.)\r\nIn this case, the create fact would have to be *later* than the\r\nmodify fact, for RFC 3659.  Naturally, if a file was being edited,\r\nthe 'Modify' timestamp changes and will then be later than the\r\n'Create' timestamp.\r\nThe natural behaviour of a hypothetical FTP client implementing\r\nRFC 3659 in such environment, when performing a 'get' operation,\r\nwould be to obtain the modify timestamp of the remote file via\r\nMLSx or MDTM and, after performing the RETR (and, perhaps verifying\r\nthe 'atomicity' of the transfer via another MDTM that should deliver\r\nthe same response again) setting the 'Modify' timestamp of the local\r\ncopy of the file to the moment corresponding to the MDTM result\r\nvalue (or the modify fact value from the MLSx).\n --VERIFIER NOTES-- \nThis is a technical change that may be against the consensus of a WG and therefore is not appropriate for an erratum.",
    "submit_date": "2007-04-14",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 127,
    "verifier_name": "Pete Resnick",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 903,
    "doc-id": "RFC3659",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 9,
    "orig_text": "                                 [...].  Unless the \"media-type\" fact is\r\n   provided in a MLSx response nor is any advice given here that would\r\n   allow determining the content type.  [...]",
    "correct_text": "                                 [...].  Unless the \"media-type\" fact is\r\n   provided in a MLSx response, no advice is given here that would allow\r\n   determining the content type.  [...]",
    "notes": "This sentence apparently is garbled a bit.\r\n\r\nfrom pending",
    "submit_date": "2007-04-14",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 121,
    "verifier_name": "Peter Saint-Andre",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 1500,
    "doc-id": "RFC3659",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "7.7.4",
    "orig_text": "7.7.4.  A More Complex Example\r\n ...\r\nC> MLSD test\r\nS> 150 BINARY connection open for MLSD test\r\nD> Type=cdir;Perm=el;Unique=keVO1+ZF4; test\r\nD> Type=pdir;Perm=e;Unique=keVO1+d?3; ..\r\nD> Type=OS.unix=slink:/foobar;Perm=;Unique=keVO1+4G4; foobar\r\n",
    "correct_text": "7.7.4.  A More Complex Example\r\n ...\r\nC> MLSD test\r\nS> 150 BINARY connection open for MLSD test\r\nD> Type=cdir;Perm=el;Unique=keVO1+ZF4; test\r\nD> Type=pdir;Perm=e;Unique=keVO1+d?3; ..\r\nD> Type=OS.unix=symlink;Perm=;Unique=keVO1+4G4; foobar\r\n     ... more lines ...\r\nD> Type=dir;Perm=;Unique=keVO1+4G4; /foobar; does originally point to here\r\n",
    "notes": "The sample sequence in chapter 7.7.4 uses an example which is completely wrong, because it violates the basic BNF rules of its own document.\r\n\r\nPlease, see the definition, which is violated:\r\n\r\n7.2.  Format of MLSx Response\r\nThe format of a response to an MLSx command is as follows:\r\n      ...\r\n      entry            = [ facts ] SP pathname\r\n      facts            = 1*( fact \";\" )\r\n      fact             = factname \"=\" value\r\n      ...\r\n\r\nRemember, a fact may not contain \";\" or SPC (\" \")!\r\nNow take a look into the bad example:\r\n\r\n\r\n7.7.4.  A More Complex Example\r\n ...\r\n\tC> MLSD test\r\n\tS> 150 BINARY connection open for MLSD test\r\n\tD> Type=cdir;Perm=el;Unique=keVO1+ZF4; test\r\n\tD> Type=pdir;Perm=e;Unique=keVO1+d?3; ..\r\n\tD> Type=OS.unix=slink:/foobar;Perm=;Unique=keVO1+4G4; foobar\r\n\r\n\r\nthe last line uses the fact \"Type=OS.unix=slink:/foobar;\". While this line in special not violates the rules at the moment, it implies that \"Type=OS.unix=slink:\" starts printing the original link target of any given symbolic link. Not wrong till here, but in case a link points to an original directory which name contains a \";\" or, most worse, a \"; \" sequence, it will \r\nlead any client side PI into misinterpretation of the line.\r\n\r\nEven more worse, some actual public servers already use this bad syntax. Some can be found at least in the Swiss. It looks like they are running proftpd under Linux operating system, but this is unconfirmed for now.\r\n\r\n\r\nSolution:\r\n\r\nThe chapter 7 of the same document allows another approach to tell the client about the original destination of a symlink. This solution uses two lines of answer, see my example:\r\n\r\n\tC> MLSD test\r\n\tS> 150 BINARY connection open for MLSD test\r\n\tD> Type=cdir;Perm=el;Unique=keVO1+ZF4; test\r\n\tD> Type=pdir;Perm=e;Unique=keVO1+d?3; ..\r\n\tD> Type=OS.unix=symlink;Perm=;Unique=keVO1+4G4; foobar points somewhere else\r\n     ... more lines ...\r\n\tD> Type=dir;Perm=;Unique=keVO1+4G4; /foobar; does originally point to here\r\n\r\nbecause of the \"Unique\" fact, a client PI can now collect all lines with the fact \"Type=OS.unix=symlink\" and file it under an associative array (map, hastable) with \"keVO1+4G4\" as the access key. Once the client side parser again gets \"Unique=keVO1+4G4\", it now can record \"/foobar; does point to here\" as the original point where foobar points to.\r\n\r\nThis is exactly, what chapter 7.5.1.5 defines about the \"Unique\" fact. Please read:\r\n   Note: Where the underlying system supports a file type that is\r\n   essentially an indirect pointer to another file, the NVFS\r\n   representation of that type should normally be to represent the file\r\n   that the reference indicates.  That is, the underlying basic file\r\n   will appear more than once in the NVFS, each time with the \"unique\"\r\n   fact (see immediately following section) containing the same value,\r\n   indicating that the same file is represented by all such names.\r\n\r\n\r\nUseful to say, setting the slink into double quotes like suggested by some developers:\r\n\r\n\tD> Type=OS.unix=\"slink:/foobar\";Perm=;Unique=keVO1+4G4; foobar\r\n\r\nwould violate the same documents BNF rules (see RCHAR), as well it would require escaping of any DQUOTE in the link pathname itself. This, again, would violate RFC959 which not defines escaping of characters.\r\n\r\n\r\nFinally, FTP does not support 2 pathnames at the same line at all. This convention sould never been broken.",
    "submit_date": "2008-09-02",
    "submitter_name": "Maik Rei√ü (Reiss)",
    "verifier_id": 130,
    "verifier_name": "Barry Leiba",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 2496,
    "doc-id": "RFC3659",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "GLOBAL",
    "orig_text": "3.2\r\n...\r\nVarious 4xy replies are also possible in appropriate circumstances.\r\n\r\n4.2\r\n...\r\nVarious 4xy replies are also possible in appropriate circumstances.\r\n\r\n7.2.1\r\n   Many of the 4xy and 5xy responses defined in section 4.2 of STD 9,\r\n   RFC 959 [3] are possible in response to the MLST and MLSD commands.\r\n...\r\n   Other replies (530, 553, 503, 504, and any of the 4xy replies) are\r\n   also possible in appropriate circumstances.\r\n",
    "correct_text": "3.2\r\n...\r\nVarious 4yz replies are also possible in appropriate circumstances.\r\n\r\n4.2\r\n...\r\nVarious 4yz replies are also possible in appropriate circumstances.\r\n\r\n7.2.1\r\n   Many of the 4yz and 5yz responses defined in section 4.2 of STD 9,\r\n   RFC 959 [3] are possible in response to the MLST and MLSD commands.\r\n...\r\n   Other replies (530, 553, 503, 504, and any of the 4yz replies) are\r\n   also possible in appropriate circumstances.\r\n",
    "notes": "RFC 959, Section 4.2 refers to these reply codes as 4yz and 5yz, instead of 4xy and 5xy.",
    "submit_date": "2010-08-21",
    "submitter_name": "Anthony Bryan",
    "verifier_id": 121,
    "verifier_name": "Peter Saint-Andre",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 2850,
    "doc-id": "RFC3659",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": 2.5,
    "orig_text": "   and each sequence of\r\n   lines that begin \"D> \" was sent from the server-PI to the user-PI\r\n   over a data connection created just to send those lines and closed\r\n   immediately after.",
    "correct_text": "   and each sequence of\r\n   lines that begin \"D> \" was sent from the server-DTP to the user-DTP\r\n   over a data connection created just to send those lines and closed\r\n   immediately after.",
    "notes": "In this case the acting parties are DTPs, not PIs.",
    "submit_date": "2011-06-29",
    "submitter_name": "Mykyta Yevstifeyev",
    "verifier_id": 121,
    "verifier_name": "Peter Saint-Andre",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 6252,
    "doc-id": "RFC3659",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 10.2,
    "orig_text": "To add a file type to this OS specific registry of OS specific file types, an applicant must send to the IANA a request, in which is specified the OS name, the OS specific file type, a definition of the syntax of the fact value, which must conform to the syntax of a token as given in this document, and a specification of the semantics to be associated with the particular fact and its values.\r\n",
    "correct_text": "To add a file type to this OS specific registry of OS specific file types, an applicant must send to the IANA a request, in which is specified the OS name, the OS specific file type, and a specification of the semantics to be associated with the particular OS specific file type.\r\n",
    "notes": "It appears that the text in section 10.2 has been copy/pasted from section 10.1, without applying the necessary adjustments for the differences between OS-specific facts and OS-specific filetypes. While OS-specific facts do have values (see section 7.2), there is no concept of a \"value\" of an OS-specific filetype defined in the RFC (see section 7.5.1.5).\r\n\r\nThis error effectively makes it impossible to register an OS-specific filetype with IANA, were IANA to follow the wording of the RFC to the letter ‚Äì IANA must demand a \"definition of the syntax of the fact value\" for every filetype registration, despite the fact that request makes no sense for a filetype as defined in the RFC.",
    "submit_date": "2020-08-08",
    "submitter_name": "Simon Kissane",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  }
]
