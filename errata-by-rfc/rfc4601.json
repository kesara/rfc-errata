[
  {
    "errata_id": "1094",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Table of Con",
    "orig_text": "A.2.  Sources Internal to the PIM-SM Domain ...................144",
    "correct_text": "A.2. Sources Internal to the PIM-SM Domain ...................144",
    "notes": "One extra space is listed after the heading and before the item.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1095",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 1. Per-(S,G) register state machine at a DR ................38",
    "correct_text": "Figure 1. Per-(S,G) register state machine at a DR ................39",
    "notes": "Figure 1 occurs on page 39, is listed as occurring on page 38.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1096",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 4. Downstream per-interface (S,G) state machine ............53",
    "correct_text": "Figure 4. Downstream per-interface (S,G) state machine ............54",
    "notes": "Figure 1 occurs on page 54, is listed as occurring on page 53.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1097",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 5. Downstream per-interface (S,G,rpt) state machine ........57",
    "correct_text": "Figure 5. Downstream per-interface (S,G,rpt) state machine ........58",
    "notes": "Figure 1 occurs on page 58, is listed as occurring on page 57.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1098",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 6. Upstream (*,*,RP) state machine .........................62",
    "correct_text": "Figure 6. Upstream (*,*,RP) state machine ......................63-64",
    "notes": "Figure 1 occurs on pages 63-64, is listed as occurring on page 62.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1099",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 7. Upstream (*,G) state machine ............................67",
    "correct_text": "Figure 7. Upstream (*,G) state machine .........................67-68",
    "notes": "Figure 1 occurs on pages 67-68, is listed as occurring on page 67.\n --VERIFIER NOTES-- \nList of figures is like a table of contents and only needs to point to the first page on which the figure can be found.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1100",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 8. Upstream (S,G) state machine ............................71",
    "correct_text": "Figure 8. Upstream (S,G) state machine .........................72-73",
    "notes": "Figure 1 occurs on page 72-73, is listed as occurring on page 71.\n --VERIFIER NOTES-- \nList of figures is like a table of contents and only needs to point to the first page on which the figure can be found.   ",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1101",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 9. Upstream (S,G,rpt) state machine for triggered\r\n             messages ................................................77\r\n",
    "correct_text": "Figure 9. Upstream (S,G,rpt) state machine for triggered\r\n             messages ................................................78\r\n",
    "notes": "Figure 1 occurs on page 78, is listed as occurring on page 77.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1102",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 10. Per-interface (S,G) Assert State machine ...............84",
    "correct_text": "Figure 10. Per-interface (S,G) Assert State machine ............84-85",
    "notes": "Figure 1 occurs on pages 84-85, is listed as occurring on page 84.\n --VERIFIER NOTES-- \nList of figures is like a table of contents and only needs to point to the first page on which the figure can be found.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1103",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "List of Figu",
    "orig_text": "Figure 11. Per-interface (*,G) Assert State machine ...............92",
    "correct_text": "Figure 11. Per-interface (*,G) Assert State machine ............92-93",
    "notes": "Figure 1 occurs on pages 92-93, is listed as occurring on page 92.\n --VERIFIER NOTES-- \nList of figures is like a table of contents and only needs to point to the first page on which the figure can be found.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1104",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.6",
    "orig_text": "immediate_olist(*,G) =\r\n       joins(*,G) (+) pim_include(*,G) (-) lost_assert(*,G)\r\n",
    "correct_text": "immediate_olist(*,G) =\r\n       ( joins(*,G) (+) pim_include(*,G) ) (-) lost_assert(*,G)\r\n\r\n-or-\r\n\r\nimmediate_olist(*,G) =\r\n       joins(*,G) (+) ( pim_include(*,G) (-) lost_assert(*,G) )\r\n",
    "notes": "Left or right associativity is not established at the beginning of this document, so it is necessary to clarify which operation happens first: (+) or (-).",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1105",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.6",
    "orig_text": "immediate_olist(S,G) =\r\n       joins(S,G) (+) pim_include(S,G) (-) lost_assert(S,G)\r\n",
    "correct_text": "immediate_olist(S,G) =\r\n       ( joins(S,G) (+) pim_include(S,G) ) (-) lost_assert(S,G)\r\n\r\n-or-\r\n\r\nimmediate_olist(S,G) =\r\n       joins(S,G) (+) ( pim_include(S,G) (-) lost_assert(S,G) )\r\n",
    "notes": "Left or right associativity is not established at the beginning of this document, so it is necessary to clarify which operation happens first: (+) or (-).",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1106",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.6",
    "orig_text": "inherited_olist(S,G,rpt) =\r\n           ( joins(*,*,RP(G)) (+) joins(*,G) (-) prunes(S,G,rpt) )\r\n       (+) ( pim_include(*,G) (-) pim_exclude(S,G))\r\n       (-) ( lost_assert(*,G) (+) lost_assert(S,G,rpt) )\r\n",
    "correct_text": "inherited_olist(S,G,rpt) =\r\n           ( ( ( joins(*,*,RP(G)) (+) joins(*,G) ) (-) prunes(S,G,rpt) )\r\n       (+) ( pim_include(*,G) (-) pim_exclude(S,G)) )\r\n       (-) ( lost_assert(*,G) (+) lost_assert(S,G,rpt) )\r\nOr:\r\ninherited_olist(S,G,rpt) =\r\n           ( ( joins(*,*,RP(G)) (+) joins(*,G) ) (-) prunes(S,G,rpt) )\r\n       (+) ( ( pim_include(*,G) (-) pim_exclude(S,G))\r\n       (-) ( lost_assert(*,G) (+) lost_assert(S,G,rpt) ) )\r\nOr:\r\ninherited_olist(S,G,rpt) =\r\n           ( ( joins(*,*,RP(G)) (+) ( joins(*,G) (-) prunes(S,G,rpt) ) )\r\n       (+) ( pim_include(*,G) (-) pim_exclude(S,G)) )\r\n       (-) ( lost_assert(*,G) (+) lost_assert(S,G,rpt) )\r\nOr:\r\ninherited_olist(S,G,rpt) =\r\n           ( joins(*,*,RP(G)) (+) ( joins(*,G) (-) prunes(S,G,rpt) ) )\r\n       (+) ( ( pim_include(*,G) (-) pim_exclude(S,G))\r\n       (-) ( lost_assert(*,G) (+) lost_assert(S,G,rpt) ) )\r\n",
    "notes": "Left or right associativity is not established at the beginning of this document, so it is necessary to clarify which operations happens first.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1107",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.6",
    "orig_text": "   inherited_olist(S,G) =\r\n       inherited_olist(S,G,rpt) (+)\r\n       joins(S,G) (+) pim_include(S,G) (-) lost_assert(S,G)\r\n",
    "correct_text": "   inherited_olist(S,G) =\r\n       inherited_olist(S,G,rpt) (+)\r\n       joins(S,G) (+) ( pim_include(S,G) (-) lost_assert(S,G) )\r\nOr:\r\n   inherited_olist(S,G) =\r\n       ( inherited_olist(S,G,rpt) (+)\r\n       joins(S,G) (+) pim_include(S,G) ) (-) lost_assert(S,G)\r\nOr:\r\n   inherited_olist(S,G) =\r\n       inherited_olist(S,G,rpt) (+)\r\n       ( ( joins(S,G) (+) pim_include(S,G) ) (-) lost_assert(S,G) )\r\n",
    "notes": "Left or right associativity is not established at the beginning of this document, so it is necessary to clarify which operations happens first.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1108",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.2",
    "orig_text": "Second, we check to see if the SPTbit should be set because we've now\r\n   switched from the RP tree to the SPT.\r\n",
    "correct_text": "See notes",
    "notes": "The dependent clause does not follow from the independent clause.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1109",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.2",
    "orig_text": "Data-triggered PIM-Assert messages sent from the above forwarding\r\n   code should be rate-limited in a implementation-dependent manner.\r\n",
    "correct_text": "Data-triggered PIM-Assert messages sent from the above forwarding\r\n   code should be rate-limited in an implementation-dependent manner.\r\n",
    "notes": "Misspelling",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1110",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.2.1",
    "orig_text": "void\r\n     CheckSwitchToSpt(S,G) {\r\n       if ( ( pim_include(*,G) (-) pim_exclude(S,G)\r\n              (+) pim_include(S,G) != NULL )\r\n            AND SwitchToSptDesired(S,G) ) {\r\n",
    "correct_text": "void\r\n     CheckSwitchToSpt(S,G) {\r\n       if ( ( ( pim_include(*,G) (-) pim_exclude(S,G) )\r\n              (+) pim_include(S,G) != NULL )\r\n            AND SwitchToSptDesired(S,G) ) {\r\n\r\nOr:\r\n\r\nvoid\r\n     CheckSwitchToSpt(S,G) {\r\n       if ( ( pim_include(*,G) (-) ( pim_exclude(S,G)\r\n              (+) pim_include(S,G) != NULL ) )\r\n            AND SwitchToSptDesired(S,G) ) {\r\n",
    "notes": "Left or right associativity is not established at the beginning of this document, so it is necessary to clarify which operations happens first.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1111",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.2.2",
    "orig_text": "3.  Noone wants the packet on the RP tree.",
    "correct_text": "3.  No one wants the packet on the RP tree.",
    "notes": "Misspelling",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1112",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.3.1",
    "orig_text": "     We note that some implementations do not send Hello messages on\r\n     point-to-point interfaces.  This is non-compliant behavior.  A\r\n     compliant PIM router MUST send Hello messages, even on point-to-\r\n     point interfaces.\r\n",
    "correct_text": "   We note that some implementations do not send Hello messages on\r\n   point-to-point interfaces.  This is non-compliant behavior.  A\r\n   compliant PIM router MUST send Hello messages, even on point-to-\r\n   point interfaces.\r\n",
    "notes": "It is not clear why this text is indented.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1113",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.3.1/6.1.1",
    "orig_text": "   The Generation_Identifier (GenID) Option SHOULD be included in all\r\n   Hello messages.  The GenID option contains a randomly generated\r\n   32-bit value that is regenerated each time PIM forwarding is started\r\n   or restarted on the interface, including when the router itself\r\n   restarts.  When a Hello message with a new GenID is received from a\r\n   neighbor, any old Hello information about that neighbor SHOULD be\r\n   discarded and superseded by the information from the new Hello\r\n   message.  This may cause a new DR to be chosen on that interface.\r\n",
    "correct_text": "",
    "notes": "Section 6.1.1, item 2 only considers the possibility of falsified Designated Router election results, it does not consider state thrash due to falsified Hello messages with new Generation_Identifier Options.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1114",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "   Before an interface goes down or changes primary IP address, a Hello\r\n   message with a zero HoldTime should be sent immediately (with the old\r\n   IP address if the IP address changed).  This will cause PIM neighbors\r\n   to remove this neighbor (or its old IP address) immediately.  After\r\n   an interface has changed its IP address, it MUST send a Hello message\r\n   with its new IP address.  If an interface changes one of its\r\n   secondary IP addresses, a Hello message with an updated Address_List\r\n   option and a non-zero HoldTime should be sent immediately.  This will\r\n   cause PIM neighbors to update this neighbor's list of secondary\r\n   addresses immediately.\r\n",
    "correct_text": "",
    "notes": "Section 6.1.1, item 2 only considers the possibility of falsified Designated Router election results, it does not consider forged Hello messages with zero HoldTime or with altered Address_List options.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1115",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.3.2",
    "orig_text": "     We note that some PIM implementations do not send Hello messages on\r\n     point-to-point interfaces and thus cannot perform DR election on\r\n     such interfaces.  This is non-compliant behavior.  DR election MUST\r\n     be performed on ALL active PIM-SM interfaces.\r\n",
    "correct_text": "See notes.",
    "notes": "Are the different references to PIM and PIM-SM intentional?  Does PIM-DM enter into this?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1116",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.3.3",
    "orig_text": "In addition to the information recorded for the DR Election, the\r\n   following per neighbor information is obtained from the LAN Prune\r\n   Delay Hello option:\r\n",
    "correct_text": "In addition to the information recorded for the DR Election, the\r\n   following per-neighbor information is obtained from the LAN Prune\r\n   Delay Hello option:\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1117",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.3.3",
    "orig_text": "   When all routers on a link are in a position to negotiate a\r\n   Propagation Delay different from the default, the largest value from\r\n   those advertised by each neighbor is chosen.  The function for\r\n   computing the Effective_Propagation_Delay of interface I is:\r\n\r\n…\r\n\r\n   When all routers on a link are in a position to negotiate an Override\r\n   Interval different from the default, the largest value from those\r\n   advertised by each neighbor is chosen.  The function for computing\r\n   the Effective Override Interval of interface I is:\r\n",
    "correct_text": "   When all routers on a link are in a position to negotiate a\r\n   Propagation Delay different from the default, the largest value from\r\n   those advertised by each neighbor is chosen.  The function for\r\n   computing the Effective Propagation Delay of interface I is:\r\n\r\n…\r\n\r\n   When all routers on a link are in a position to negotiate an Override\r\n   Interval different from the default, the largest value from those\r\n   advertised by each neighbor is chosen.  The function for computing\r\n   the Effective Override Interval of interface I is:\r\n",
    "notes": "Inconsistency.  Either “Effective_Override_Interval” should be used or “Effective Override Interval” should be used.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1118",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.1",
    "orig_text": "+------------++-------------+-------------+--------------+-------------+\r\n|            ||-> J state   | -> PP state | -            | -> NI state |\r\n|Join (J)    ||restart      | start Prune-|              |             |\r\n|            ||Expiry Timer | Pending     |              |             |\r\n|            ||             | Timer       |              |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|Prune-      ||-> J state   | -> PP state | -> NI state  | -> NI state |\r\n|Pending (PP)||restart      |             | Send Prune-  |             |\r\n|            ||Expiry Timer |             | Echo(*,*,RP) |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n",
    "correct_text": "",
    "notes": "In state Join, when event “Receive Prune (*,*,RP)” occurs and also in state Prune Pending, when event “Expiry Timer Expires” occurs, a situation occurs where an interface will be pruned possibly more rapidly than expected as in J state, when prune is received, PP state is entered and Prune-pending timer is started, but Expiry timer is not reset/halted/etc and this does have an effect in PP state.  This issue is not handled in the detailed description on page 48.  Is this intentional?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1119",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.1",
    "orig_text": "          The action \"Send PruneEcho(*,*,RP)\" is triggered when the\r\n          router stops forwarding on an interface as a result of a\r\n          prune.  A PruneEcho(*,*,RP) is simply a Prune(*,*,RP) message\r\n          sent by the upstream router on a LAN with its own address in\r\n          the Upstream Neighbor Address field.  Its purpose is to add\r\n          additional reliability so that if a Prune that should have\r\n          been overridden by another router is lost locally on the LAN,\r\n          then the PruneEcho may be received and cause the override to\r\n          happen.  A PruneEcho(*,*,RP) need not be sent on an interface\r\n          that contains only a single PIM neighbor during the time this\r\n          state machine was in Prune-Pending state.\r\n",
    "correct_text": "",
    "notes": "Forged PruneEcho messages could operate as a form of Denial-of-Service (effectively the same as a Prune(*,*,RP) in this context).  The issue is resolved by using AH, but it is not listed as one of the forged message types in section 6.1.1.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1120",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.5.2",
    "orig_text": "+------------++--------------------------------------------------------+\r\n|            ||                         Event                          |\r\n|            ++-------------+--------------+-------------+-------------+\r\n|Prev State  ||Receive      | Receive      | Prune-      | Expiry Timer|\r\n|            ||Join(*,G)    | Prune(*,G)   | Pending     | Expires     |\r\n|            ||             |              | Timer       |             |\r\n|            ||             |              | Expires     |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -> NI state  | -           | -           |\r\n|NoInfo (NI) ||start Expiry |              |             |             |\r\n|            ||Timer        |              |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -> PP state  | -           | -> NI state |\r\n|Join (J)    ||restart      | start Prune- |             |             |\r\n|            ||Expiry Timer | Pending      |             |             |\r\n|            ||             | Timer        |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|Prune-      ||-> J state   | -> PP state  | -> NI state | -> NI state |\r\n|Pending (PP)||restart      |              | Send Prune- |             |\r\n|            ||Expiry Timer |              | Echo(*,G)   |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n",
    "correct_text": "+------------++--------------------------------------------------------+\r\n|            ||                         Event                          |\r\n|            ++-------------+--------------+-------------+-------------+\r\n|Prev State  ||Receive      | Receive      | Prune-      | Expiry Timer|\r\n|            ||Join(*,G)    | Prune(*,G)   | Pending     | Expires     |\r\n|            ||             |              | Timer       |             |\r\n|            ||             |              | Expires     |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -            | -           | -           |\r\n|NoInfo (NI) ||start Expiry |              |             |             |\r\n|            ||Timer        |              |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -> PP state  | -           | -> NI state |\r\n|Join (J)    ||restart      | start Prune- |             |             |\r\n|            ||Expiry Timer | Pending      |             |             |\r\n|            ||             | Timer        |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|Prune-      ||-> J state   |              | -> NI state | -> NI state |\r\n|Pending (PP)||restart      |              | Send Prune- |             |\r\n|            ||Expiry Timer |              | Echo(*,G)   |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n",
    "notes": "In NoInfo state and in the Prune Pending state, upon receipt of the “Receive Prune(*,G)” event, there is an explicit state transition back to its own state.  These seem redundant.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1121",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.4",
    "orig_text": "     Prune-Pending (PP)\r\n          The router has received a Prune(S,G,rpt) on this interface\r\n          from a downstream neighbor and is waiting to see whether the\r\n          prune will be overridden by another downstream router.  For\r\n          forwarding purposes, the Prune-Pending state functions exactly\r\n          like the NoInfo state.\r\n",
    "correct_text": "",
    "notes": "If a single Prune(S,G,rpt) stops forwarding, then traffic can be interrupted even when it is still needed.  There is a random delay between 0 and Effective_Override_Interval(I) (0 – 2.5 seconds by specification defaults) in which traffic stops until it is overridden and traffic starts flowing again.  This appears to be an optimization for efficiency vs. reliability.  I believe that this should be noted and made into an optional optimization.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1122",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.4",
    "orig_text": "   On unnumbered interfaces on point-to-point links, the router's\r\n   address should be the same as the source address it chose for the\r\n   Hello message it sent over that interface.  However, on point-to-\r\n   point links we also recommend that PIM Join/Prune messages with an\r\n   upstream neighbor address field of all zeros are also accepted.\r\n",
    "correct_text": "   On unnumbered interfaces on point-to-point links, the router's\r\n   address SHOULD be the same as the source address it chose for the\r\n   Hello message it sent over that interface.  However, on point-to-\r\n   point links we also RECOMMEND that PIM Join/Prune messages with an\r\n   upstream neighbor address field of all zeros are also accepted.\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1123",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.4",
    "orig_text": "   these state transitions in this state machine must not occur,\r\n   although seeing such a packet may cause state transitions in other\r\n   state machines.\r\n",
    "correct_text": "   these state transitions in this state machine MUST NOT occur,\r\n   although seeing such a packet may cause state transitions in other\r\n   state machines.\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1124",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.4",
    "orig_text": "          The compound Join/Prune message contains a Prune(S,G,rpt).\r\n\r\n          The (S,G,rpt) downstream state machine on interface I\r\n          transitions back to the Prune state.  The Expiry Timer (ET) is\r\n          restarted, set to maximum of its current value and the\r\n          HoldTime from the triggering Join/Prune message.\r\n",
    "correct_text": "          A compound Join/Prune message containing a Prune(S,G<rpt) is \r\n          received on interface I with its Upstream Neighbor Address \r\n          set to the router’s primary IP address on I.\r\n\r\n          The (S,G,rpt) downstream state machine on interface I\r\n          transitions back to the Prune state.  The Expiry Timer (ET) is\r\n          restarted, set to maximum of its current value and the\r\n          HoldTime from the triggering Join/Prune message.\r\n",
    "notes": "This section does not consider “Upstream Neighbor Address” as does “Receive Prune(S,G,rpt)” in “Transitions from Prune State” on page 60 or “Receive Prune(S,G,rpt)” in “Transitions from Prune-Pending State” on page 59.  Is that information not important in this state transition?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1125",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.5.7",
    "orig_text": "+----------------------------------------------------------------------+\r\n|                         In Joined (J) State                          |\r\n+-----------------+-----------------+-----------------+----------------+\r\n| Timer Expires   | See Join(S,G)   | See Prune(S,G)  | See Prune      |\r\n|                 | to RPF'(S,G)    | to RPF'(S,G)    | (S,G,rpt) to   |\r\n|                 |                 |                 | RPF'(S,G)      |\r\n+-----------------+-----------------+-----------------+----------------+\r\n| Send            | Increase Join   | Decrease Join   | Decrease Join  |\r\n| Join(S,G); Set  | Timer to        | Timer to        | Timer to       |\r\n| Join Timer to   | t_joinsuppress  | t_override      | t_override     |\r\n| t_periodic      |                 |                 |                |\r\n+-----------------+-----------------+-----------------+----------------+\r\n",
    "correct_text": "+----------------------------------------------------------------------+\r\n|                         In Joined (J) State                          |\r\n+-----------------+-----------------+-----------------+----------------+\r\n|  Event          | Timer Expires   | See Join(S,G)   | See Prune(S,G)  |\r\n|                 |                 | to RPF'(S,G)    | to RPF'(S,G)    |\r\n|                 |                 |                 |\r\n+-----------------+-----------------+-----------------+----------------+\r\n|  Action         | Send            | Increase Join   | Decrease Join   |\r\n|                 | Join(S,G); Set  | Timer to        | Timer to        |\r\n|                 | Join Timer to   | t_joinsuppress  | t_override      |\r\n|                 | t_periodic      |                 |                 |\r\n+-----------------+-----------------+-----------------+----------------+\r\n",
    "notes": "The remaining portions would be inserted into the left portion of the remaining table on Page 73 and the two overflowing items in that table would go into a continuation beneath the table on Page 73.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1126",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.7",
    "orig_text": "See pages 72-76",
    "correct_text": "See notes",
    "notes": "The figure given on pages 72-73 lists additional state changes, the last three of which are “RPF’(S,G) changes not due to an Assert”, “RPF’(S,G) GenID changes”, “RPF’(S,G) changes due to an Assert”, but the order given in the descriptions after the diagram on pages 74-76 lists the last three as: “RPF’(S,G) changes due to an Assert”, “RPF’(S,G) changes not due to an Assert”, and “RPF’(S,G) GenID changes.”",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1127",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.9",
    "orig_text": "See pages 78-80",
    "correct_text": "See notes",
    "notes": "The figure given on page 78 lists additional state changes.  The order given does not match the order given in the detailed descriptions that follow on pages 79-80.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1128",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.6.1",
    "orig_text": "CouldAssert(S,G,I) =\r\n     SPTbit(S,G)==TRUE\r\n     AND (RPF_interface(S) != I)\r\n     AND (I in ( ( joins(*,*,RP(G)) (+) joins(*,G) (-) prunes(S,G,rpt) )\r\n                 (+) ( pim_include(*,G) (-) pim_exclude(S,G) )\r\n                 (-) lost_assert(*,G)\r\n                 (+) joins(S,G) (+) pim_include(S,G) ) )\r\n",
    "correct_text": "Too many possibilities to list.",
    "notes": "Left or right associativity is not established at the beginning of this document, so it is necessary to clarify which operation happens first: (+) or (-).",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1129",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "     An (S,G) data packet arrives on interface I, AND\r\n          CouldAssert(S,G,I)==TRUE\r\n          An (S,G) data packet arrived on an downstream interface that\r\n          is in our (S,G) outgoing interface list.  We optimistically\r\n          assume that we will be the assert winner for this (S,G), and\r\n          so we transition to the \"I am Assert Winner\" state and perform\r\n          Actions A1 (below), which will initiate the assert negotiation\r\n          for (S,G).\r\n",
    "correct_text": "     An (S,G) data packet arrives on interface I, AND\r\n          CouldAssert(S,G,I)==TRUE\r\n          An (S,G) data packet arrived on a downstream interface that\r\n          is in our (S,G) outgoing interface list.  We optimistically\r\n          assume that we will be the assert winner for this (S,G), and\r\n          so we transition to the \"I am Assert Winner\" state and perform\r\n          Actions A1 (below), which will initiate the assert negotiation\r\n          for (S,G).\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1130",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "     A4:  Send AssertCancel(S,G).\r\n          Delete assert info (AssertWinner(S,G,I) and\r\n          AssertWinnerMetric(S,G,I) will then return their default\r\n          values).\r\n\r\n     A5:  Delete assert info (AssertWinner(S,G,I) and\r\n          AssertWinnerMetric(S,G,I) will then return their default\r\n          values).\r\n",
    "correct_text": "     A4:  Send AssertCancel(S,G).\r\n          Delete assert info (AssertWinner(S,G,I) and\r\n          AssertWinnerMetric(S,G,I) will then return to their default\r\n          values).\r\n\r\n     A5:  Delete assert info (AssertWinner(S,G,I) and\r\n          AssertWinnerMetric(S,G,I) will then return to their default\r\n          values).\r\n",
    "notes": "Missing words.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1131",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.7.2",
    "orig_text": "   The protocol requires that all routers hash to the same RP within a\r\n   domain (except for transients).  The following hash function must be\r\n   used in each router:\r\n",
    "correct_text": "See notes.",
    "notes": "The term “transients” is not defined in section 2.1.  Does this refer to the same “transients” as in RFC 1112, section2, paragraph 3?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1132",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.9",
    "orig_text": "   All PIM control messages have IP protocol number 103.",
    "correct_text": "   All PIM control messages have IP protocol number 103, per RFC 1700.",
    "notes": "The IP protocol assignment information is given without a reference to RFC 1700/STD 2.\n --VERIFIER NOTES-- \nPer RFC 3232, RFC 1700 is replaced by an online database. A reference is no longer appropriate.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1133",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.2",
    "orig_text": "     Holdtime is the amount of time a receiver must keep the neighbor\r\n     reachable, in seconds.  If the Holdtime is set to '0xffff', the\r\n     receiver of this message never times out the neighbor.  This may be\r\n     used with dial-on-demand links, to avoid keeping the link up with\r\n     periodic Hello messages.\r\n",
    "correct_text": "",
    "notes": "Holdtime is tunable by the sender and is required to be kept by the receiver.  This coupled with the “infinity” metric 0xffff produces the conditions necessary for a Denial of Service to be possible.  This is not addressed in section 6.1.1 (Forged Link-Local Messages) or 6.4 (Denial-of-Service Attacks).  Additionally, utilizing AH will not solve this issue as Hello messages instantiate state upon receipt and this state constitutes the “service” that is abused in this form of attack.  A tunable option to accept a maximum Holdtime for security purposes would resolve this condition.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1134",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9.2",
    "orig_text": "The T bit specifies the ability of the\r\n     sending router to disable joins suppression.  \r\n",
    "correct_text": "The T bit specifies the ability of the\r\n     sending router to disable join suppression.  \r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1135",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "Sections 6.4 and A.2",
    "orig_text": "   The rationale for this is that there is no way in PIM-SM to prune\r\n   traffic off the (*,*,RP) tree, except by Joining the (*,G) tree and\r\n   then pruning each source individually.\r\n",
    "correct_text": "",
    "notes": "The paragraph beginning “The rationale for this…” describes a condition where a small cause can have a great effect – a (*,*,RP) join could cause state that, if it is not needed, requires a (*,G) join and many prunes for each source.  This is mentioned as the last point in section 6.4, but section 6.4 fails to mention that “undoing” this state requires a join followed by multiple prunes.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1136",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Index",
    "orig_text": "Not reproduced here.",
    "correct_text": "Due to the number of change recommendations to the index, I am not reproducing the index entries here.  The list of definitions that I was able to determine are given below.  Some definitions are not given and these are marked below.\r\n\r\nAddress_List\t31*\r\nAssert(*,G)\t128*\r\nAssert(S,G)\t128*\r\nAssertCancel(*,G)\t99*\r\nAssertCancel(S,G) \t99*\r\nAssertTimer(*,G,I) \tnot listed X\r\nAssertTimer(S,G,I) \tnot listed X\r\nAssertTrackingDesired(*,G,I)\t93*\r\nAssertTrackingDesired(S,G,I) \t86*\r\nAssertWinner(*,G,I)\t100*\r\nAssertWinner(S,G,I)\t100*\r\nAssertWinnerMetric(*,G,I)\t101*\r\nAssertWinnerMetric(S,G,I)\t101*\r\nassert_metric\t98*\r\nAssert_Override_Interval\t132*\r\nAssert_Time\t132*\r\nAT(*,G,I)\t129*\r\nAT(S,G,I)\t129*\r\nCheckSwitchToSpt(S,G) \t28*\r\nCouldAssert(*,G,I)\t93*\r\nCouldAssert(S,G,I)\t86*\r\nCouldRegister(S,G)\t41*\r\nDefault_Hello_Holdtime\tnot listed X\r\nDirectlyConnected(S) \t27*\r\nDownstreamJPState(*,*,RP,I) \t45* (state of FSM in section 4.5.1)\r\nDownstreamJPState(*,G,I) \t49* (state of FSM in section 4.5.2)\r\nDownstreamJPState(S,G,I) \t53* (state of FSM in section 4.5.3)\r\nDownstreamJPState(S,G,rpt,I)\t56* (state of FSM in section 4.5.4)\r\nDR(I)\t33*\r\ndr_is_better(a,b,I)\t33*\r\nDR_Priority\t31*\r\nEffective_Override_Interval(I)\t36*\r\nEffective_Propagation_Delay(I)\t\t35*\r\nET(*,*,RP,I)\t128*\r\nET(*,G,I)\t128*\r\nET(S,G,I)\t129*\r\nET(S,G,rpt,I)\t129*\r\nGenID\t31*\r\nHash_Function\tnot listed X\r\nHello_Holdtime\t\t131*\r\nHello_Period\t130*\r\nHT(I)\t31*\r\nIGMP\t6*\r\nimmediate_olist(*,*,RP)\t22*\r\nimmediate_olist(*,G)\t22*\r\nimmediate_olist(S,G)\t22*\r\ninfinite_assert_metric()\t99*\r\ninherited_olist(S,G)\t22*\r\ninherited_olist(S,G,rpt)\t22*\r\nI_Am_Assert_Loser(*,G,I)\tnot listed X\r\nI_Am_Assert_Loser(S,G,I)\tnot listed X\r\nI_am_DR(I)\t33*\r\nI_am_RP(G)\t44*\r\nJ/P_Holdtime\t131*\r\nJ/P_Override_Interval(I)\t132*\r\nJoinDesired(*,*,RP)\t64*\r\nJoinDesired(*,G)\t68*\r\nJoinDesired(S,G)\t73*\r\njoins(*,*,RP(G))\tnot listed X\r\njoins(*,*,RP)\t23*\r\njoins(*,G)\t23*\r\njoins(S,G)\t23*\r\nJT(*,*,RP)\t129*\r\nJT(*,G)\t\t129*\r\nJT(S,G)\t\t129*\r\nKAT(S,G)\t129*\r\nKeepaliveTimer(S,G)\tnot listed X\r\nKeepalive_Period\t134*\r\nlan_delay_enabled(I)\t35*\r\nLAN_Prune_Delay\tnot listed X\r\nlocal_receiver_exclude(S,G,I)\t23*\r\nlocal_receiver_include(*,G,I)\tnot listed X\r\nlocal_receiver_include(S,G,I)\tnot listed X\r\nlost_assert(*,G)\t\t24*\r\nlost_assert(*,G,I)\t100*\r\nlost_assert(S,G)\t\t24*\r\nlost_assert(S,G,I)\t100*\r\nlost_assert(S,G,rpt)\t24*\r\nlost_assert(S,G,rpt,I)\t100*\r\nMBGP\t6*\r\nMFIB\t6*\r\nMLD\t6*\r\nMRIB\t6*\r\nMRIB.next_hop(host)\t25*\r\nmy_assert_metric(*,G,I)\tnot listed X\r\nmy_assert_metric(S,G,I)\t98*\r\nNBR(Interface,IP_address)\tnot listed X\r\nNLT(N,I)\tnot listed X\r\nOT(S,G,rpt)\t77*\r\nOverride_Interval(I)\t130? (Why is it termed a “variable”?)\r\npacket_arrives_on_rp_tunnel(pkt)\t43*\r\npim_exclude(S,G)\t22*\r\npim_include(*,G)\t22*\r\npim_include(S,G)\t22*\r\nPPT(*,*,RP,I)\tnot listed X\r\nPPT(*,G,I)\tnot listed X\r\nPPT(S,G,I)\tnot listed X\r\nPPT(S,G,rpt,I)\tnot listed X\r\nPropagation_Delay(I)\t130? (Why is it termed a “variable”?)\r\nPropagation_delay_default\t130*\r\nPruneDesired(S,G,rpt)\t79*\r\nprunes(S,G,rpt)\t\t23*\r\nRegister-Stop(*,G)\tnot listed X\r\nRegister-Stop(S,G)\tnot listed X\r\nRegister-StopTimer(S,G)\tnot listed X\r\nRegister_Probe_Time\t135*\r\nRegister_Suppression_Time\t135*\r\nRP(G)\tnot listed X\r\nRPF\t6*\r\nRPF’(*,G)\t24*\r\nRPF’(S,G)\t25*\r\nRPF’(S,G,rpt)\t24*\r\nRPF_interface\tnot listed X\r\nRPF_interface(host)\tnot listed X\r\nRPFJoinDesired(G)\t79*\r\nrpt_assert_metric(G,I)\tnot listed X\r\nRST(S,G)\t135?\r\nSPTbit(S,G)\tnot listed X\r\nspt_assert_metric(S,I)\t98*\r\nSSM\t106*\r\nSuppression_Enabled(I)\t\t36*\r\nSwitchToSptDesired(S,G)\t28*\r\nTIB\t6*\r\nTriggered_Hello_Delay\t\t130*\r\nt_joinsuppress\tnot listed X\r\nt_override\t133*\r\nt_override_default\t130*\r\nt_periodic\t133*\r\nt_suppressed\t133*\r\nUpdate_SPTbit(S,G,iif)\t\t29*\r\nUpstreamJPState(S,G)\t\tnot listed X\r\n",
    "notes": "The locations of the definitions of functions are not given.  Given that there are so many functions, it would be useful to have a notation that indicates this.  I propose adding a “*” next to the page reference that contains the definition of that function as well as adding an explanatory note to the index, such as:\r\n\r\nFor function definitions, see the pages marked with an asterisk (*).",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1137",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Index",
    "orig_text": "Index not reproduced here.",
    "correct_text": "Due to the number of change recommendations to the index, I am not reproducing the index entries here.\r\n\r\nAssertTimer(*,G,I) page 16 (no explicit function reference is found, but it is referred to on the page)\r\nAssertTimer(*,G,I) page 24 (missing on the page referred)\r\nAssertTimer(*,G,I) page 132 (missing on the page referred)\r\n\r\nAssertTimer(S,G,I) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nAssertTimer(S,G,I) page 24 (missing on the page referred)\r\nAssertTimer(S,G,I) page 132 (missing on the page referred)\r\n\r\nAssertWinner(*,G,I) page 16 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nAssertWinner(S,G,I) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nAssertWinner(S,G,I) page 100 (duplicate reference)\r\n\r\nAssertWinnerMetric(*,G,I) page 16 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nAssertWinnerMetric(S,G,I) page 18 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nAT(*,G,I) page 16 (no explicit function reference is found, but it is referred to on the page)\r\nAT(*,G,I) page 24 (missing on the page referred)\r\nAT(*,G,I) page 91 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nAT(S,G,I) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nAT(S,G,I) page 24 (missing on the page referred)\r\nAT(S,G,I) page 84 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nCouldRegister(S,G) page 39 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nDirectlyConnected(S) page 27 (duplicate reference)\r\n\r\ndr_is_better(a,b,I) page 33 (duplicate reference)\r\n\r\nET(*,*,RP,I) page 15 (no explicit function reference is found, but it is referred to on the page)\r\nET(*,*,RP,I) page 46 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nET(*,G,I) page 16 (no explicit function reference is found, but it is referred to on the page)\r\nET(*,G,I) page 50 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nET(S,G,I) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nET(S,G,I) page 53 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nET(S,G,rpt,I) page 20 (no explicit function reference is found, but it is referred to on the page)\r\nET(S,G,rpt,I) page 57 (no explicit function reference is found, but it is referred to on the page)\r\nET(S,G,rpt,I) page 59 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nHash_Function page 12 (no explicit function reference is found, but it is referred to on the page)\r\nHash_Function page 105 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nIGMP page 17 (missing on the page referred)\r\nIGMP page 23 (missing on the page referred)\r\nIGMP page 105 (missing on the page referred)\r\n\r\nJ/P_Holdtime page 47 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 51 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 55 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 59 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 65 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 69 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 74 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 121 (no explicit function reference is found, but it is referred to on the page)\r\nJ/P_Holdtime page 133 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nJoinDesired(*,G) page 17 (missing on the page referred)\r\n\r\njoins(*,*,RP) page 86 (missing on the page referred)\r\njoins(*,*,RP) page 93 (missing on the page referred)\r\n\r\nJT(*,*,RP) page 15 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nJT(*,G) page 16 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nJT(S,G) page 18 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nKAT(S,G) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nKAT(S,G) page 26 (missing on the page referred)\r\nKAT(S,G) page 27 (missing on the page referred)\r\nKAT(S,G) page 28 (missing on the page referred)\r\nKAT(S,G) page 41 (missing on the page referred)\r\nKAT(S,G) page 43 (missing on the page referred)\r\nKAT(S,G) page 73 (missing on the page referred)\r\nKAT(S,G) page 108 (missing on the page referred)\r\n\r\nKeepaliveTimer(S,G) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nKeepaliveTimer(S,G) page 26 (missing on the page referred)\r\nKeepaliveTimer(S,G) page 27 (duplicate reference)\r\nKeepaliveTimer(S,G) page 108 (missing on the page referred)\r\nKeepaliveTimer(S,G) page 129 (missing on the page referred)\r\nKeepaliveTimer(S,G) page 134 (missing on the page referred)\r\n\r\nLAN_Prune_Delay page 31 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nlocal_receiver_include(S,G,I) page 23 (missing on the page referred)\r\n\r\nNext line duplicates the previous line (reference on page 144 is correct)\r\n\r\nMFIB page 13 (missing on the page referred)\r\n\r\nMLD page 17 (missing on the page referred)\r\nMLD page 23 (missing on the page referred)\r\nMLD page 105 (missing on the page referred)\r\n\r\nMRIB page 66 (duplicate reference)\r\nMRIB page 75 (missing on the page referred)\r\n\r\nNBR(Interface,IP address) page 37 (missing on the page referred)\r\n\r\nOT(S,G,rpt) page 20 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nOverride_Interval(I) page 14 (missing on the page referred)\r\nOverride_Interval(I) page 34 (missing on the page referred)\r\nOverride_Interval(I) page 132 (missing on the page referred)\r\n\r\npim_exclude(S,G) page 22 (duplicate reference)\r\n\r\npim_include(*,G) page 22 (duplicate reference)\r\n\r\npim_include(S,G) page 22 (duplicate reference)\r\n\r\nPPT(*,*,RP,I) page 15 (no explicit function reference is found, but it is referred to on the page)\r\nPPT(*,*,RP,I) page 46 (missing on the page referred)\r\n\r\nPPT(*,G,I) page 16 (no explicit function reference is found, but it is referred to on the page)\r\nPPT(*,G,I) page 50 (missing on the page referred)\r\n\r\nPPT(S,G,I) page 18 (no explicit function reference is found, but it is referred to on the page)\r\nPPT(S,G,I) page 53 (missing on the page referred)\r\n\r\nPPT(S,G,rpt,I) page 20 (no explicit function reference is found, but it is referred to on the page)\r\nPPT(S,G,rpt,I) page 57 (missing on the page referred)\r\nPPT(S,G,rpt,I) page 59 (missing on the page referred)\r\n\r\nPropagation_Delay(I) page 31 (missing on the page referred)\r\nPropagation_Delay(I) page 132 (missing on the page referred)\r\n\r\nRegister-StopTimer(S,G) page 38 (missing on the page referred)\r\nRegister-StopTimer(S,G) page 39 (missing on the page referred)\r\nRegister-StopTimer(S,G) page 129 (missing on the page referred)\r\nRegister-StopTimer(S,G) page 135 (no explicit function reference is found, but it is referred to on the page)\r\n\r\nRP(G)  page 5 (missing on the page referred)\r\nRP(G) page 99 (missing on the page referred)\r\n\r\nRPF’(*,G) page 101 (missing on the page referred)\r\n\r\nRPF’(S,G) page 101 (missing on the page referred)\r\n\r\nrpt_assert_metric(G,I) page 99 (missing on the page referred)\r\n\r\nRST(S,G) page 38 (missing on the page referred)\r\nRST(S,G) page 39 (missing on the page referred)\r\n\r\nSPTbit(S,G) page 19 (no explicit function reference is found, but it is referred to on the page)\r\nSPTbit(S,G) page 53 (no explicit function reference is found, but it is referred to on the page)\r\nSPTbit(S,G) page 86 (duplication reference)\r\nSPTbit(S,G) page 108 (missing on the page referred)\r\n\r\nSSM page 10 (missing on the page referred)\r\n\r\nSwitchToSptDesired(S,G) page 28 (duplicate reference)\r\n\r\nt_joinsuppress page 64 (missing on the page referred)\r\nt_joinsuppress page 68 (missing on the page referred)\r\n\r\nt_suppressed page 73 (missing on the page referred)\r\n",
    "notes": "The items above are referred to in the Index, but were not found at the locations specified in the Index.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1138",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Index",
    "orig_text": "Not reproduced here.",
    "correct_text": "Due to the number of change recommendations to the index, I am not reproducing the index entries here.\r\n\r\nGenID page 14\r\n\r\nRPF page 15 \r\n\r\nIGMP page 16\r\nMLD page 16\r\n\r\nJoinDesired(*,G) page 17\r\nMRIB page 17\r\n\r\nIGMP page 19\r\n\r\npim_exclude(S,G) page 21\r\nimmediate_olist(S,G) page 21\r\ninherited_olist(S,G) page 21\r\ninherited_olist(S,G,rpt) page 21\r\nimmediate_olist(*,*,RP) page 21\r\nimmediate_olist(*,G) page 21\r\n\r\nlost_assert(S,G,rpt) page 22\r\ninherited_olist(S,G,rpt) page 22\r\nlocal_receiver_include(*,G,I) page 22\r\nlocal_receiver_include(S,G,I) page 22\r\nIGMP page 22\r\nMLD page 22\r\n\r\nNBR(Interface,IP_address) page 24\r\n\r\nI_Am_Assert_Loser(S,G,I) page 25\r\nAssertWinner(S,G,I) page 25\r\nRPF_interface(Interface,IP_address) page 25\r\nRPF’(*,G) page 25\r\nRPF’(S,G,rpt) page 25\r\nRPF’(*,G) page 25\r\nAssert(S,G) page 25\r\nRPF_interface(host) page 25\r\nRP(G) page 25\r\nI_Am_Assert_Loser(*,G,I) page 25\r\n\r\nRPF_interface(host) page 26\r\nMRIB page 26\r\n\r\nRP(G) page 27\r\n\r\ninherited_olist(S,G) page 28\r\ninherited_olist(S,G,rpt) page 28\r\nUpdate_SPTbit(S,G,iif) page 28\r\nUpstreamJPState(S,G) page 28\r\nKeepalive_Period page 28\r\n\r\nRP(G) page 29\r\nI_Am_Assert_Loser(S,G,I) page 29\r\nAssert(S,G) page 29\r\n\r\nRPF’(S,G) page 30\r\nRPF’(*,G) page 30\r\nAssert(S,G) page 30\r\nJoinDesired(S,G) page 30\r\n\r\nGenID page 32\r\n\r\nMRIB page 37\r\n\r\nRegister_Probe_Time page 40\r\nRegister_Suppression_Time page 40\r\n\r\nRegister-Stop(S,G) page 42\r\n\r\ninherited_olist(S,G,rpt) page 43\r\n\r\nKeepaliveTimer(S,G) page 44\r\ninherited_olist(S,G) page 44\r\n\r\nRPF_interface(host) page 62\r\n\r\nJoinDesired(*,*,RP) page 63\r\nt_periodic page 63\r\nMRIB page 63\r\nt_joinsuppress page 63\r\nt_override page 63\r\n\r\nRPF_interface(host) page 64\r\n\r\nJoinDesired(*,*,RP) page 65\r\nimmediate_olist(*,*,RP) page 65\r\nNBR(Interface,IP_address) page 65\r\nRPF_interface(host) page 65\r\nMRIB page 65\r\nt_periodic page 65\r\nt_override page 65\r\n\r\nRPF_interface(host) page 66\r\nt_periodic page 66\r\nt_override page 66\r\n\r\nJoinDesired(*,G) page 67\r\nt_periodic page 67\r\nt_joinsuppress page 67\r\nt_override page 67\r\n\r\nJoinDesired(*,*,RP) page 68\r\nAssertWinner(*,G,I) page 68\r\n\r\nJoinDesired(*,G) page 69\r\nimmediate_olist(*,G) page 69 \r\nRPF’(*,G) page 69\r\nt_periodic page 69\r\nRP(G) page 69\r\n\r\nt_override page 70\r\nRPF_interface(host) page 70\r\nRP(G) page 70\r\nt_periodic page 70\r\n\r\nMRIB page 71\r\n\r\nJoinDesired(S,G) page 72\r\nt_periodic page 72\r\nSPTbit(S,G) page 72\r\nRPF’(S,G) page 72 \r\nt_joinsuppress page 72\r\nt_override page 72\r\n\r\nRPF’(S,G) page 73\r\n\r\nJoinDesired(S,G) page 74\r\ninherited_olist(S,G) page 74\r\nRPF’(S,G) page 74\r\n\r\nt_override page 75\r\nRPF’(S,G) page 75\r\nRPF_interface(host) page 75\r\n\r\nt_periodic page 76\r\nt_override page 76\r\n\r\nPruneDesired(S,R,rpt) page 78\r\nRPTJoinDesired(G) page 78\r\ninherited_olist(S,G,rpt) page 78\r\nRPF’(S,G,rpt) page 78 \r\nRPF’(*,G) page 78\r\n\r\nRP(G) page 79\r\n\r\nt_override page 80\r\nRPF’(S,G,rpt) page 80\r\nRPF’(*,G) page 80\r\n\r\nRPF’(S,G,rpt) page 81 \r\nPruneDesired(S,G,rpt) page 81\r\n\r\nAssert(*,G) page 82\r\nRPF’(*,G) page 82\r\nJoinDesired(*,G) page 82\r\nJoinDesired(*,*,RP) page 82\r\n\r\nAssertTrackingDesired(S,G,I) page 84\r\n\r\nRPF_interface(host) page 85\r\n\r\njoins(*,*,RP) page 86\r\nlost_assert(S,G,I) page 86\r\n\r\nGenID page 89\r\n\r\nRPF_interface(host) page 90\r\nAssert(S,G) page 90\r\nUpstreamJPState(S,G) page 90\r\n\r\nAssertTrackingDesired(*,G,I) page 92\r\n\r\njoins(*,*,RP) page 93\r\n\r\nGenID page 96\r\n\r\nRPF_interface(host) page 97\r\nRP(G) page 97\r\nAssert(*,G) page 97\r\n\r\nrpt_assert_metric(G,I) page 98\r\ninfinite_assert_metric() page 98\r\nrpt_assert_metric(G,I) page 98\r\n\r\nMRIB page 99\r\n\r\nRP(G) page 100\r\nAssertWinnerMetric(S,G,I) page 100\r\nAssert(S,G) page 100\r\nAssert(*,G) page 100\r\n\r\nAssert(S,G) page 101\r\nAssert(*,G) page 101\r\nAssertWinner(S,G,I) page 101\r\nMRIB page 101\r\n\r\nRPF’(*,G) page 102\r\n\r\nIGMP page 104\r\nMLD page 104\r\n\r\nSSM page 107\r\n\r\nSSM page 108\r\nAssert(S,G) page 108\r\n\r\nTriggered_Hello_Delay page 131\r\nDefault_Hello_Holdtime page 131\r\nHello_Period page 131\r\nJT(*,G) page 131\r\n\r\nAssertTimer(*,G,I) page 132\r\nAssertTimer(S,G,I) page 132\r\n\r\nEffective_Override_Interval(I) page 133\r\n\r\nRegister_Suppression_Time page 134\r\nRegister_Probe_Time page 134\r\n\r\nSSM page 137\r\n\r\nRPF_interface(host) page 144 \r\n\r\nlocal_receiver_include(S,G,I) page 145\r\nlocal_receiver_include(*,G,I) page 145\r\nDownstreamJPState(*,G,I) page 145\r\nDownstreamJPState(S,G,rpt,I) page 145\r\n",
    "notes": "Functions were found in the document that were mentioned in the Index, but there was no reference given in the Index.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1139",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Index",
    "orig_text": "Not reproduced here",
    "correct_text": "Due to the number of change recommendations to the index, I am not reproducing the index entries here.\r\n\r\nNotJoined(*,*,RP) page 15\r\n\r\nNotJoined(*,G) page 16\r\n\r\nNotJoined(S,G) page 18\r\n\r\nPrune(*,*,RP) page 15\r\n\r\nJoin(*,G) page 17\r\nPrune(*,G) page 17\r\n\r\nJoin(S,G) page 19\r\nPrune(S,G) page 19\r\n\r\nPrune(S,G,rpt) page 21\r\nJoin(*,G) page 21\r\n\r\nPrune(S,G,rpt) page 25\r\nJoin(*,G) page 25\r\n\r\nJoin(S,G) page 29\r\nPrune(S,G,rpt) page 29\r\n\r\nPrune(*,*,RP) page 46\r\nJoin(*,*,RP) page 46\r\n\r\nJoin(*,*,RP) page 47\r\nPrune(*,*,RP) page 47\r\n\r\nPrune(*,*,RP) page 48\r\nJoin(*,*,RP) page 48\r\n\r\nPrune(*,*,RP) page 49\r\nJoin(*,G) page 49\r\nPrune(*,G) page 49\r\n\r\nJoin(*,G) page 50\r\nPrune(*,G) page 50\r\n\r\nJoin(*,G) page 51\r\nPrune(*,G) page 51\r\n\r\nJoin(*,G) page 52\r\n\r\nPrune(*,G) page 52\r\n\r\nJoin(S,G) page 54\r\nPrune(S,G) page 54\r\n\r\nPruneEcho(*,*,RP) page 46\r\n\r\nPruneEcho(*,*,RP) page 48\r\n\r\nPruneEcho(*,*,RP) page 49\r\n\r\nPruneEcho(*,G) page 50\r\n\r\nPruneEcho(*,G) page 52\r\n\r\nPruneEcho(S,G) page 54\r\n\r\nJoin(S,G) page 55\r\nPrune(S,G) page 55\r\n\r\nPruneEcho(S,G) page 56\r\nPrune(S,G) page 56\r\n\r\nPrune(S,G,rpt) page 57\r\n\r\nJoin(*,G) page 58\r\nJoin(S,G,rpt) page 58\r\nPrune(S,G,rpt) page 58\r\n\r\nPrune(S,G,rpt) page 59\r\nJoin(*,G) page 59\r\nJoin(S,G,rpt) page 59\r\n\r\nJoin(*,G) page 60\r\nJoin(S,G,rpt) page 60\r\nPrune(S,G,rpt) page 60\r\n\r\nPrune(S,G,rpt) page 61\r\nPrune(*,G) page 61\r\nJoin(*,*,RP) page 61\r\nJoin(*,G) page 61\r\n\r\nJoin(*,*,RP) page 62\r\nPrune(*,*,RP) page 62\r\n\r\nPrune(*,*,RP) page 63\r\n\r\nJoin(*,*,RP) page 64\r\nPrune(*,*,RP) page 64\r\n\r\nPrune(*,*,RP) page 65\r\n\r\nJoin(*,*,RP) page 65\r\n\r\nJoin(*,*,RP) page 63\r\n\r\nJoin(*,*,RP) page 66\r\nPrune(*,*,RP) page 66\r\n\r\nJoin(*,G) page 66\r\nPrune(*,G) page 66\r\n\r\nJoin(*,G) page 67\r\nPrune(*,G) page 67\r\n\r\nJoin(S,G) page 73\r\nPrune(*,G) page 73\r\n\r\nJoin(*,G) page 68\r\nPrune(*,G) page 68\r\n\r\nPrune(*,G) page 69\r\nJoin(*,G) page 69\r\n\r\nJoin(*,G) page 70\r\nPrune(*,G) page 70\r\n\r\nJoin(S,G) page 71\r\nPrune(S,G) page 71\r\nPrune(S,G,rpt) page 71\r\n\r\nJoin(S,G) page 74\r\nPrune(S,G) page 74\r\n\r\nPrune(*,G) page 75 \r\nPrune(S,G,rpt) page 75\r\n\r\nJoin(S,G) page 76\r\nPrune(S,G) page 76\r\n\r\nPrune(S,G,rpt) page 76\r\nJoin(*,G) page 76\r\nJoin(S,G,rpt) page 76\r\n\r\nJoin(S,G,rpt) page 77\r\n\r\nPrune(S,G,rpt) page 78\r\nJoin(S,G,rpt) page 78\r\nPrune(S,G) page 78\r\n\r\nJoin(S,G,rpt) page 79\r\nPrune(S,G,rpt) page 79\r\n\r\nPrune(S,G) page 80\r\nJoin(S,G,rpt) page 80\r\nPrune(S,G,rpt) page 80\r\n\r\nPrune(S,G,rpt) page 81\r\nJoin(*,G) page 81\r\nJoin(*,*,RP) page 81\r\nJoin(S,G,rpt) page 81\r\n\r\nPrune(S,G,rpt) page 82\r\nJoin(*,G) page 82\r\nPrune(S,G,rpt) page 82\r\nJoin(*,*,RP) page 82\r\nPrune(*,G) page 82\r\nPrune(*,*,RP) page 82\r\n\r\nJoin(*,*,RP) page 83\r\nPrune(S,G,rpt) page 83\r\n\r\nJoin(S,G) page 85\r\n\r\nJoin(S,G) page 90\r\n\r\nJoin(*,G) page 93\r\nJoin(*,*,RP) page 93\r\n\r\nJoin(*,G) page 97\r\nJoin(*,*,RP) page 97\r\n\r\nJoin(*,G) page 101\r\nJoin(S,G) page 101\r\n\r\nJoin(S,G) page 102\r\nJoin(*,*,RP) page 102\r\nJoin(*,G) page 102\r\nPrune(S,G,rpt) page 102\r\nJoin(S,G,rpt) page 102\r\n\r\nJoin(*,G) page 125\r\nPrune(*,G) page 125\r\nJoin(S,G,rpt) page 125\r\nPrune(S,G,rpt) page 125\r\nJoin(S,G) page 125\r\nPrune(S,G) page 125\r\nJoin(*,*,RP) page 125\r\nPrune(*,*,RP) page 125\r\n\r\nJoin(S,G) page 143\r\n\r\nJoin(*,*,RP) page 144\r\n\r\nJoined(*,*,RP) page 15\r\n\r\nJoined(*,G) page 16\r\n\r\nJoined(S,G) page 18 \r\n\r\nJoin(S,G) page 72\r\n\r\nPrune(S,G) page 72\r\nPrune(S,G,rpt) page 72\r\n\r\nJoin(S,G,rpt) page 82\r\n\r\nIGMPv3 page 19\r\n\r\nIGMPv3 page 20\r\n\r\nIGMPv3 page 21\r\n\r\nRPTNotJoined(G) page 20\r\nNotPruned(S,G,rpt) page 20\r\nPruned(S,G,rpt) page 20\r\n\r\nRPTNotJoined(G) page 77\r\n\r\nPruned(S,G,rpt) page 77\r\nNotPruned(S,G,rpt) page 77\r\n\r\nRPTNotJoined(G) page 78\r\nPruned(S,G,rpt) page 78\r\nNotPruned(S,G,rpt) page 78\r\n\r\nRPTNotJoined(host) page 80\r\n\r\nRPTNotJoined(host) page 81\r\nPruned(S,G,rpt) page 81\r\nNotPruned(S,G,rpt) page 81\r\n\r\nimmediate_olist(S,G,rpt) page 21\r\n\r\nPMBR(S,G) page 43\r\n\r\nRP_Keepalive_Period page 43\r\n\r\nnext_hop(host) page 63\r\n\r\nnext_hop(host) page 65\r\n\r\nnext_hop(host) page 66\r\n\r\nAssert(*,*,RP) page 82\r\n\r\npref(S) page 98\r\nmetric(S) page 98\r\n\r\nmy_ip_address(I) page 98\r\n\r\npref(S) page 99\r\nmetric(S) page 99\r\n\r\nmy_ip_address(I) page 99\r\n\r\nValue(G,M,C) page 105\r\nC(i) page 105\r\n\r\npref(S) page 128\r\nmetric(S) page 128\r\n",
    "notes": "Some functions were found in the document that did not have any entry in the Index.  These are itemized above.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1140",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "2.1",
    "orig_text": "   Upstream\r\n         Towards the root of the tree.  The root of tree may be either\r\n         the source or the RP, depending on the context.\r\n",
    "correct_text": "   Upstream\r\n         Towards the root of the tree.  The root of the tree may be either\r\n         the source or the RP, depending on the context.\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1141",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "3.6",
    "orig_text": "  This\r\n   election is performed using PIM Assert messages, which resolve the\r\n   problem in favor of the upstream router that has (S,G) state; or, if\r\n   neither or both router has (S,G) state, then the problem is resolved\r\n   in favor of the router with the best metric to the RP for RP trees,\r\n   or the best metric to the source to source-specific trees.\r\n",
    "correct_text": "  This\r\n   election is performed using PIM Assert messages, which resolve the\r\n   problem in favor of the upstream router that has (S,G) state; or, if\r\n   neither or both router has (S,G) state, then the problem is resolved\r\n   in favor of the router with the best metric to the RP for RP trees,\r\n   or the best metric to the source for source-specific trees.\r\n",
    "notes": "Word choice.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1142",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.3",
    "orig_text": "  We recommend storing this information if",
    "correct_text": "  We RECOMMEND storing this information if",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1143",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.3",
    "orig_text": "none",
    "correct_text": "PIM (*,G) Join/Prune state begins with a Join(*,G) sent to the RP.  The metric to \r\nthe RP is kept in the MRIB.  Because the RP for this group can be any of several \r\nPIM routers, the source of the metric information in the MRIB is populated by any \r\nof the mechanisms discussed in section 4.7.",
    "notes": "PIM state begins with a join for a group sent towards the RP.  It is not readily evident that the BSR keeps a list of current RPs for use in the hash function to map groups onto these RPs in order to seed our state.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1144",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.1.4",
    "orig_text": "   Local membership is the result of the local source-specific\r\n   membership mechanism (such as IGMP version 3) running on that\r\n   interface and specifying that this particular source should be\r\n   included.  As stored here, this state is the resulting state after\r\n   any IGMPv3 inconsistencies have been resolved.  It need not be kept\r\n   if this router is not the DR on that interface unless this router won\r\n   a (S,G) assert on this interface for this group.\r\n",
    "correct_text": "   Local membership is the result of the local source-specific\r\n   membership mechanism (such as IGMP version 3) running on that\r\n   interface and specifying that this particular source should be\r\n   included.  As stored here, this state is the resulting state after\r\n   any IGMPv3 inconsistencies have been resolved.  It need not be kept\r\n   if this router is not the DR on that interface unless this router won\r\n   an (S,G) assert on this interface for this group.\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1145",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.4",
    "orig_text": "  However, we\r\n   recommend storing this information if possible, as it reduces latency\r\n   converging to stable operating conditions after a failure causing a\r\n   change of DR.  This information is used by the pim_include(S,G) macro\r\n   described in Section 4.1.6.\r\n",
    "correct_text": "  However, we\r\n   RECOMMEND storing this information if possible, as it reduces latency\r\n   converging to stable operating conditions after a failure causing a\r\n   change of DR.  This information is used by the pim_include(S,G) macro\r\n   described in Section 4.1.6.\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1146",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.1.5",
    "orig_text": "However, we recommend storing this\r\n   information if possible, as it reduces latency converging to stable\r\n   operating conditions after a failure causing a change of DR.  This\r\n   information is used by the pim_exclude(S,G) macro described in\r\n   Section 4.1.6.\r\n",
    "correct_text": "However, we RECOMMEND storing this\r\n   information if possible, as it reduces latency converging to stable\r\n   operating conditions after a failure causing a change of DR.  This\r\n   information is used by the pim_exclude(S,G) macro described in\r\n   Section 4.1.6.\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1147",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.2",
    "orig_text": "      RPF_interface(RP) is the interface the MRIB indicates would be\r\n      used to route packets to RP, except at the RP when it is the\r\n",
    "correct_text": "      RPF_interface(RP) is the interface the MRIB indicates would be\r\n      used to route packets to the RP, except at the RP when it is the\r\n",
    "notes": "Missing word.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1148",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.2",
    "orig_text": "      # or Assert(*,G) message to be sent out interface iif.",
    "correct_text": "      # or Assert(*,G) message to be sent out iif.",
    "notes": "“should be sent out interface iif” is redundant as “iif” stands for “incoming interface” and this expands to: “should be sent out interface incoming interface”, which is redundant.\n --VERIFIER NOTES-- \nIn this case \"iif\" is the identifier of an interface. It reads better as it is.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1149",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.2.2",
    "orig_text": "   Basically, Update_SPTbit will set the SPTbit if we have the\r\n   appropriate (S,G) join state, and if the packet arrived on the\r\n   correct upstream interface for S, and if one or more of the following\r\n   conditions applies:\r\n",
    "correct_text": "See notes",
    "notes": "Should “Basically, Update_SPTbit will set” be “Basically, Update_SPTbit(S,G,iif) will set”?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1150",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.3.1",
    "orig_text": "   The LAN Prune Delay Option SHOULD be included in all Hello messages\r\n   sent on multi-access LANs.  This option advertises a router's\r\n   capability to use values other than the defaults for the\r\n   Propagation_Delay and Override_Interval, which affect the setting of\r\n   the Prune-Pending, Upstream Join, and Override Timers (defined in\r\n   Section 4.10).\r\n",
    "correct_text": "   The LAN Prune Delay Option SHOULD be included in all Hello messages\r\n   sent on multi-access LANs.  This option advertises a router's\r\n   capability to use values other than the defaults for the\r\n   Propagation_Delay(I) and Override_Interval, which affect the setting of\r\n   the Prune-Pending, Upstream Join, and Override Timers (defined in\r\n   Section 4.10).\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1151",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "   PIM implementers should enforce a lower bound on the permitted values\r\n   for this delay to allow for scheduling and processing delays within\r\n   their router.  \r\n",
    "correct_text": "   PIM implementers SHOULD enforce a lower bound on the permitted values\r\n   for this delay to allow for scheduling and processing delays within\r\n   their router.  \r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1152",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.4.2",
    "orig_text": "   Note (+): Implementations are advised not to make this a special\r\n      case, but to arrange that this path rejoin the normal packet\r\n      forwarding path.  \r\n",
    "correct_text": "   Note (+): Implementations are SHOULD NOT to make this a special\r\n      case, but to arrange that this path rejoin the normal packet\r\n      forwarding path.  \r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1153",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.5.1",
    "orig_text": "+------------++--------------------------------------------------------+\r\n|            ||                          Event                         |\r\n|            ++-------------+-------------+--------------+-------------+\r\n|Prev State  ||Receive      | Receive     | Prune-       | Expiry Timer|\r\n|            ||Join(*,*,RP) | Prune       | Pending      | Expires     |\r\n|            ||             | (*,*,RP)    | Timer        |             |\r\n|            ||             |             | Expires      |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|            ||-> J state   | -> NI state | -            | -           |\r\n|NoInfo (NI) ||start Expiry |             |              |             |\r\n|            ||Timer        |             |              |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|            ||-> J state   | -> PP state | -            | -> NI state |\r\n|Join (J)    ||restart      | start Prune-|              |             |\r\n|            ||Expiry Timer | Pending     |              |             |\r\n|            ||             | Timer       |              |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|Prune-      ||-> J state   | -> PP state | -> NI state  | -> NI state |\r\n|Pending (PP)||restart      |             | Send Prune-  |             |\r\n|            ||Expiry Timer |             | Echo(*,*,RP) |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n",
    "correct_text": "+------------++--------------------------------------------------------+\r\n|            ||                          Event                         |\r\n|            ++-------------+-------------+--------------+-------------+\r\n|Prev State  ||Receive      | Receive     | Prune-       | Expiry Timer|\r\n|            ||Join(*,*,RP) | Prune       | Pending      | Expires     |\r\n|            ||             | (*,*,RP)    | Timer        |             |\r\n|            ||             |             | Expires      |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|            ||-> J state   | -           | -            | -           |\r\n|NoInfo (NI) ||start Expiry |             |              |             |\r\n|            ||Timer        |             |              |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|            ||-> J state   | -> PP state | -            | -> NI state |\r\n|Join (J)    ||restart      | start Prune-|              |             |\r\n|            ||Expiry Timer | Pending     |              |             |\r\n|            ||             | Timer       |              |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n|Prune-      ||-> J state   | -           | -> NI state  | -> NI state |\r\n|Pending (PP)||restart      |             | Send Prune-  |             |\r\n|            ||Expiry Timer |             | Echo(*,*,RP) |             |\r\n+------------++-------------+-------------+--------------+-------------+\r\n",
    "notes": "At the intersection of “NoInfo (NI)” and “ReceivePrune(*,*,RP)” it is noted that there is a change of state to “NI”, which is the current state – this is unnecessary.  At the intersection of “PrunePending (PP)” and “ReceivePrune(*,*,RP)” it is noted that there is a change of state to “PP”, which is the current state – this is unnecessary.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1154",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.1",
    "orig_text": "   The transition events \"Receive Join(*,*,RP)\" and \"Receive\r\n   Prune(*,*,RP)\" imply receiving a Join or Prune targeted to this\r\n   router's primary IP address on the received interface.  If the\r\n   upstream neighbor address field is not correct, these state\r\n   transitions in this state machine must not occur, although seeing\r\n   such a packet may cause state transitions in other state machines.\r\n\r\n   On unnumbered interfaces on point-to-point links, the router's\r\n   address should be the same as the source address it chose for the\r\n   Hello message it sent over that interface.  However, on point-to-\r\n   point links we also recommend that for backwards compatibility\r\n",
    "correct_text": "   The transition events \"Receive Join(*,*,RP)\" and \"Receive\r\n   Prune(*,*,RP)\" imply receiving a Join or Prune targeted to this\r\n   router's primary IP address on the received interface.  If the\r\n   upstream neighbor address field is not correct, these state\r\n   transitions in this state machine MUST NOT occur, although seeing\r\n   such a packet MAY cause state transitions in other state machines.\r\n\r\n   On unnumbered interfaces on point-to-point links, the router's\r\n   address should be the same as the source address it chose for the\r\n   Hello message it sent over that interface.  However, on point-to-\r\n   point links it is also RECOMMENDED that for backwards compatibility\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1155",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.1",
    "orig_text": "PIM\r\n   Join/Prune messages with an upstream neighbor address field of all\r\n   zeros are also accepted.\r\n",
    "correct_text": "PIM\r\n   Join/Prune messages with an upstream neighbor address field of all\r\n   zeros also be accepted.\r\n",
    "notes": "Word choice.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1156",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.2",
    "orig_text": "  If the upstream neighbor address\r\n   field is not correct, these state transitions in this state machine\r\n   must not occur, although seeing such a packet may cause state\r\n   transitions in other state machines.\r\n",
    "correct_text": "  If the upstream neighbor address\r\n   field is not correct, these state transitions in this state machine\r\n   MUST NOT occur, although seeing such a packet MAY cause state\r\n   transitions in other state machines.\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1157",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.2",
    "orig_text": "   point links we also recommend that for backwards compatibility PIM\r\n   Join/Prune messages with an upstream neighbor address field of all\r\n   zeros are also accepted.\r\n",
    "correct_text": "   point links we also recommend that for backwards compatibility PIM\r\n   Join/Prune messages with an upstream neighbor address field of all\r\n   zeros are also accepted.\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1158",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.5.3",
    "orig_text": "+------------++--------------------------------------------------------+\r\n|            ||                         Event                          |\r\n|            ++-------------+--------------+-------------+-------------+\r\n|Prev State  ||Receive      | Receive      | Prune-      | Expiry Timer|\r\n|            ||Join(S,G)    | Prune(S,G)   | Pending     | Expires     |\r\n|            ||             |              | Timer       |             |\r\n|            ||             |              | Expires     |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -> NI state  | -           | -           |\r\n|NoInfo (NI) ||start Expiry |              |             |             |\r\n|            ||Timer        |              |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -> PP state  | -           | -> NI state |\r\n|Join (J)    ||restart      | start Prune- |             |             |\r\n|            ||Expiry Timer | Pending      |             |             |\r\n|            ||             | Timer        |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|Prune-      ||-> J state   | -> PP state  | -> NI state | -> NI state |\r\n|Pending (PP)||restart      |              | Send Prune- |             |\r\n|            ||Expiry Timer |              | Echo(S,G)   |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n",
    "correct_text": "+------------++--------------------------------------------------------+\r\n|            ||                         Event                          |\r\n|            ++-------------+--------------+-------------+-------------+\r\n|Prev State  ||Receive      | Receive      | Prune-      | Expiry Timer|\r\n|            ||Join(S,G)    | Prune(S,G)   | Pending     | Expires     |\r\n|            ||             |              | Timer       |             |\r\n|            ||             |              | Expires     |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -            | -           | -           |\r\n|NoInfo (NI) ||start Expiry |              |             |             |\r\n|            ||Timer        |              |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|            ||-> J state   | -> PP state  | -           | -> NI state |\r\n|Join (J)    ||restart      | start Prune- |             |             |\r\n|            ||Expiry Timer | Pending      |             |             |\r\n|            ||             | Timer        |             |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n|Prune-      ||-> J state   | -            | -> NI state | -> NI state |\r\n|Pending (PP)||restart      |              | Send Prune- |             |\r\n|            ||Expiry Timer |              | Echo(S,G)   |             |\r\n+------------++-------------+--------------+-------------+-------------+\r\n",
    "notes": "At the intersection of “NoInfo (NI)” and “ReceivePrune(S,G)” it is noted that there is a change of state to “NI”, which is the current state – this is unnecessary.  At the intersection of “PrunePending (PP)” and “ReceivePrune(S,G)” it is noted that there is a change of state to “PP”, which is the current state – this is unnecessary.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1159",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.4",
    "orig_text": "Figure 5.",
    "correct_text": "",
    "notes": "Why isn’t (S,G) state considered for the (S,G,rpt) state machine (depicted in Figure 5 on page 58)?  Wouldn’t an (S,G) join have an effect up on (S,G,rpt)?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1160",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.4",
    "orig_text": "     Receive Prune(S,G,rpt)\r\n          The compound Join/Prune message contains a Prune(S,G,rpt).\r\n\r\n          The (S,G,rpt) downstream state machine on interface I\r\n          transitions back to the Prune-Pending state.  The Expiry Timer\r\n          (ET) is restarted, set to maximum of its current value and the\r\n          HoldTime from the triggering Join/Prune message.\r\n",
    "correct_text": "None suggested.",
    "notes": "Infinite toggle for every pair of routers where one wants (*,G) and the other wants (*,G) and (S,G,rpt).  State moves from Prune -> PruneTmp -> NI -> Prune for the (S,G,rpt) state machine.  This causes upstream thrash with Join(S,G,rpt) followed by Prune(S,G,rpt) in continual succession.  Which causes Prune (S,G,rpt) state to be state limited to never actually enter Prune state (NI -> PP -> NI).",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1161",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.6",
    "orig_text": "     bool JoinDesired(*,G) {\r\n        if (immediate_olist(*,G) != NULL OR\r\n            (JoinDesired(*,*,RP(G)) AND\r\n             AssertWinner(*, G, RPF_interface(RP(G))) != NULL))\r\n            return TRUE\r\n        else\r\n            return FALSE\r\n     }\r\n\r\n   JoinDesired(*,G) is true when the router has forwarding state that\r\n   would cause it to forward traffic for G using shared tree state.\r\n   Note that although JoinDesired is true, the router's sending of a\r\n   Join(*,G) message may be suppressed by another router sending a\r\n   Join(*,G) onto the upstream interface.\r\n",
    "correct_text": "",
    "notes": "When would immediate_olist(*,G) be NULL and forwarding state exist?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1162",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.7",
    "orig_text": "     RPF'(*,G) changes not due to an Assert\r\n          An event occurred that caused the next hop towards the RP for\r\n          G to change.  This may be caused by a change in the MRIB\r\n          routing database or the group-to-RP mapping.  Note that this\r\n          transition does not occur if an Assert is active and the\r\n          upstream interface does not change.\r\n\r\n          The upstream (*,G) state machine remains in Joined state.\r\n          Send Join(*,G) to the new upstream neighbor, which is the new\r\n          value of RPF'(*,G).  Send Prune(*,G) to the old upstream\r\n          neighbor, which is the old value of RPF'(*,G).  Use the new\r\n          value of RP(G) in the Prune(*,G) message or all zeros if RP(G)\r\n          becomes unknown (old value of RP(G) may be used instead to\r\n          improve behavior in routers implementing older versions of\r\n          this spec).  Set the Join Timer (JT) to expire after\r\n          t_periodic seconds.\r\n",
    "correct_text": "",
    "notes": "Sending the Prune(*,G) may help state issues, but if the change in MRIB was spurious or there was a situation where a difference of opinion in lower route costs exists, some traffic may be dropped until the MRIB becomes consistent again.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1163",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.7",
    "orig_text": "If a (S,G) Assert occurs on the upstream interface,",
    "correct_text": "If an (S,G) Assert occurs on the upstream interface,",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1164",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.7",
    "orig_text": "and this changes\r\n   the this router's idea of the upstream neighbor,\r\n",
    "correct_text": "and this changes\r\n   the router's idea of the upstream neighbor,\r\n\r\n-or-\r\n\r\nand this changes\r\n   this router's idea of the upstream neighbor,\r\n",
    "notes": "Word choice.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1165",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.7",
    "orig_text": "   In addition, if MRIB changes",
    "correct_text": "   In addition, if the MRIB changes",
    "notes": "Missing word.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1166",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.7",
    "orig_text": "          The upstream (S,G) state machine remains in Joined state.  If\r\n          the Join Timer is set to expire in more than t_override\r\n          seconds, reset it so that it expires after t_override seconds.\r\n",
    "correct_text": "          The upstream (S,G) state machine remains in Joined state.  If\r\n          the Join Timer is set to expire in more than t_override\r\n          seconds, reset it so that it expires after t_override seconds.  If the \r\n          Join Timer is set to expire in less than t_override seconds, leave it   \r\n          unchanged.\r\n",
    "notes": "It would make the Join Timer clearer to understand if an explicit statement was made indicating that if the Join Timer is less than t_override, it should be left unchanged.  This needs to be made for “See Prune(S,G) to RPF’(S,G)”, “See Prune(S,G,rpt) to RPF’(S,G)”, and “See Prune(*,G) to RPF’(S,G)”.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1167",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.7",
    "orig_text": "          The upstream (S,G) state machine remains in Joined state.\r\n          Send Join(S,G) to the new upstream neighbor, which is the new\r\n          value of RPF'(S,G).  Send Prune(S,G) to the old upstream\r\n          neighbor, which is the old value of RPF'(S,G).  Set the Join\r\n          Timer (JT) to expire after t_periodic seconds.\r\n",
    "correct_text": "",
    "notes": "Sending the Prune(*,G) may help state issues, but if the change in MRIB was spurious or there was a situation where a difference of opinion in lower route costs exists, some traffic may be dropped until the MRIB becomes consistent again.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1168",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.8",
    "orig_text": "       # Note: we joined the shared tree, but there was an (S,G) assert\r\n       # and the source tree RPF neighbor is different.\r\n",
    "correct_text": "",
    "notes": "In the comments on the “else” clause, why would we think that we were on the shared tree if the SPTbit is false?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1169",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.9",
    "orig_text": "   In addition, there is an (S,G,rpt) Override Timer, OT(S,G,rpt), which\r\n   is used to delay triggered Join(S,G,rpt) messages to prevent\r\n   implosions of triggered messages.\r\n",
    "correct_text": "",
    "notes": "What does “implosions of triggered messages” refer to?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1170",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5.9",
    "orig_text": "+------------++--------------------------------------------------------+\r\n|            ||                           Event                        |\r\n|            ++--------------+--------------+-------------+------------+\r\n|Prev State  || PruneDesired | PruneDesired | RPTJoin     | inherited_ |\r\n|            || (S,G,rpt)    | (S,G,rpt)    | Desired(G)  | olist      |\r\n|            || ->True       | ->False      | ->False     | (S,G,rpt)  |\r\n|            ||              |              |             | ->non-NULL |\r\n+------------++--------------+--------------+-------------+------------+\r\n|RPTNotJoined|| -> P state   | -            | -           | -> NP state|\r\n|(G) (NJ)    ||              |              |             |            |\r\n+------------++--------------+--------------+-------------+------------+\r\n|Pruned      || -            | -> NP state  | -> NJ state | -          |\r\n|(S,G,rpt)   ||              | Send Join    |             |            |\r\n|(P)         ||              | (S,G,rpt)    |             |            |\r\n+------------++--------------+--------------+-------------+------------+\r\n|NotPruned   || -> P state   | -            | -> NJ state | -          |\r\n|(S,G,rpt)   || Send Prune   |              | Cancel OT   |            |\r\n|(NP)        || (S,G,rpt);   |              |             |            |\r\n|            || Cancel OT    |              |             |            |\r\n+------------++--------------+--------------+-------------+------------+\r\n",
    "correct_text": "",
    "notes": "In the intersection of “RPTNotJoined(G)” and “PruneDesired(S,G,rpt) -> True”, the state table indicates that the result is to move into “Pruned(S,G,rpt)” state.  This occurs again in the text on pages 80 and 81.  Why would join state be entered for (*,G)  simply in order to prune (S,G,rpt)?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1171",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.5.9",
    "orig_text": "+----------------------------------------------------------------------+\r\n|                    In NotPruned(S,G,rpt) State                       |\r\n+----------+--------------+--------------+--------------+--------------+\r\n|Override  | See Prune    | See Join     | See Prune    | RPF'         |\r\n|Timer     | (S,G,rpt) to | (S,G,rpt) to | (S,G) to     | (S,G,rpt) -> |\r\n|expires   | RPF'         | RPF'         | RPF'         | RPF' (*,G)   |\r\n|          | (S,G,rpt)    | (S,G,rpt)    | (S,G,rpt)    |              |\r\n+----------+--------------+--------------+--------------+--------------+\r\n|Send Join | OT = min(OT, | Cancel OT    | OT = min(OT, | OT = min(OT, |\r\n|(S,G,rpt);| t_override)  |              | t_override)  | t_override)  |\r\n|Leave OT  |              |              |              |              |\r\n|unset     |              |              |              |              |\r\n+----------+--------------+--------------+--------------+--------------+\r\n",
    "correct_text": "See notes",
    "notes": "The table at the bottom of page 78 does not indicate what the rows are as opposed to the columns.  It appears that the first row consists of events and the second row consists of actions to take upon receiving those events while in the “NotPruned(S,G,rpt) State”.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1172",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.5.9",
    "orig_text": "  If the router was previously in RPTNotJoined(G)\r\n      state, then there is no need to trigger an action in this state\r\n      machine because sending a Prune(S,G,rpt) is handled by the rules\r\n      for sending the Join(*,G) or Join(*,*,RP).\r\n",
    "correct_text": "See notes.",
    "notes": "A reference to a page would be very helpful at the end of the event description in reference to the “rules for sending the Join(*,G) or Join(*,*,RP).”",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1173",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.6.4",
    "orig_text": "+----------------------------------------------------------------------+\r\n|                         In NoInfo (NI) State                         |\r\n+---------------+-------------------+------------------+---------------+\r\n| Receive       |  Receive Assert   |  Data arrives    |  Receive      |\r\n| Inferior      |  with RPTbit      |  from S to G on  |  Acceptable   |\r\n| Assert with   |  set and          |  I and           |  Assert with  |\r\n| RPTbit clear  |  CouldAssert      |  CouldAssert     |  RPTbit clear |\r\n| and           |  (S,G,I)          |  (S,G,I)         |  and AssTrDes |\r\n| CouldAssert   |                   |                  |  (S,G,I)      |\r\n| (S,G,I)       |                   |                  |               |\r\n+---------------+-------------------+------------------+---------------+\r\n| -> W state    |  -> W state       |  -> W state      |  -> L state   |\r\n| [Actions A1]  |  [Actions A1]     |  [Actions A1]    |  [Actions A6] |\r\n+---------------+-------------------+------------------+---------------+\r\n\r\n+----------------------------------------------------------------------+\r\n|                   In I Am Assert Winner (W) State                    |\r\n+----------------+------------------+-----------------+----------------+\r\n| Assert Timer   |   Receive        |  Receive        |  CouldAssert   |\r\n| Expires        |   Inferior       |  Preferred      |  (S,G,I) ->    |\r\n|                |   Assert         |  Assert         |  FALSE         |\r\n+----------------+------------------+-----------------+----------------+\r\n| -> W state     |   -> W state     |  -> L state     |  -> NI state   |\r\n| [Actions A3]   |   [Actions A3]   |  [Actions A2]   |  [Actions A4]  |\r\n+----------------+------------------+-----------------+----------------+\r\n",
    "correct_text": "See notes.",
    "notes": "The tables at the bottom of page 84 do not indicate what the rows are as opposed to the columns.  It appears that the first rows consist of events and the second rows consist of actions to take upon receiving those events while in the “NoInfo” state and “I AM Assert Winner” state.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1174",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "+---------------------------------------------------------------------+\r\n|                   In I Am Assert Loser (L) State                    |\r\n+-------------+-------------+-------------+-------------+-------------+\r\n|Receive      |Receive      |Receive      |Assert Timer |Current      |\r\n|Preferred    |Acceptable   |Inferior     |Expires      |Winner's     |\r\n|Assert       |Assert with  |Assert or    |             |GenID        |\r\n|             |RPTbit clear |Assert       |             |Changes or   |\r\n|             |from Current |Cancel from  |             |NLT Expires  |\r\n|             |Winner       |Current      |             |             |\r\n|             |             |Winner       |             |             |\r\n+-------------+-------------+-------------+-------------+-------------+\r\n|-> L state   |-> L state   |-> NI state  |-> NI state  |-> NI state  |\r\n|[Actions A2] |[Actions A2] |[Actions A5] |[Actions A5] |[Actions A5] |\r\n+-------------+-------------+-------------+-------------+-------------+\r\n\r\n+----------------------------------------------------------------------+\r\n|                    In I Am Assert Loser (L) State                    |\r\n+----------------+-----------------+------------------+----------------+\r\n| AssTrDes       |  my_metric ->   |  RPF_interface   |  Receive       |\r\n| (S,G,I) ->     |  better than    |  (S) stops       |  Join(S,G) on  |\r\n| FALSE          |  winner's       |  being I         |  interface I   |\r\n|                |  metric         |                  |                |\r\n+----------------+-----------------+------------------+----------------+\r\n| -> NI state    |  -> NI state    |  -> NI state     |  -> NI State   |\r\n| [Actions A5]   |  [Actions A5]   |  [Actions A5]    |  [Actions A5]  |\r\n+----------------+-----------------+------------------+----------------+\r\n",
    "correct_text": "See notes.",
    "notes": "The table at the top of page 85 does not indicate what the rows are as opposed to the columns.  It appears that the first row consists of events and the second row consists of actions to take upon receiving those events while in the “I Am Assert Loser” state.\n --VERIFIER NOTES-- \nIt is perfectly possible to parse this with a basic knowledge of the protocol states and events.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1175",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.6.2",
    "orig_text": "  It must not\r\n      forward packets for G onto interface I with the exception of\r\n      traffic from sources for which is has (S,G) \"I am Assert Winner\"\r\n      state.\r\n",
    "correct_text": "  It must not\r\n      forward packets for G onto interface I with the exception of\r\n      traffic from sources for which it has (S,G) \"I am Assert Winner\"\r\n      state.\r\n",
    "notes": "Misspelling (\"is\" -> \"it\").",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1176",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.6.2",
    "orig_text": "+----------------------------------------------------------------------+\r\n|                         In NoInfo (NI) State                         |\r\n+-----------------------+-----------------------+----------------------+\r\n| Receive Inferior      |  Data arrives for G   |  Receive Acceptable  |\r\n| Assert with RPTbit    |  on I and             |  Assert with RPTbit  |\r\n| set and               |  CouldAssert          |  set and AssTrDes    |\r\n| CouldAssert(*,G,I)    |  (*,G,I)              |  (*,G,I)             |\r\n+-----------------------+-----------------------+----------------------+\r\n| -> W state            |  -> W state           |  -> L state          |\r\n| [Actions A1]          |  [Actions A1]         |  [Actions A2]        |\r\n+-----------------------+-----------------------+----------------------+\r\n\r\n+---------------------------------------------------------------------+\r\n|                    In I Am Assert Winner (W) State                  |\r\n+----------------+-----------------+-----------------+----------------+\r\n| Assert Timer   |  Receive        |  Receive        |  CouldAssert   |\r\n| Expires        |  Inferior       |  Preferred      |  (*,G,I) ->    |\r\n|                |  Assert         |  Assert         |  FALSE         |\r\n+----------------+-----------------+-----------------+----------------+\r\n| -> W state     |  -> W state     |  -> L state     |  -> NI state   |\r\n| [Actions A3]   |  [Actions A3]   |  [Actions A2]   |  [Actions A4]  |\r\n+----------------+-----------------+-----------------+----------------+\r\n",
    "correct_text": "See notes.",
    "notes": "The tables at the bottom of page 92 do not indicate what the rows are as opposed to the columns.  It appears that the first rows consist of events and the second rows consist of actions to take upon receiving those events while in the “NoInfo” state and the “I Am Assert Winner” state.\n --VERIFIER NOTES-- \nThis is perfectly easy to parse having an understanding of the states and events for the protocol.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1177",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.6.2",
    "orig_text": "+---------------------------------------------------------------------+\r\n|                    In I Am Assert Loser (L) State                   |\r\n+-------------+-------------+-------------+-------------+-------------+\r\n|Receive      |Receive      |Receive      |Assert Timer |Current      |\r\n|Preferred    |Acceptable   |Inferior     |Expires      |Winner's     |\r\n|Assert with  |Assert from  |Assert or    |             |GenID        |\r\n|RPTbit set   |Current      |Assert       |             |Changes or   |\r\n|             |Winner with  |Cancel from  |             |NLT Expires  |\r\n|             |RPTbit set   |Current      |             |             |\r\n|             |             |Winner       |             |             |\r\n+-------------+-------------+-------------+-------------+-------------+\r\n|-> L state   |-> L state   |-> NI state  |-> NI state  |-> NI state  |\r\n|[Actions A2] |[Actions A2] |[Actions A5] |[Actions A5] |[Actions A5] |\r\n+-------------+-------------+-------------+-------------+-------------+\r\n\r\n+----------------------------------------------------------------------+\r\n|                    In I Am Assert Loser (L) State                    |\r\n+----------------+----------------+-----------------+------------------+\r\n| AssTrDes       | my_metric ->   |  RPF_interface  |  Receive         |\r\n| (*,G,I) ->     | better than    |  (RP(G)) stops  |  Join(*,G) or    |\r\n| FALSE          | Winner's       |  being I        |  Join            |\r\n|                | metric         |                 |  (*,*,RP(G)) on  |\r\n|                |                |                 |  Interface I     |\r\n+----------------+----------------+-----------------+------------------+\r\n| -> NI state    | -> NI state    |  -> NI state    |  -> NI State     |\r\n| [Actions A5]   | [Actions A5]   |  [Actions A5]   |  [Actions A5]    |\r\n+----------------+----------------+-----------------+------------------+\r\n",
    "correct_text": "See notes.",
    "notes": "The tables at the top of page 93 do not indicate what the rows are as opposed to the columns.  It appears that the first rows consist of events and the second rows consist of actions to take upon receiving those events while in the “I Am Assert Loser” state.\n --VERIFIER NOTES-- \nThis is perfectly easy to parse having an understanding of the states and events for the protocol.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1178",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.6.2",
    "orig_text": "See notes.",
    "correct_text": "See notes.",
    "notes": "The figure given on page 92 lists state changes which are “Assert Timer Expires”, “Receive Inferior Assert”, “Receive Preferred Assert”, and “CouldAssert(*,G,I) -> FALSE”, but the order given in the descriptions after the diagram on page 95 does not match this order.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1179",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.6.2",
    "orig_text": "     A4:  Send AssertCancel(*,G).\r\n          Delete assert info (AssertWinner(*,G,I) and\r\n          AssertWinnerMetric(*,G,I) will then return their default\r\n          values).\r\n\r\n     A5:  Delete assert info (AssertWinner(*,G,I) and\r\n          AssertWinnerMetric(*,G,I) will then return their default\r\n          values).\r\n",
    "correct_text": "     A4:  Send AssertCancel(*,G).\r\n          Delete assert info (AssertWinner(*,G,I) and\r\n          AssertWinnerMetric(*,G,I) will then return to their default\r\n          values).\r\n\r\n     A5:  Delete assert info (AssertWinner(*,G,I) and\r\n          AssertWinnerMetric(*,G,I) will then return to their default\r\n          values).\r\n",
    "notes": "Missing words.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1180",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.6.5",
    "orig_text": "  In this case, it needs to ignore the assert state\r\n   if it will win the assert once the SPTbit is set.\r\n",
    "correct_text": "  In this case, it needs to ignore the assert state\r\n   if it will win the assert once the SPT bit is set.\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1181",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.6.5",
    "orig_text": "       Rationale: This avoids keeping state alive on the (S,G) tree when\r\n       only (*,G) downstream members are left.  Also, it avoids sending\r\n       (S,G,rpt) joins to a router that is not on the (*,G) tree.  This\r\n       behavior might be confusing although this specification does\r\n       indicate that such a join should be dropped.\r\n",
    "correct_text": "       Rationale: This avoids keeping state alive on the (S,G) tree when\r\n       only (*,G) downstream members are left.  Also, it avoids sending\r\n       (S,G,rpt) joins to a router that is not on the (*,G) tree.  This\r\n       behavior might be confusing although this specification does\r\n       indicate that such a join SHOULD be dropped.\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1182",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9",
    "orig_text": "Type Types for specific PIM messages.  PIM Types are:",
    "correct_text": "Type\r\n Types for specific PIM messages.  PIM Types are:\r\n",
    "notes": "Spacing.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1183",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.5",
    "orig_text": "   Holdtime\r\n        The amount of time a receiver must keep the Join/Prune state\r\n        alive, in seconds.  If the Holdtime is set to '0xffff', the\r\n        receiver of this message should hold the state until canceled by\r\n        the appropriate canceling Join/Prune message, or timed out\r\n        according to local policy.  This may be used with dial-on-demand\r\n        links, to avoid keeping the link up with periodic Join/Prune\r\n        messages.\r\n\r\n        Note that the HoldTime must be larger than the\r\n        J/P_Override_Interval(I).\r\n",
    "correct_text": "   Holdtime\r\n        The amount of time a receiver MUST keep the Join/Prune state\r\n        alive, in seconds.  If the Holdtime is set to '0xffff', the\r\n        receiver of this message SHOULD hold the state until canceled by\r\n        the appropriate canceling Join/Prune message, or timed out\r\n        according to local policy.  This MAY be used with dial-on-demand\r\n        links, to avoid keeping the link up with periodic Join/Prune\r\n        messages.\r\n\r\n        Note that the HoldTime MUST be larger than the\r\n        J/P_Override_Interval(I).\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1184",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.5.1",
    "orig_text": "  Each wildcard group set may contain one or more\r\n        (*,*,RP) source list entries in either the Joined or Pruned\r\n        lists.\r\n\r\n        A (*,*,RP) source list entry may only exist in a wildcard group\r\n        set.  When added to a Joined source list, this type of source\r\n        entry expresses the router's interest in receiving traffic for\r\n        all groups mapping to the specified RP.  \r\n",
    "correct_text": "  Each wildcard group set MAY contain one or more\r\n        (*,*,RP) source list entries in either the Joined or Pruned\r\n        lists.\r\n\r\n        A (*,*,RP) source list entry MAY only exist in a wildcard group\r\n        set.  When added to a Joined source list, this type of source\r\n        entry expresses the router's interest in receiving traffic for\r\n        all groups mapping to the specified RP.  \r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1185",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.5.1",
    "orig_text": "  Each group-\r\n        specific set may contain (*,G), (S,G,rpt), and (S,G) source list\r\n        entries in the Joined or Pruned lists.\r\n\r\n     (*,G)\r\n          The (*,G) source list entry is used in Join/Prune messages\r\n          sent towards the RP for the specified group.  It expresses\r\n          interest (or lack thereof) in receiving traffic sent to the\r\n          group through the Rendezvous-Point shared tree.  There may\r\n          only be one such entry in both the Joined and Pruned lists of\r\n          a group-specific set.\r\n\r\n          (*,G) source list entries have the Source-Address set to the\r\n          address of the RP for group G, the Source-Address Mask-Len set\r\n          to the full length of the IP address, and both the WC and RPT\r\n          bits of the Encoded-Source-Address set.\r\n\r\n     (S,G,rpt)\r\n          The (S,G,rpt) source list entry is used in Join/Prune messages\r\n          sent towards the RP for the specified group.  It expresses\r\n          interest (or lack thereof) in receiving traffic through the\r\n          shared tree sent by the specified source to this group.  For\r\n          each source address, the entry may exist in only one of the\r\n          Joined and Pruned source lists of a group-specific set, but\r\n          not both.\r\n\r\n          (S,G,rpt) source list entries have the Source-Address set to\r\n          the address of the source S, the Source-Address Mask-Len set\r\n          to the full length of the IP address, and the WC bit cleared\r\n          and the RPT bit set in the Encoded-Source-Address.\r\n\r\n     (S,G)\r\n          The (S,G) source list entry is used in Join/Prune messages\r\n          sent towards the specified source.  It expresses interest (or\r\n          lack thereof) in receiving traffic through the shortest path\r\n          tree sent by the source to the specified group.  For each\r\n          source address, the entry may exist in only one of the Joined\r\n          and Pruned source lists of a group-specific set, but not both.\r\n",
    "correct_text": "  Each group-\r\n        specific set MAY contain (*,G), (S,G,rpt), and (S,G) source list\r\n        entries in the Joined or Pruned lists.\r\n\r\n     (*,G)\r\n          The (*,G) source list entry is used in Join/Prune messages\r\n          sent towards the RP for the specified group.  It expresses\r\n          interest (or lack thereof) in receiving traffic sent to the\r\n          group through the Rendezvous-Point shared tree.  There MUST \r\n          be one such entry in both the Joined and Pruned lists of\r\n          a group-specific set.\r\n\r\n          (*,G) source list entries have the Source-Address set to the\r\n          address of the RP for group G, the Source-Address Mask-Len set\r\n          to the full length of the IP address, and both the WC and RPT\r\n          bits of the Encoded-Source-Address set.\r\n\r\n     (S,G,rpt)\r\n          The (S,G,rpt) source list entry is used in Join/Prune messages\r\n          sent towards the RP for the specified group.  It expresses\r\n          interest (or lack thereof) in receiving traffic through the\r\n          shared tree sent by the specified source to this group.  For\r\n          each source address, the entry MUST exist in only one of the\r\n          Joined and Pruned source lists of a group-specific set, but\r\n          not both.\r\n\r\n          (S,G,rpt) source list entries have the Source-Address set to\r\n          the address of the source S, the Source-Address Mask-Len set\r\n          to the full length of the IP address, and the WC bit cleared\r\n          and the RPT bit set in the Encoded-Source-Address.\r\n\r\n     (S,G)\r\n          The (S,G) source list entry is used in Join/Prune messages\r\n          sent towards the specified source.  It expresses interest (or\r\n          lack thereof) in receiving traffic through the shortest path\r\n          tree sent by the source to the specified group.  For each\r\n          source address, the entry MUST exist in only one of the Joined\r\n          and Pruned source lists of a group-specific set, but not both.\r\n",
    "notes": "RFC 2119 keywords are not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1186",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9.5.1",
    "orig_text": "   o Combining a (*,G) Join and a (S,G,rpt) Join entry in the same\r\n     message is redundant as the (*,G) entry covers the information\r\n     provided by the (S,G,rpt) entry.\r\n",
    "correct_text": "   o Combining a (*,G) Join and an (S,G,rpt) Join entry in the same\r\n     message is redundant as the (*,G) entry covers the information\r\n     provided by the (S,G,rpt) entry.\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1187",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9.5.1",
    "orig_text": "   o The same applies for a (*,G) Prunes and (S,G,rpt) Prunes.",
    "correct_text": "   o The same applies for a (*,G) Prune and (S,G,rpt) Prunes.",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1188",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9.5.1",
    "orig_text": "   o The combination of a (*,G) Prune and a (S,G,rpt) Join is also not\r\n     generated.\r\n",
    "correct_text": "   o The combination of a (*,G) Prune and an (S,G,rpt) Join is also not\r\n     generated.\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1189",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9.5.1",
    "orig_text": "  o As Join/Prune messages are targeted to a single PIM neighbor,\r\n     including both a (S,G) Join and a (S,G,rpt) Prune in the same\r\n     message is usually redundant.  \r\n",
    "correct_text": "  o As Join/Prune messages are targeted to a single PIM neighbor,\r\n     including both an (S,G) Join and an (S,G,rpt) Prune in the same\r\n     message is usually redundant.  \r\n",
    "notes": "Misspellings.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1190",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.9.5.1",
    "orig_text": "   o The combination of a (S,G) Prune and a (S,G,rpt) Join could\r\n     possibly be used by a router to switch from receiving a particular\r\n     source on the shortest-path tree back to receiving it on the shared\r\n     tree (provided that the RPF neighbor for the shortest-path and\r\n     shared trees is common).  However, Sparse-Mode PIM does not provide\r\n     a mechanism for explicitly switching back to the shared tree.\r\n",
    "correct_text": "   o The combination of an (S,G) Prune and an (S,G,rpt) Join could\r\n     possibly be used by a router to switch from receiving a particular\r\n     source on the shortest-path tree back to receiving it on the shared\r\n     tree (provided that the RPF neighbor for the shortest-path and\r\n     shared trees is common).  However, Sparse-Mode PIM does not provide\r\n     a mechanism for explicitly switching back to the shared tree.\r\n",
    "notes": "Misspellings.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1191",
    "doc-id": "RFC4601",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.9.5.2",
    "orig_text": "  On a router with a large amount of multicast state,",
    "correct_text": "  On a router with a large amount of multicast states,\r\n\r\n-or-\r\n\r\n  On a router with a large amount of multicast state information,\r\n\r\n-or-\r\n\r\n  On a router with a large multicast state,\r\n",
    "notes": "Word choice.\n --VERIFIER NOTES-- \nThis is common usage.\r\n\"state information\" might have been clearer, but \"state\" is acceptable.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1192",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.5.2",
    "orig_text": "  This list of\r\n   (S,G,rpt) Pruned source-list entries MUST not be split in multiple\r\n   messages.\r\n",
    "correct_text": "  This list of\r\n   (S,G,rpt) Pruned source-list entries MUST NOT be split in multiple\r\n   messages.\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1193",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.5.2",
    "orig_text": "   If only N (S,G,rpt) Prune entries fit into a maximum-sized Join/Prune\r\n   message, but the router has more than N (S,G,rpt) Prunes to add, then\r\n   the router MUST choose to include the first N (numerically smallest\r\n   in network byte order) IP addresses.\r\n",
    "correct_text": "",
    "notes": "Only N (S,G,rpt) Prune entries are transmitted in the biggest Join/Prune message, what about the remaining (S,G,rpt) entries?  Are they ignored?  Is a second message generated?  This should be made clear.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1194",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.9.5.2",
    "orig_text": "  Assert messages may also be sent in response\r\n   to an Assert message from another router.\r\n",
    "correct_text": "  Assert messages MAY also be sent in response\r\n   to an Assert message from another router.\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1195",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "6.2",
    "orig_text": "   Either static configuration of IP addresses or an IPsec security\r\n   association may be used.  \r\n",
    "correct_text": "   Either static configuration of IP addresses or an IPsec security\r\n   association MAY be used.  \r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1196",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "6.3.2.1",
    "orig_text": "   In this \"single shared key\" mode of operation, the network\r\n   administrator must choose an SPI for each DR that will be used to\r\n   send it PIM protocol packets.  \r\n",
    "correct_text": "See notes.",
    "notes": "What does “it” refer to?\r\n\r\ns/it/the/",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1197",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "6.3.2.1",
    "orig_text": "The Security Policy Database at every\r\n   DR is configured to select an SA (including the authentication\r\n   algorithm, authentication parameters, and this SPI) when sending\r\n   Register messages to this RP.\r\n",
    "correct_text": "The Security Policy Database at every\r\n   DR is configured to select an SA (including the authentication\r\n   algorithm, authentication parameters, and this SPI) when sending\r\n   Register messages to an RP.\r\n",
    "notes": "Word choice.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1198",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "6.3.2.2",
    "orig_text": "   In order to simplify the management problem, it may be acceptable to\r\n   use the same authentication algorithm and authentication parameters,\r\n   regardless of the sending RP and regardless of the destination DR.\r\n   Although a unique SA is needed for each DR, the same authentication\r\n",
    "correct_text": "   In order to simplify the management problem, it MAY be acceptable to\r\n   use the same authentication algorithm and authentication parameters,\r\n   regardless of the sending RP and regardless of the destination DR.\r\n   Although a unique SA is needed for each DR, the same authentication\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1199",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "6.4",
    "orig_text": "   There are a number of possible denial-of-service attacks against PIM\r\n   that can be caused by generating false PIM protocol messages or even\r\n   by generating data false traffic.\r\n",
    "correct_text": "See notes.",
    "notes": "What does “or even by generating data false traffic” mean?\r\n\r\n[Adrian Farrel] Clearly \"or even by generating false data traffic.\"",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1200",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "6.4",
    "orig_text": "   -  Forging a (*,*,RP) join presents a possibility for a denial-of-\r\n      service attack by causing all traffic in the domain to flow to the\r\n      PMBR issuing the join.  (*,*,RP) behavior is included here\r\n      primarily for backwards compatibility with prior revisions of the\r\n      spec.  However, the implementation of (*,*,RP) and PMBR is\r\n      optional.  When using (*,*,RP), the security concerns should be\r\n      carefully considered.\r\n",
    "correct_text": "   -  Forging a (*,*,RP) join presents a possibility for a denial-of-\r\n      service attack by causing all traffic in the domain to flow to the\r\n      PMBR issuing the join.  (*,*,RP) behavior is included here\r\n      primarily for backwards compatibility with prior revisions of the\r\n      spec.  However, the implementation of (*,*,RP) and PMBR is\r\n      optional.  When using (*,*,RP), the security concerns SHOULD be\r\n      carefully considered.\r\n",
    "notes": "RFC 2119 keyword is not capitalized.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1201",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "6",
    "orig_text": "See note.",
    "correct_text": "\tIPsec usage is recommended to secure PIM messages, but PIM relies upon an \r\nMRIB populated outside of PIM and it should be noted that for PIM security to be \r\neffective, securing the sources of change to the MRIB in a similar fashion to \r\nIPsec is required to be consistent and secure.",
    "notes": "An additional note should be made with regard to PIM security, possibly as \r\nsection 6.3.3?",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1202",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "A.2",
    "orig_text": "   o If the router receives a (S,G) prune alert, it will need to set\r\n     DownstreamJPState(S,G,rpt,I) to PRUNE on the discard interface.\r\n",
    "correct_text": "   o If the router receives an (S,G) prune alert, it will need to set\r\n     DownstreamJPState(S,G,rpt,I) to PRUNE on the discard interface.\r\n",
    "notes": "Misspelling.",
    "submit_date": "2007-12-21",
    "submitter_name": "Maren Peasley",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2662",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.1.4",
    "orig_text": "PIM (S,G) Join/Prune state is the result of receiving PIM (S,G)\r\nJoin/Prune messages on this interface and is specified in Section\r\n4.5.2. ",
    "correct_text": "PIM (S,G) Join/Prune state is the result of receiving PIM (S,G)\r\nJoin/Prune messages on this interface and is specified in Section\r\n4.5.3. ",
    "notes": "Section 4.5.2 deals with (*,G) Join/Prune messages, not (S,G) Join/Prune messages.",
    "submit_date": "2010-12-08",
    "submitter_name": "Ang Way Chuang",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2927",
    "doc-id": "RFC4601",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.2.2",
    "orig_text": "     void\r\n     Update_SPTbit(S,G,iif) {\r\n       if ( iif == RPF_interface(S)\r\n             AND JoinDesired(S,G) == TRUE\r\n             AND ( DirectlyConnected(S) == TRUE\r\n                   OR RPF_interface(S) != RPF_interface(RP(G))\r\n                   OR inherited_olist(S,G,rpt) == NULL\r\n                   OR ( ( RPF'(S,G) == RPF'(*,G) ) AND\r\n                        ( RPF'(S,G) != NULL ) )\r\n                   OR ( I_Am_Assert_Loser(S,G,iif) ) {\r\n          Set SPTbit(S,G) to TRUE\r\n       }\r\n     }",
    "correct_text": "     void\r\n     Update_SPTbit(S,G,iif) {\r\n       if ( iif == RPF_interface(S)\r\n             AND JoinDesired(S,G) == TRUE\r\n             AND ( DirectlyConnected(S) == TRUE\r\n                   OR RPF_interface(S) != RPF_interface(RP(G))\r\n                   OR inherited_olist(S,G,rpt) == NULL\r\n                   OR ( ( RPF'(S,G) == RPF'(*,G) ) AND\r\n                        ( RPF'(S,G) != NULL ) )\r\n                   OR ( I_Am_Assert_Loser(S,G,iif) ) ) ) {\r\n          Set SPTbit(S,G) to TRUE\r\n       }\r\n     }",
    "notes": "The logical evaluation is not properly enclosed. ",
    "submit_date": "2011-08-09",
    "submitter_name": "Ang Way Chuang",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3727",
    "doc-id": "RFC4601",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "A6:  Store new assert winner as AssertWinner(S,G,I) and assert\r\n      winner metric as AssertWinnerMetric(S,G,I).\r\n      Set Assert Timer to Assert_Time.\r\n      If (I is RPF_interface(S)) AND (UpstreamJPState(S,G) == true)\r\n      set SPTbit(S,G) to TRUE.",
    "correct_text": "A6:  Store new assert winner as AssertWinner(S,G,I) and assert\r\n      winner metric as AssertWinnerMetric(S,G,I).\r\n      Set Assert Timer to Assert_Time.\r\n      If (I is RPF_interface(S)) AND (UpstreamJPState(S,G) == Joined)\r\n      set SPTbit(S,G) to TRUE.",
    "notes": "The UpstreamJPState(S,G) should be 'Joined' not 'true'.",
    "submit_date": "2013-09-16",
    "submitter_name": "Christopher Brown",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4027",
    "doc-id": "RFC4601",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.8.2",
    "orig_text": "     if( iif == RPF_interface(S) AND UpstreamJPState(S,G) == Joined ) {\r\n         oiflist = inherited_olist(S,G)\r\n     } else if( iif is in inherited_olist(S,G) ) {\r\n         send Assert(S,G) on iif\r\n     }\r\n\r\n     oiflist = oiflist (-) iif\r\n     forward packet on all interfaces in oiflist\r\n",
    "correct_text": "     oiflist = NULL\r\n\r\n     if( iif == RPF_interface(S) AND UpstreamJPState(S,G) == Joined ) {\r\n         oiflist = inherited_olist(S,G)\r\n     } else if( iif is in inherited_olist(S,G) ) {\r\n         send Assert(S,G) on iif\r\n     }\r\n\r\n     oiflist = oiflist (-) iif\r\n     forward packet on all interfaces in oiflist\r\n",
    "notes": "The followng line is missing:\r\n\r\n    oiflist = NULL\r\n\r\nWithout this, it may lead to accessing uninitialized variable\r\noiflist. This line is present in Section 4.2 from which the simplified\r\nSSM specific pseudo code is derived.",
    "submit_date": "2014-06-26",
    "submitter_name": "Ramakrishna DTV",
    "verifier_id": "140",
    "verifier_name": "Alia Atlas",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "44",
    "doc-id": "RFC4601",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": " Normative References say:",
    "orig_text": "   [6]  Holbrook, H. and B. Cain, \"Source-Specific Multicast for IP\",\r\n        RFC 4507, August 2006.",
    "correct_text": "   [6]  Holbrook, H. and B. Cain, \"Source-Specific Multicast for IP\", RFC \r\n        4607, August 2006.",
    "notes": "Reference [6] in RFC 4601 is wrong, it says SSM for IP is\r\nRFC 4507 when it is RFC 4607.",
    "submit_date": "2006-11-07",
    "submitter_name": "Stephen Nadas",
    "verifier_id": "2",
    "verifier_name": "David Ward",
    "update_date": "2019-09-10 09:09:03"
  }
]
