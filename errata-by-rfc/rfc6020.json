[
  {
    "errata_id": "2949",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "(top of page 149)\r\n\r\n leafref-specification =\r\n                         ;; these stmts can appear in any order\r\n                         path-stmt stmtsep\r\n                         [require-instance-stmt stmtsep]\r\n",
    "correct_text": " leafref-specification = path-stmt stmtsep\r\n",
    "notes": "require-instance-stmt not allowed in leafref",
    "submit_date": "2011-08-28",
    "submitter_name": "Andy Bierman",
    "verifier_id": "106",
    "verifier_name": "Dan Romascanu",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3087",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   deviate-add-stmt    = deviate-keyword sep add-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              [units-stmt stmtsep]\r\n                              *(must-stmt stmtsep)\r\n                              *(unique-stmt stmtsep)\r\n                              [default-stmt stmtsep]\r\n                              [config-stmt stmtsep]\r\n                              [mandatory-stmt stmtsep]\r\n                              [min-elements-stmt stmtsep]\r\n                              [max-elements-stmt stmtsep]\r\n                          \"}\")\r\n\r\n   deviate-delete-stmt = deviate-keyword sep delete-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              [units-stmt stmtsep]\r\n                              *(must-stmt stmtsep)\r\n                              *(unique-stmt stmtsep)\r\n                              [default-stmt stmtsep]\r\n                          \"}\")\r\n\r\n   deviate-replace-stmt = deviate-keyword sep replace-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              [type-stmt stmtsep]\r\n                              [units-stmt stmtsep]\r\n                              [default-stmt stmtsep]\r\n                              [config-stmt stmtsep]\r\n                              [mandatory-stmt stmtsep]\r\n                              [min-elements-stmt stmtsep]\r\n                              [max-elements-stmt stmtsep]\r\n                          \"}\")\r\n\r\n",
    "correct_text": "  deviate-add-stmt    = deviate-keyword sep add-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              ;; these stmts can appear in any order\r\n                              [units-stmt stmtsep]\r\n                              *(must-stmt stmtsep)\r\n                              *(unique-stmt stmtsep)\r\n                              [default-stmt stmtsep]\r\n                              [config-stmt stmtsep]\r\n                              [mandatory-stmt stmtsep]\r\n                              [min-elements-stmt stmtsep]\r\n                              [max-elements-stmt stmtsep]\r\n                          \"}\")\r\n\r\n   deviate-delete-stmt = deviate-keyword sep delete-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              ;; these stmts can appear in any order\r\n                              [units-stmt stmtsep]\r\n                              *(must-stmt stmtsep)\r\n                              *(unique-stmt stmtsep)\r\n                              [default-stmt stmtsep]\r\n                          \"}\")\r\n\r\n   deviate-replace-stmt = deviate-keyword sep replace-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              ;; these stmts can appear in any order\r\n                              [type-stmt stmtsep]\r\n                              [units-stmt stmtsep]\r\n                              [default-stmt stmtsep]\r\n                              [config-stmt stmtsep]\r\n                              [mandatory-stmt stmtsep]\r\n                              [min-elements-stmt stmtsep]\r\n                              [max-elements-stmt stmtsep]\r\n                          \"}\")\r\n",
    "notes": "The comment \"these stmts can appear in any order\" is missing from these three statements.",
    "submit_date": "2012-01-09",
    "submitter_name": "Martin Bjorklund",
    "verifier_id": "106",
    "verifier_name": "Dan Romascanu",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3094",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   bit-stmt            = bit-keyword sep identifier-arg-str optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              ;; these stmts can appear in any order\r\n                              [position-stmt stmtsep]\r\n                              [status-stmt stmtsep]\r\n                              [description-stmt stmtsep]\r\n                              [reference-stmt stmtsep]\r\n                            \"}\"\r\n                          \"}\")",
    "correct_text": "   bit-stmt            = bit-keyword sep identifier-arg-str optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              ;; these stmts can appear in any order\r\n                              [position-stmt stmtsep]\r\n                              [status-stmt stmtsep]\r\n                              [description-stmt stmtsep]\r\n                              [reference-stmt stmtsep]\r\n                          \"}\")",
    "notes": "An extra \"}\"",
    "submit_date": "2012-01-20",
    "submitter_name": "Emmanuel Nataf",
    "verifier_id": "106",
    "verifier_name": "Dan Romascanu",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3288",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.12.1",
    "orig_text": "                 +--------------+---------+-------------+\r\n                 | substatement | section | cardinality |\r\n                 +--------------+---------+-------------+\r\n                 | augment      | 7.15    | 0..1        |\r\n                 | description  | 7.19.3  | 0..1        |\r\n                 | if-feature   | 7.18.2  | 0..n        |\r\n                 | refine       | 7.12.2  | 0..1        |\r\n                 | reference    | 7.19.4  | 0..1        |\r\n                 | status       | 7.19.2  | 0..1        |\r\n                 | when         | 7.19.5  | 0..1        |\r\n                 +--------------+---------+-------------+\r\n",
    "correct_text": "                 +--------------+---------+-------------+\r\n                 | substatement | section | cardinality |\r\n                 +--------------+---------+-------------+\r\n                 | augment      | 7.15    | 0..n        |\r\n                 | description  | 7.19.3  | 0..1        |\r\n                 | if-feature   | 7.18.2  | 0..n        |\r\n                 | refine       | 7.12.2  | 0..n        |\r\n                 | reference    | 7.19.4  | 0..1        |\r\n                 | status       | 7.19.2  | 0..1        |\r\n                 | when         | 7.19.5  | 0..1        |\r\n                 +--------------+---------+-------------+\r\n",
    "notes": "The cardinality for 'augment' and 'refine' is '0..n'",
    "submit_date": "2012-07-20",
    "submitter_name": "Martin Björklund",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3289",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   descendant-schema-nodeid =\r\n                         node-identifier\r\n                         absolute-schema-nodeid\r\n",
    "correct_text": "   descendant-schema-nodeid =\r\n                         node-identifier\r\n                         [absolute-schema-nodeid]\r\n",
    "notes": "A single node identifier is a valid descendant-schema-nodeid.",
    "submit_date": "2012-07-20",
    "submitter_name": "Martin Björklund",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3290",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   decimal64-specification = fraction-digits-stmt\r\n",
    "correct_text": "   decimal64-specification = ;; these stmts can appear in any order\r\n                             fraction-digits-stmt\r\n                             [range-stmt stmtsep]\r\n",
    "notes": "A decimal64 type can be restricted with the \"range\" statement.",
    "submit_date": "2012-07-20",
    "submitter_name": "Martin Björklund",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3470",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.16.2",
    "orig_text": "An identity MUST NOT reference itself, neither directly nor \r\nindirectly through a chain of other identities.",
    "correct_text": "The derivation of identities has the following properties:\r\n\r\no It is irreflexive, which means that an identity is not derived from \r\n  itself.\r\n\r\no It is transitive, which means that if identity B is derived from A\r\n  and C is derived from B, then C is also derived from A.",
    "notes": "The desired properties of identity derivation are not clearly stated. The discussion in the NETMOD mailing led to a general agreement that identity derivation is supposed to be irreflexive and transitive. These two properties together also eliminate the possibility of a circular derivation.",
    "submit_date": "2013-01-24",
    "submitter_name": "Ladislav Lhotka",
    "verifier_id": "2",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3493",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "value-stmt          = value-keyword sep integer-value stmtend",
    "correct_text": "value-stmt          = value-keyword sep integer-value-arg-str stmtend\r\n\r\ninteger-value-arg-str   = < a string that matches the rule\r\n                           integer-value-arg >\r\n\r\ninteger-value-arg       = integer-value",
    "notes": "Value statement should follow the rules for specifying YANG statement arguments. Current grammar does not allow a quoted string to appear as an argument to a value-stmt. Published IETF YANG modules exist which assume a quoted string may appear as an argument to this statement (eg. ietf-inet-types).",
    "submit_date": "2013-02-24",
    "submitter_name": "Jernej Tuljak",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3495",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   revision-stmt       = revision-keyword sep revision-date optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              [description-stmt stmtsep]\r\n                              [reference-stmt stmtsep]\r\n                          \"}\")",
    "correct_text": "   revision-stmt       = revision-keyword sep revision-date optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              ;; these stmts can appear in any order\r\n                              [description-stmt stmtsep]\r\n                              [reference-stmt stmtsep]\r\n                          \"}\")",
    "notes": "The comment \"these stmts can appear in any order\" is missing from this statement.",
    "submit_date": "2013-02-25",
    "submitter_name": "Jernej Tuljak",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3832",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.4.1",
    "orig_text": "               +------------------+---------+-------------+\r\n               | substatement     | section | cardinality |\r\n               +------------------+---------+-------------+\r\n               | bit              | 9.7.4   | 0..n        |\r\n               | enum             | 9.6.4   | 0..n        |\r\n               | length           | 9.4.4   | 0..1        |\r\n               | path             | 9.9.2   | 0..1        |\r\n               | pattern          | 9.4.6   | 0..n        |\r\n               | range            | 9.2.4   | 0..1        |\r\n               | require-instance | 9.13.2  | 0..1        |\r\n               | type             | 7.4     | 0..n        |\r\n               +------------------+---------+-------------+",
    "correct_text": "               +------------------+---------+-------------+\r\n               | substatement     | section | cardinality |\r\n               +------------------+---------+-------------+\r\n               | base             | 9.10.2  | 0..1        |\r\n               | bit              | 9.7.4   | 0..n        |\r\n               | enum             | 9.6.4   | 0..n        |\r\n               | fraction-digits  | 9.3.4   | 0..1        |\r\n               | length           | 9.4.4   | 0..1        |\r\n               | path             | 9.9.2   | 0..1        |\r\n               | pattern          | 9.4.6   | 0..n        |\r\n               | range            | 9.2.4   | 0..1        |\r\n               | require-instance | 9.13.2  | 0..1        |\r\n               | type             | 7.4     | 0..n        |\r\n               +------------------+---------+-------------+",
    "notes": "9.3.4. states 'The \"fraction-digits\" statement, which is a substatement to the \"type\" statement' but 7.4.1 does not list \"fraction-digits\" as one of the substatements of \"type\".\r\n\r\n9.10.2. states 'The \"base\" statement, which is a substatement to the \"type\" statement' but 7.4.1 does not list \"base\" as one of the substatements of \"type\".",
    "submit_date": "2013-12-12",
    "submitter_name": "Chris LaBauve",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3834",
    "doc-id": "RFC6020",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "9.7.5",
    "orig_text": "    Given the following leaf:\r\n\r\n     leaf mybits {\r\n         type bits {\r\n             bit disable-nagle {\r\n                 position 0;\r\n             }\r\n             bit auto-sense-speed {\r\n                 position 1;\r\n             }\r\n             bit 10-Mb-only {\r\n                 position 2;\r\n             }\r\n         }\r\n         default \"auto-sense-speed\";\r\n     }\r\n\r\n   The lexical representation of this leaf with bit values disable-nagle\r\n   and 10-Mb-only set would be:\r\n\r\n     <mybits>disable-nagle 10-Mb-only</mybits>",
    "correct_text": "    Given the following leaf:\r\n\r\n     leaf mybits {\r\n         type bits {\r\n             bit disable-nagle {\r\n                 position 0;\r\n             }\r\n             bit auto-sense-speed {\r\n                 position 1;\r\n             }\r\n             bit ten-Mb-only {\r\n                 position 2;\r\n             }\r\n         }\r\n         default \"auto-sense-speed\";\r\n     }\r\n\r\n   The lexical representation of this leaf with bit values disable-nagle\r\n   and ten-Mb-only set would be:\r\n\r\n     <mybits>disable-nagle ten-Mb-only</mybits>",
    "notes": "9.7.5. Shows a usage example of the bit statement wherein the identifier '10-Mb-only' begins with a digit, which contradicts the ABNF rule 'identifier' (identifier must begin with [_A-Za-z])",
    "submit_date": "2013-12-12",
    "submitter_name": "Chris LaBauve",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3835",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   type-body-stmts     = numerical-restrictions /\r\n                         decimal64-specification /\r\n                         string-restrictions /\r\n                         enum-specification /\r\n                         leafref-specification /\r\n                         identityref-specification /\r\n                         instance-identifier-specification /\r\n                         bits-specification /\r\n                         union-specification",
    "correct_text": "   type-body-stmts     = numerical-restrictions /\r\n                         decimal64-specification /\r\n                         string-restrictions /\r\n                         enum-specification /\r\n                         leafref-specification /\r\n                         identityref-specification /\r\n                         instance-identifier-specification /\r\n                         bits-specification /\r\n                         union-specification / \r\n                         binary-specification\r\n\r\n   binary-specification = [length-stmt stmtsep]",
    "notes": "Grammar rule 'type-body-stmts' does not provide for the case when type is 'binary'; this would be a rule allowing 0 or 1 length substatements according to 9.8.1.",
    "submit_date": "2013-12-12",
    "submitter_name": "Chris LaBauve",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3842",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "9.4.4",
    "orig_text": "It is used to restrict the built-in type \"string\", or types derived\r\nfrom \"string\".",
    "correct_text": "It is used to restrict the built-in types \"string\" and \"binary\", or\r\ntypes derived from them.",
    "notes": "The \"length\" statement can also restrict the \"binary\" type. See also erratum 3835.",
    "submit_date": "2013-12-13",
    "submitter_name": "Ladislav Lhotka",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3871",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "9.6.4.2",
    "orig_text": "If a value is not specified, then one will be automatically assigned.\r\nIf the \"enum\" substatement is the first one defined, the assigned\r\nvalue is zero (0); otherwise, the assigned value is one greater than\r\nthe current highest enum value.",
    "correct_text": "If a value is not specified, then one will be automatically assigned.\r\nIf the \"enum\" substatement is the first one defined, the assigned\r\nvalue is zero (0); otherwise, the assigned value is one greater than\r\nthe current highest enum value (that is, the highest enum value,\r\nimplicit or explicit, prior to the current \"enum\" substatement in\r\nthe parent \"type\" statement).",
    "notes": "Clarification that 'current highest' does not refer to all enum values, implicit or explicit, in the parent \"type\" statement but only to those that precede the current \"enum\" substatement.",
    "submit_date": "2014-01-23",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3872",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "9.7.4.2",
    "orig_text": "If a bit position is not specified, then one will be automatically\r\nassigned. If the \"bit\" substatement is the first one defined, the\r\nassigned value is zero (0); otherwise, the assigned value is one\r\ngreater than the current highest bit position.",
    "correct_text": "If a bit position is not specified, then one will be automatically\r\nassigned. If the \"bit\" substatement is the first one defined, the\r\nassigned value is zero (0); otherwise, the assigned value is one\r\ngreater than the current highest bit position (that is, the\r\nhighest bit position, implicit or explicit, prior to the current\r\n\"bit\" substatement in the parent \"type\" statement).",
    "notes": "Clarification that 'current highest' does not refer to all bit positions, implicit or explicit, in the parent \"type\" statement but only to those that precede the current \"bit\" substatement.",
    "submit_date": "2014-01-23",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4282",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "unknown-statement   = prefix \":\" identifier [sep string] optsep\r\n                      (\";\" / \"{\" *unknown-statement2 \"}\") \r\nunknown-statement2   = [prefix \":\"] identifier [sep string] optsep\r\n                      (\";\" / \"{\" *unknown-statement2 \"}\") \r\n",
    "correct_text": "unknown-statement   = prefix \":\" identifier [sep string] optsep\r\n                    (\";\" / \"{\" optsep *(unknown-statement2 optsep) \"}\")\r\nunknown-statement2   = [prefix \":\"] identifier [sep string] optsep\r\n                     (\";\" / \"{\" optsep *(unknown-statement2 optsep) \"}\")\r\n",
    "notes": null,
    "submit_date": "2015-02-27",
    "submitter_name": "Cesar Crusius",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4283",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "stmtend = \";\" / \"{\" *unknown_statement \"}\"",
    "correct_text": "stmtend = optsep (\";\" / \"{\" stmtsep \"}\") stmtsep",
    "notes": "Note1: As specified, there are no spaces allowed between the unknown statements, and between the braces and the unknown statements.\r\n\r\nNotes2:\r\nThe original \"stmtend\" rule does not allow for spaces between unknown\r\nstatements, which requires the \"*unknown-statement\" fix in \"stmtend\".\r\n\r\nThere is at least one place (\"revision-date-stmt\") where \"stmtend\" end\r\nis not preceded by \"optsep\". Instead of fixing those rules, it is better to\r\ninclude \"optsep\" in \"stmtend\" itself, since it should always be present.\r\n\r\nOn the same note, almost all \"stmtend\" uses are followed by a\r\n\"stmtsep\", and any cases where that does not happen are probably an error, so again it is better to make that explicit in the \"stmtend\" rule itself.\r\n\r\nWith the change in this errata, there will be a lot of rules in the\r\nABNF with redundant (but not technically incorrect) \"optsep\" and \"stmtsep\" parts, as for example\r\n\r\n      module-header-stmts = ;; these stmts can appear in any order\r\n                            [yang-version-stmt stmtsep]\r\n                            namespace-stmt stmtsep\r\n                            prefix-stmt stmtsep\r\n\r\n      namespace-stmt = namespace-keyword sep uri-str optsep stmtend\r\n\r\nwhich now could be replaced with\r\n\r\n      module-header-stmts = ;; these stmts can appear in any order\r\n                            [yang-version-stmt]\r\n                            namespace-stmt\r\n                            prefix-stmt\r\n\r\n      namespace-stmt = namespace-keyword sep uri-str stmtend\r\n\r\nThese changes should probably be incorporated into the next ABNF\r\nrevision.",
    "submit_date": "2015-02-28",
    "submitter_name": "Cesar Crusius",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4285",
    "doc-id": "RFC6020",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "revision-date-stmt = revision-date-keyword sep revision-date stmtend",
    "correct_text": "revision-date-stmt =\r\n    revision-date-keyword sep revision-date optsep stmtend",
    "notes": "Allow spaces between the date string and the statement's end.\n --VERIFIER NOTES-- \nThis errata is now covered by the updated errata 4283",
    "submit_date": "2015-03-02",
    "submitter_name": "Cesar Crusius",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4291",
    "doc-id": "RFC6020",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "12",
    "orig_text": "   deviate-not-supported-stmt =\r\n                         deviate-keyword sep\r\n                         not-supported-keyword optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                          \"}\") \r\n",
    "correct_text": "   deviate-not-supported-stmt =\r\n                         deviate-keyword sep\r\n                         not-supported-keyword\r\n                         stmtend\r\n",
    "notes": "The rule is not incorrect, but unnecessarily replicates 'stmtend' within it.\n --VERIFIER NOTES-- \nThis is already fixed in draft-ietf-netmod-rfc6020bis-04.\r\n\r\nSince this is not really a bug, I don't know if it is worth the effort\r\nto accept this errata.\r\n",
    "submit_date": "2015-03-07",
    "submitter_name": "Cesar Crusius",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4292",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12",
    "orig_text": "   type-stmt           = type-keyword sep identifier-ref-arg-str optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              type-body-stmts\r\n                          \"}\")\r\n",
    "correct_text": "   type-stmt           = type-keyword sep identifier-ref-arg-str optsep\r\n                         (\";\" /\r\n                          \"{\" stmtsep\r\n                              [ type-body-stmts ]\r\n                          \"}\")\r\n",
    "notes": "Every statement that can end with a single ';' should also accept ending with '{ stmtsep }' (that is what the 'stmtend' rule implies). This is the only instance I found so far of a statement that does not follow this rule.\r\n\r\nThe other option would be to replace all \";\" in rules like that with 'stmtend'.",
    "submit_date": "2015-03-07",
    "submitter_name": "Cesar Crusius",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4911",
    "doc-id": "RFC6020",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "6.1.3",
    "orig_text": "Within a double-quoted string (enclosed within \" \"), a backslash\r\ncharacter introduces a special character, which depends on the\r\ncharacter that immediately follows the backslash:\r\n\r\n \\n      new line\r\n \\t      a tab character\r\n \\\"      a double quote\r\n \\\\      a single backslash\r\n",
    "correct_text": "Within a double-quoted string (enclosed within \" \"), a backslash\r\ncharacter introduces a special character, which depends on the\r\ncharacter that immediately follows the backslash:\r\n\r\n \\n      new line\r\n \\t      a tab character\r\n \\\"      a double quote\r\n \\\\      a single backslash\r\n\r\n\r\nThe interpretation of any character other than the ones listed above\r\nfollowing a backslash is undefined. Authors are advised to avoid using\r\nsuch backslash sequences in double-quoted strings in their YANG\r\nmodules.",
    "notes": "The text doesn't state whether other characters may follow the backslash, and if yes, what it means. Existing implementations have used three approaches:\r\n\r\n1. report an error if another character follows the backslash\r\n2. keep only the character following the backslash, i.e., for example, \"\\x\" is the same as \"x\".\r\n3. keep both the backslash and the character following it.\r\n\r\nThis ambiguity is undesirable and YANG 1.1 [RFC 7950] explicitly adopted option #1. However, many modules are still being written using YANG version 1.0, so it is important to clarify this issue in RFC 6020 as well.",
    "submit_date": "2017-01-18",
    "submitter_name": "Ladislav Lhotka",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5272",
    "doc-id": "RFC6020",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "7.18.1",
    "orig_text": "   In order for a device to implement a feature that is dependent on any\r\n   other features (i.e., the feature has one or more \"if-feature\" sub-\r\n   statements), the device MUST also implement all the dependant\r\n   features.",
    "correct_text": "   In order for a device to implement a feature that is dependent on any\r\n   other features (i.e. the feature is a sub-statement of another \r\n   \"if-feature\" statement), the device MUST also implement all the \r\n   dependent features.",
    "notes": "The direction of the dependency is stated backwards.\r\nConsider for example:\r\n\r\nif-feature aaa;\r\n    statements ...;\r\n    if-feature bbb;\r\n\r\nThis should allow feature aaa to exist without feature bbb.\r\nbbb should depend on aaa, but aaa should not depend on bbb\n --VERIFIER NOTES-- \nThe current text is correct, according to Kent Watsen\r\n\r\n",
    "submit_date": "2018-03-02",
    "submitter_name": "Bob Harold",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  }
]
