[
  {
    "errata_id": 998,
    "doc-id": "RFC4941",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 6,
    "orig_text": "The second paragraph of Section 6 refers to the Source Address\r\nSelection API Extension without giving any reference.  The related\r\nInternet-Draft in the meantime has been published as RFC 5014,\r\nless than two weeks after RFC 4941.\r\nIt would have been useful to place a pointer to that work-in-progress\r\n(or the RFC, if publication were coordinated).\r\n",
    "correct_text": "",
    "notes": "",
    "submit_date": "2007-10-12",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3239,
    "doc-id": "RFC4941",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "On page 9, the 2nd numbered bullet in Section 3 says:\r\n\r\n   2.  [...]\r\n       Deprecated address can continue to be used for already\r\n       established connections, but are not used to initiate new\r\n       connections.  [...]",
    "correct_text": "   2.  [...]\r\n       Deprecated addresses can continue to be used for already\r\n       established connections, but are not used to initiate new\r\n       connections.  [...]",
    "notes": "",
    "submit_date": "2007-10-12",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3240,
    "doc-id": "RFC4941",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3.3,
    "orig_text": "   4.  When creating a temporary address, the lifetime values MUST be\r\n       derived from the corresponding prefix as follows:\r\n\r\n       *  Its Valid Lifetime is the lower of the Valid Lifetime of the\r\n          public address or TEMP_VALID_LIFETIME.\r\n\r\n       *  Its Preferred Lifetime is the lower of the Preferred Lifetime\r\n          of the public address or TEMP_PREFERRED_LIFETIME -\r\n          DESYNC_FACTOR.\r\n",
    "correct_text": "   4.  When creating a temporary address, the lifetime values MUST be\r\n       derived from the corresponding prefix as follows:\r\n\r\n       *  Its Valid Lifetime is the lower of the Valid Lifetime of the\r\n          prefix and TEMP_VALID_LIFETIME.\r\n\r\n       *  Its Preferred Lifetime is the lower of the Preferred Lifetime\r\n          of the prefix and TEMP_PREFERRED_LIFETIME - DESYNC_FACTOR.",
    "notes": "The language of RFC 4941 has been 'upgraded' from RFC 3041 by\r\nreplacing the confusing language related to \"global addresses\"\r\nby correctly speaking about \"prefixes\" when referring to\r\ninformation obtained in RA Prefix Options.\r\nUnfortunately, in one place this 'upgrade' has been missed.\r\n",
    "submit_date": "2007-10-12",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3241,
    "doc-id": "RFC4941",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 3.4,
    "orig_text": "   When a temporary address becomes deprecated, a new one MUST be\r\n   generated.  This is done by repeating the actions described in\r\n   Section 3.3, starting at step 3).  [...]",
    "correct_text": "   When a temporary address becomes deprecated, a new one MUST be\r\n   generated.  This is done by repeating the actions described in\r\n   Section 3.3, starting at step 4).  [...]",
    "notes": "The bullets in Section 3.3 have been renumbered from RFC 3041,\r\nnecessitated by the insertion of a new bullet as #2.\r\nIn an internal reference in Section 3.4, this change has not been\r\nreflected accordingly.",
    "submit_date": "2007-10-12",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3242,
    "doc-id": "RFC4941",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 3.5,
    "orig_text": "   The frequency at which temporary addresses changes depends on [...]",
    "correct_text": "   The frequency at which temporary addresses change depends on [...]\r\n",
    "notes": "",
    "submit_date": "2007-10-12",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3243,
    "doc-id": "RFC4941",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 3.6,
    "orig_text": "                                       [...].  Note that the pre-prefix\r\n   setting can be applied at any granularity, and not necessarily on a\r\n   per-subnet basis.",
    "correct_text": "                                       [...].  Note that the per-prefix\r\n   setting can be applied at any granularity, and not necessarily on a\r\n   per-subnet basis.",
    "notes": "",
    "submit_date": "2007-10-12",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4404,
    "doc-id": "RFC4941",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": 2.3,
    "orig_text": "The way PPP is used today, however, PPP servers\r\ntypically unilaterally inform the client what address they are to use\r\n(i.e., the client doesn't generate one on its own).  This practice,\r\nif continued in IPv6, would avoid the concerns that are the focus of\r\nthis document.",
    "correct_text": "In contrast to LAN clients, the way PPP is used today, however, does\r\nnot allow the client to freely and unilaterally change its own\r\ninterface identifier. PPP servers also do not unilaterally inform the\r\nclient what 128-bit address to use. In the same manner as for LAN\r\nconnected clients (without PPP), a PPP client generates its\r\nglobal-scope IPv6 address from the Interface-Identifier part and the\r\nPrefix part. The client obtains a prefix from the PPP server in the\r\nsame way as LAN clients do, i.e. via Neighbor Discovery Protocol.\r\nHowever, an interface identifier of a PPP client MUST be negotiated\r\nwith the PPP server via IPv6CP protocol (Interface-Identifier option).\r\nOnly then, after IPv6CP was successfully negotiated between the PPP\r\nclient and the PPP server, the PPP client can generate and assign its\r\nindividual global IPv6 address compounded from the negotiated\r\ninterface identifier and the obtained prefix.\r\nIn order to change the old negotiated interface identifier later in the\r\nsame PPP session, the client MUST initiate a new IPv6CP negotiation\r\nwith the PPP server, proposing a new client's interface identifier.\r\n",
    "notes": "Such an extensive additional explanation of PPP specifics regarding changing of interface identifier on PPP clients is very important for both PPP servers manufacturers and PPP slients manufacturers, in order to define a method for legal changing of interface IDs on PPP clients (according to the  recommendations of this RFC 4941) and to correctly support of a changed clientâ€™s interface ID on the PPP Server (for correct IPv6 routes in the routing table et al.).\r\nFailure to comply with these PPP specifics and requirements can lead to misinterpretation, fault implementations, and then to critical PPP sessions issues in real operation!",
    "submit_date": "2015-06-29",
    "submitter_name": "Jewgenij Bytschkow",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4594,
    "doc-id": "RFC4941",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 3.2,
    "orig_text": null,
    "correct_text": null,
    "notes": "The algorithm for interface identifier generation is flawed: An adversary is able to infer a client's history value from a sequence of observed addresses and is able to infer all future interface identifiers of this certain client annihilating the extension's intended purpose of privacy protection.\r\n\r\nFor a detailed explanation on the algorithm's drawbacks, please see my paper:\r\nhttps://www.sba-research.org/wp-content/uploads/publications/Ullrich2015Privacy.pdf\n --VERIFIER NOTES-- \n The issue raised goes beyond a fix via the errata system. This should be raised in the appropriate working group within the IETF.  ",
    "submit_date": "2016-01-14",
    "submitter_name": "Johanna Ullrich",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4763,
    "doc-id": "RFC4941",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 5,
    "orig_text": "DESYNC_FACTOR -- A random value within the range 0 -\r\n   MAX_DESYNC_FACTOR.  It is computed once at system start (rather than\r\n   each time it is used) and must never be greater than\r\n   (TEMP_VALID_LIFETIME - REGEN_ADVANCE).\r\n",
    "correct_text": "DESYNC_FACTOR -- A random value within the range 0 -\r\n   MAX_DESYNC_FACTOR.  It is computed once at system start (rather than\r\n   each time it is used) and must never be greater than\r\n   (TEMP_PREFERRED_LIFETIME - REGEN_ADVANCE).\r\n",
    "notes": "At various places in the RFC, DESYNC_FACTOR is used in a calculation like (TEMP_PREFERRED_LIFETIME - DESYNC_FACTOR) or (TEMP_PREFERRED_LIFETIME - REGEN_ADVANCE - DESYNC_FACTOR). It needs to be smaller than (TEMP_PREFERRED_LIFETIME - REGEN_ADVANCE) for the result of these calculations to be larger than zero. It's never used in a calculation together with TEMP_VALID_LIFETIME.",
    "submit_date": "2016-08-04",
    "submitter_name": "Jiri Bohac",
    "verifier_id": 165,
    "verifier_name": "Erik Kline",
    "update_date": "2021-01-27 23:13:24"
  },
  {
    "errata_id": 5182,
    "doc-id": "RFC4941",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 3.6,
    "orig_text": "   Devices implementing this specification MUST provide a way for the\r\n   end user to explicitly enable or disable the use of temporary\r\n   addresses.",
    "correct_text": "   Devices implementing this specification SHOULD provide a way for the\r\n   end user to explicitly enable or disable the use of temporary\r\n   addresses.",
    "notes": "Allowing users to disable privacy features is not something that should be mandatory.\n --VERIFIER NOTES-- \nIt would be bad form, I suspect, for me to verify my own erratum.  =)\r\n\r\nAs 4941bis is in the works, I'll Reject this and consider whether to (re)submit an erratum for the new document once published.",
    "submit_date": "2017-11-13",
    "submitter_name": "Erik Kline",
    "verifier_id": 165,
    "verifier_name": "Erik Kline",
    "update_date": "2021-01-27 23:23:03"
  }
]
