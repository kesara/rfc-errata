[
  {
    "errata_id": 4076,
    "doc-id": "RFC6991",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 3,
    "orig_text": "In date-and-time typedef description-stmt\r\n\r\n      (c) The canonical format (see below) of data-and-time values\r\n",
    "correct_text": "      (c) The canonical format (see below) of date-and-time values\r\n",
    "notes": "date-and-time spelled data-and-time",
    "submit_date": "2014-08-09",
    "submitter_name": "Andy Bierman",
    "verifier_id": 132,
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5105,
    "doc-id": "RFC6991",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 3,
    "orig_text": "A schema node of this type will be set to zero (0) on creation\r\nand will thereafter increase monotonically until it reaches\r\na maximum value of 2^32-1 (4294967295 decimal), when it\r\nwraps around and starts increasing again from zero.",
    "correct_text": "A leaf instance of this type will be set to zero (0) on creation\r\nand will thereafter increase monotonically until it reaches\r\na maximum value of 2^32-1 (4294967295 decimal), when it\r\nwraps around and starts increasing again from zero.",
    "notes": "In a number of descriptions in both ietf-yang-types and ietf-inet-types, the term \"schema node\" is used incorrectly in places where \"leaf instance\" or \"instance of a leaf\" should be used instead. However, not all occurences of \"schema node\" are wrong: schema nodes just have to be distinguished from nodes in an instance data tree.",
    "submit_date": "2017-09-01",
    "submitter_name": "Ladislav Lhotka",
    "verifier_id": 132,
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 7062,
    "doc-id": "RFC6991",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 4,
    "orig_text": "     typedef ipv4-address-no-zone {\r\n       type inet:ipv4-address {\r\n         pattern '[0-9\\.]*';\r\n       }\r\n       description\r\n         \"An IPv4 address without a zone index.  This type, derived from\r\n          ipv4-address, may be used in situations where the zone is\r\n          known from the context and hence no zone index is needed.\";\r\n     }",
    "correct_text": "     typedef ipv4-address-no-zone {\r\n       type inet:ipv4-address {\r\n         pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'\r\n         +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\r\n       }\r\n       description\r\n         \"An IPv4 address without a zone index.  This type, derived from\r\n          ipv4-address, may be used in situations where the zone is\r\n          known from the context and hence no zone index is needed.\";\r\n     }",
    "notes": "As per RFC 4001, dotted decimal format of IPv4 address is typically written in decimal digits, formatted as four 8-bit fields that are separated by periods.\n --VERIFIER NOTES-- \nSince the ipv4-address-no-zone type is derived from the ipv4-address\r\ntype and the ipv4-address type has the detailed pattern, there is no\r\nneed to repeat the details. An ipv4-address value has to satisfy both\r\nthe ipv4-address-no-zone pattern and the ipv4-address pattern.\r\n",
    "submit_date": "2022-07-29",
    "submitter_name": "Mazhar Rana",
    "verifier_id": 166,
    "verifier_name": "Rob Wilton",
    "update_date": "2022-07-29 15:43:07"
  }
]
