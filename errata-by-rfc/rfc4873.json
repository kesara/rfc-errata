[
  {
    "errata_id": "1797",
    "doc-id": "RFC4873",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "5.2",
    "orig_text": "The collection of SRROs is controlled via the\r\nsegment-recording-desired flag in the SESSION_ATTRIBUTE object.  This\r\nflag MAY be set even when SEROs are not used.",
    "correct_text": "   The collection of SRROs is controlled via the\r\n   presence of an RRO in the message being processed.",
    "notes": "No request was made to IANA to assign a value for the segment-recording-desired flag.\r\n\r\n  As reported in the Errata, the segment-recording-desired flag is\r\n  unassigned.  The flag is unassigned and therefore cannot be used.\r\n  As agreed to on the CCAMP mail list and the Stockholm (IETF 75)\r\n  working group meeting the the collection of SRROs should be\r\n  controlled based on the presence of an RRO in the message being\r\n  processed.  That is, the segment-recording-desired flag should be\r\n  considered to be set when an RRO is present in the message being\r\n  processed.\r\n",
    "submit_date": "2009-06-23",
    "submitter_name": "David McWalter",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "935",
    "doc-id": "RFC4873",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "",
    "orig_text": "Section 2\r\n\r\nNear the end of the second-to-last paragraph on page 5, RFC 4873 says:\r\n\r\n                                                        [...].  The\r\n   branch node of a recovery LSP creates an SRRO by copying the RRO from\r\n|  the Resv message of associated recovery LSP into a new SRRO object.\r\n   Any SRROs present in the recovery LSP's Resv message are also copied.\r\n\r\nIt should say:\r\n                                                        [...].  The\r\n   branch node of a recovery LSP creates an SRRO by copying the RRO from\r\n|  the Resv message of the associated recovery LSP into a new SRRO\r\n   object.  Any SRROs present in the recovery LSP's Resv message are\r\n   also copied.\r\n\r\nRationale:  missing article.\r\n\r\n\r\nSection 3.2\r\n\r\nOn page 7, the last sentence of Section 3.2 says:\r\n\r\n|              [...].  This object MUST NOT be used when association is\r\n   made according to the methods defined in [RFC4090].\r\n\r\nIt should say:\r\n\r\n|              [...].  This object MUST NOT be used when an association\r\n   is made according to the methods defined in [RFC4090].\r\n\r\nRationale:  missing article.\r\n\r\n\r\nSection 4.1\r\n\r\nOn page 8, Section 4.1 says:\r\n\r\n                   [...].  This includes the definition of subobjects\r\n|  defined for EXPLICIT_ROUTE object.  The class of the\r\n   SECONDARY_EXPLICIT_ROUTE object is 200 (of the form 11bbbbbb).\r\n\r\nIt should say:\r\n\r\n                   [...].  This includes the definition of subobjects\r\n|  defined for the EXPLICIT_ROUTE object.  The class of the\r\n   SECONDARY_EXPLICIT_ROUTE object is 200 (of the form 11bbbbbb).\r\n\r\nRationale:  missing article.\r\n\r\n\r\nSection 4.2\r\n\r\nIn the second paragraph on page 10, Section 4.2 says:\r\n\r\n|  At a branch node, the SERO, together with the Path message of LSP\r\n   being recovered, provides the information to create the recovery LSP.\r\n   [...]\r\n\r\nIt should say:\r\n\r\n|  At a branch node, the SERO, together with the Path message of the LSP\r\n   being recovered, provides the information to create the recovery LSP.\r\n   [...]\r\n\r\nRationale:  missing article.\r\n\r\n\r\nSection 4.2.1\r\n\r\nNear the bottom of page 10, the first paragraph of Section 4.2.1 says:\r\n\r\n                                                          [...].  The\r\n|  processing of these events depend on a number of factors.\r\n\r\nIt should say:\r\n                                                          [...].  The\r\n|  processing of these events depends on a number of factors.\r\n                                    ^\r\nRationale:  grammar.\r\n\r\n\r\nSection 4.3.2\r\n\r\nThe second sentence of Section 4.3.2 says:\r\n\r\n|                      [...].  When a branch or merge node receives\r\n   notification of an LSP failure and it is unable to recover from that\r\n   failure, [...]\r\n\r\nIt should say:\r\n|                      [...].  When a branch or merge node receives a\r\n   notification of an LSP failure and it is unable to recover from that\r\n   failure, [...]\r\n\r\nRationale:  missing article.\r\n\r\n\r\nSection 6.2\r\n\r\nThe last sentence of the third paragraph of Section 6.2,\r\non mid-page 17, says:\r\n\r\n                                                             [...].  The\r\n   dynamically identified information, together with the Path message of\r\n|  LSP being recovered, is used to create the recovery LSP.\r\n\r\nIt should say:\r\n                                                             [...].  The\r\n   dynamically identified information, together with the Path message of\r\n|  the LSP being recovered, is used to create the recovery LSP.\r\n\r\nRationale:  missing article.\r\n\r\n",
    "correct_text": "[see above]",
    "notes": "editorial nits.\r\n\r\nfrom pending",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "936",
    "doc-id": "RFC4873",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.2.3",
    "orig_text": "  In general, objects in a recovery LSP are created based on the\r\n  corresponding objects in the LSP being protected.  [...]",
    "correct_text": "[not submitted]",
    "notes": "IMHO makes use of too sluggish language; talking about\r\n\"objects in a recovery LSP\" or \"objects in the LSP being protected\"\r\nshould be avoided because it messes up the essentials of [G]MPLS,\r\nthe separation of the data plane carrying arbitrary labeled data\r\npackets and the control plane (with RSVP-TE carrying the TE objects).\r\nUnfortunately, similar language recurs at other places in the RFC;\r\nfor the sake of brevity, I refrain from listing all those instances\r\nbelow.\r\n\r\nI would appreciate very much future derived and/or related work to\r\nreturn to a more precise language.\r\n\r\nfrom pending\n --VERIFIER NOTES-- \nThere has long been a conflation of \"LSP\" to mean the data plane entity (connection) and the also the control plane state necessary to maintain the data plane entity. The body of people working in the MPLS and CCAMP working groups are used to this and can readily deduce which meaning is intended. Additional text is added when the author believes it is important to make an explicity distinction.\r\n\r\nSince this Erratum is not specifically actionable on this RFC, it is rejected.",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "937",
    "doc-id": "RFC4873",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.2.4",
    "orig_text": "   Recovery LSP removal follows standard procedures defined in [RFC3209]\r\n   and [RFC3473].  This includes with and without setting the\r\n   administrative status.",
    "correct_text": "   Recovery LSP removal follows standard procedures defined in [RFC3209]\r\n   and [RFC3473].  These procedures include LSP removal with and without\r\n   setting the administrative status flags described in Section 7 of\r\n   [RFC3473].",
    "notes": "",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "939",
    "doc-id": "RFC4873",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.3.1",
    "orig_text": "   o new text:\r\n      If a message contains multiple NOTIFY_REQUEST objects, only the\r\n      first object used is in notification.  Subsequent NOTIFY_REQUEST\r\n      objects MUST be propagated in the order received.",
    "correct_text": "   o new text:\r\n      If a message contains multiple NOTIFY_REQUEST objects, only the\r\n      first object is used to supply the information used to build and\r\n      send a notification. Subsequent NOTIFY_REQUEST objects MUST be\r\n      propagated in the order received.",
    "notes": "The original proposed text (below) is rejected because the presence of the NOTIFY_REQUEST object is not a trigger.\r\n   o new text:\r\n      If a message contains multiple NOTIFY_REQUEST objects, only the\r\n      first object is used to potentially trigger a notification.\r\n      Subsequent NOTIFY_REQUEST objects MUST be propagated in the order\r\n      received.",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "941",
    "doc-id": "RFC4873",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "5.1",
    "orig_text": "   The format of a SECONDARY_RECORD_ROUTE object is the same as a\r\n   RECORD_ROUTE object, Class number 21.  This includes the definition\r\n   of subobjects defined for RECORD_ROUTE object.  The class of the\r\n   SECONDARY_RECORD_ROUTE object is 201 (of the form 11bbbbbb).",
    "correct_text": "   The format of a SECONDARY_RECORD_ROUTE object is the same as that of\r\n   a RECORD_ROUTE object, Class number 21.  This includes the definition\r\n   of subobjects defined for the RECORD_ROUTE object.  The class of the\r\n   SECONDARY_RECORD_ROUTE object is 201 (of the form 11bbbbbb).",
    "notes": "The proposed text change (below) is rejected in favor of more correct English.\r\n   The format of a SECONDARY_RECORD_ROUTE object is the same as for a\r\n   RECORD_ROUTE object, Class number 21.  This includes the definition\r\n   of subobjects defined for the RECORD_ROUTE object.  The class of the\r\n   SECONDARY_RECORD_ROUTE object is 201 (of the form 11bbbbbb).",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "943",
    "doc-id": "RFC4873",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "6.1",
    "orig_text": "   LSP Segment Recovery Flags are carried in the PROTECTION object of\r\n   the same C-Type defined in [RFC4872].  The format of the flags are:",
    "correct_text": "   LSP Segment Recovery Flags are carried in the PROTECTION object of\r\n   C-Type 2 defined in [RFC4872].  The format of the modifed PROTECTION\r\n   object carrying these flags is:",
    "notes": "The subsequent diagram depicts the full object, not only the (new) flags.",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "944",
    "doc-id": "RFC4873",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "",
    "orig_text": "The rules given in the two paragraphs on top of page 18,\r\n\r\n   The resulting Path message is used to create the recovery LSP.  While\r\n   the recovery LSP exists, the PROTECTION object in the original Path\r\n   message  (unless overridden by local policy) MUST also be updated\r\n   with the In-Place bit set (1).  From this point on, Standard Path\r\n   message processing is used in processing the resulting and original\r\n   Path messages.\r\n\r\n   The merge node of a dynamically controlled recovery LSP SHOULD reset\r\n   (0) the In-Place bit in the PROTECTION object of the outgoing Path\r\n   message associated with the terminated recovery LSP.\r\n\r\napparently make dynamic 'overlapping' segment protection impossible.\r\n\r\nOne scenario that came to my mind was node failure protection\r\nenvisioned to be implemented by recovery LSPs for the primary LSP\r\nA-B-C-D-E-F-G, depicted as follows:\r\n\r\n                  H ----- I   J ----- K\r\n                 /         \\ /         \\\r\n          A --- B --- C --- D --- E --- F --- G\r\n           \\         / \\         / \\         /\r\n            L ----- M   N ----- O   P ----- Q\r\n\r\nThe specified rules apparently inhibit the setup of such overlapping\r\nsegment protection LSPs.  Has this been intended ?",
    "correct_text": "[see above]",
    "notes": "from pending\n --VERIFIER NOTES-- \nThis is not an Erratum. If there is technical discussion to be had about the function enabled or prohibited by the specification, and the requirements for the provision of services in a network, these need to be taken to the CCAMP mailing list and might result in a revision to the RFC or a new draft.",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "945",
    "doc-id": "RFC4873",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "7",
    "orig_text": "   This section presents the RSVP message related formats as modified by\r\n   this document.  Where they differ, formats for unidirectional LSPs\r\n   are presented separately from bidirectional LSPs.",
    "correct_text": "   This section presents the RSVP-TE message related formats as modified\r\n   by this document.  Where they differ, formats for unidirectional LSPs\r\n   are presented separately from bidirectional LSPs.",
    "notes": "Does not confine the scope of the specification as it\r\nwould be appropriate.\r\n\r\n  'Classic' RSVP (RFC 2205) is neither covered nor affected by the\r\n  subsequently specified (extended) message formats.\r\n\r\nfrom pending\n --VERIFIER NOTES-- \nAlthough it is true that there is some common distinction between \"classic\" RSVP and RSVP-TE, the IP protocol number is the same, and the message numbers (and registry) are the same. In essence, there is just one protocol with two uses. ",
    "submit_date": "2007-05-08",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "119",
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  }
]
