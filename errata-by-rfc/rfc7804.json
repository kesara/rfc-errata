[
  {
    "errata_id": 5496,
    "doc-id": "RFC7804",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": 2.2,
    "orig_text": "   o  Normalize(str): Apply the Preparation and Enforcement steps\r\n      according to the OpaqueString profile (see [RFC7613]) to a UTF-8\r\n      [RFC3629] encoded \"str\".  The resulting string is also in UTF-8.\r\n      Note that implementations MUST either implement OpaqueString\r\n      profile operations from [RFC7613] or disallow the use of non\r\n      US-ASCII Unicode codepoints in \"str\".  The latter is a particular\r\n      case of compliance with [RFC7613].\r\n",
    "correct_text": "   o  Normalize(str): Apply the Preparation and Enforcement steps\r\n      according to the OpaqueString profile (see [RFC7613]) to a UTF-8\r\n      [RFC3629] encoded \"str\".  The resulting string is also in UTF-8.\r\n      Note that implementations MUST either implement OpaqueString\r\n      profile operations from [RFC7613] or disallow the use of Unicode \r\n      codepoints not ranging from U+0020 to U+007E in \"str\".  The latter\r\n      is a particular case of compliance with [RFC7613].\r\n",
    "notes": "Control code points (including the ASCII controls U+0000 to U+001F as well as U+007F) are disallowed in the PRECIS FreeformClass, which the OpaqueString profile uses.  Thus it's not enough to just disallow non-US-ASCII codepoints (rather than implement the full OpaqueString profile) to comply with a subset of the OpaqueString profile.",
    "submit_date": "2018-09-08",
    "submitter_name": "Peter Occil",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 6558,
    "doc-id": "RFC7804",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": 5,
    "orig_text": "   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: Authorization: SCRAM-SHA-256 sid=AAAABBBBCCCCDDDD,\r\n          data=Yz1iaXdzLHI9ck9wck5HZndFYmVSV2diTkVrcU8laHZZRHBXVWEyUmFUQ\r\n             0FmdXhGSWxqKWhObEYscD1kSHpiWmFwV0lrNGpVaE4rVXRlOXl0YWc5empm\r\n             TUhnc3FtbWl6N0FuZFZRPQo=\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 200 Ok\r\n   S: Authentication-Info: sid=AAAABBBBCCCCDDDD,\r\n          data=dj02cnJpVFJCaTIzV3BSUi93dHVwK21NaFVaVW4vZEI1bkxUSlJzamw5N\r\n             Uc0PQo=\r\n   S: [...Other header fields and resource body...]",
    "correct_text": "   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: Authorization: SCRAM-SHA-256 sid=AAAABBBBCCCCDDDD,\r\n          data=\"Yz1iaXdzLHI9ck9wck5HZndFYmVSV2diTkVrcU8laHZZRHBXVWEyUmFUQ\r\n              0FmdXhGSWxqKWhObEYscD1kSHpiWmFwV0lrNGpVaE4rVXRlOXl0YWc5empm\r\n              TUhnc3FtbWl6N0FuZFZRPQo=\"\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 200 Ok\r\n   S: Authentication-Info: sid=AAAABBBBCCCCDDDD,\r\n          data=\"dj02cnJpVFJCaTIzV3BSUi93dHVwK21NaFVaVW4vZEI1bkxUSlJzamw5N\r\n             Uc0PQo=\"\r\n   S: [...Other header fields and resource body...]",
    "notes": "The \"data\" parameter values for the example client request and server response are not quoted, even though these values do not comply with the HTTP token syntax (these both contain a final '='). This means that these examples are in fact invalid.\r\n\r\nFound at least one server that implemented their HTTP SCRAM mechanism based on this example, expecting the data parameter to be unquoted and producing it unquoted as well.",
    "submit_date": "2021-04-24",
    "submitter_name": "Stephan Bosch",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": 6633,
    "doc-id": "RFC7804",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": 5,
    "orig_text": "   This is a simple example of a SCRAM-SHA-256 authentication exchange\r\n   (no support for channel bindings, as this feature is not currently\r\n   supported by HTTP).  Username 'user' and password 'pencil' are used.\r\n   Note that long lines are folded for readability.\r\n\r\n   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 401 Unauthorized\r\n   S: WWW-Authenticate: Digest realm=\"realm1@example.com\",\r\n          Digest realm=\"realm2@example.com\",\r\n          Digest realm=\"realm3@example.com\",\r\n          SCRAM-SHA-256 realm=\"realm3@example.com\",\r\n          SCRAM-SHA-256 realm=\"testrealm@example.com\"\r\n   S: [...]\r\n\r\n   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: Authorization: SCRAM-SHA-256 realm=\"testrealm@example.com\",\r\n          data=biwsbj11c2VyLHI9ck9wck5HZndFYmVSV2diTkVrcU8K\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 401 Unauthorized\r\n   S: WWW-Authenticate: SCRAM-SHA-256\r\n           sid=AAAABBBBCCCCDDDD,\r\n           data=cj1yT3ByTkdmd0ViZVJXZ2JORWtxTyVodllEcFdVYTJSYVRDQWZ1eEZJ\r\n              bGopaE5sRixzPVcyMlphSjBTTlk3c29Fc1VFamI2Z1E9PSxpPTQwOTYK\r\n   S: [...]\r\n\r\n   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: Authorization: SCRAM-SHA-256 sid=AAAABBBBCCCCDDDD,\r\n          data=Yz1iaXdzLHI9ck9wck5HZndFYmVSV2diTkVrcU8laHZZRHBXVWEyUmFUQ\r\n             0FmdXhGSWxqKWhObEYscD1kSHpiWmFwV0lrNGpVaE4rVXRlOXl0YWc5empm\r\n             TUhnc3FtbWl6N0FuZFZRPQo=\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 200 Ok\r\n   S: Authentication-Info: sid=AAAABBBBCCCCDDDD,\r\n          data=dj02cnJpVFJCaTIzV3BSUi93dHVwK21NaFVaVW4vZEI1bkxUSlJzamw5N\r\n             Uc0PQo=\r\n   S: [...Other header fields and resource body...]\r\n\r\n\r\n   In the above example, the first client request contains a \"data\"\r\n   attribute that base64 decodes as follows:\r\n\r\n      n,,n=user,r=rOprNGfwEbeRWgbNEkqO\r\n\r\n   The server then responds with a \"data\" attribute that base64 decodes\r\n   as follows:\r\n\r\n      r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF,s=W22ZaJ0SNY7soE\r\n      sUEjb6gQ==,i=4096\r\n\r\n   The next client request contains a \"data\" attribute that base64\r\n   decodes as follows:\r\n\r\n      c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF,p=dHzbZap\r\n      WIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\r\n\r\n   The final server response contains a \"data\" attribute that base64\r\n   decodes as follows:\r\n\r\n      v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=",
    "correct_text": "   This is a simple example of a SCRAM-SHA-256 authentication exchange\r\n   (no support for channel bindings, as this feature is not currently\r\n   supported by HTTP).  Username 'user' and password 'pencil' are used.\r\n   Note that long lines are folded for readability.\r\n\r\n   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 401 Unauthorized\r\n   S: WWW-Authenticate: Digest realm=\"realm1@example.com\",\r\n          Digest realm=\"realm2@example.com\",\r\n          Digest realm=\"realm3@example.com\",\r\n          SCRAM-SHA-256 realm=\"realm3@example.com\",\r\n          SCRAM-SHA-256 realm=\"testrealm@example.com\"\r\n   S: [...]\r\n\r\n   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: Authorization: SCRAM-SHA-256 realm=\"testrealm@example.com\",\r\n          data=biwsbj11c2VyLHI9ck9wck5HZndFYmVSV2diTkVrcU8=\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 401 Unauthorized\r\n   S: WWW-Authenticate: SCRAM-SHA-256\r\n           sid=AAAABBBBCCCCDDDD,\r\n           data=cj1yT3ByTkdmd0ViZVJXZ2JORWtxTyVodllEcFdVYTJSYVRDQWZ1eEZJ\r\n              bGopaE5sRixzPVcyMlphSjBTTlk3c29Fc1VFamI2Z1E9PSxpPTQwOTY=\r\n   S: [...]\r\n\r\n   C: GET /resource HTTP/1.1\r\n   C: Host: server.example.com\r\n   C: Authorization: SCRAM-SHA-256 sid=AAAABBBBCCCCDDDD,\r\n          data=Yz1iaXdzLHI9ck9wck5HZndFYmVSV2diTkVrcU8laHZZRHBXVWEyUmFUQ\r\n             0FmdXhGSWxqKWhObEYscD1kSHpiWmFwV0lrNGpVaE4rVXRlOXl0YWc5empm\r\n             TUhnc3FtbWl6N0FuZFZRPQo=\r\n   C: [...]\r\n\r\n   S: HTTP/1.1 200 Ok\r\n   S: Authentication-Info: sid=AAAABBBBCCCCDDDD,\r\n          data=dj02cnJpVFJCaTIzV3BSUi93dHVwK21NaFVaVW4vZEI1bkxUSlJzamw5N\r\n             Uc0PQo=\r\n   S: [...Other header fields and resource body...]\r\n\r\n\r\n   In the above example, the first client request contains a \"data\"\r\n   attribute that base64 decodes as follows:\r\n\r\n      n,,n=user,r=rOprNGfwEbeRWgbNEkqO\r\n\r\n   The server then responds with a \"data\" attribute that base64 decodes\r\n   as follows:\r\n\r\n      r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF,s=W22ZaJ0SNY7soE\r\n      sUEjb6gQ==,i=4096\r\n\r\n   The next client request contains a \"data\" attribute that base64\r\n   decodes as follows:\r\n\r\n      c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF,p=dHzbZap\r\n      WIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\r\n\r\n   The final server response contains a \"data\" attribute that base64\r\n   decodes as follows:\r\n\r\n      v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=",
    "notes": "The original base64 encoded values of the client first message and server first message are wrong.\r\nNotice that these values end in K. These values base64 decode to strings that end in new line characters.\r\n\r\nThe original base64 encoded values of the client final message and server final message are correct.\r\nNotice that these values end in =. These values base64 decode to string that do not end in new line characters.\r\n\r\nIt appears that during the base64 encoding of the client first message and server first message, the newline characters were accidentally included.\r\nThe correct base64 encoding is as follows:\r\n\r\nn,,n=user,r=rOprNGfwEbeRWgbNEkqO base64 encodes to biwsbj11c2VyLHI9ck9wck5HZndFYmVSV2diTkVrcU8=\r\n\r\nr=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096 base64 encodes to cj1yT3ByTkdmd0ViZVJXZ2JORWtxTyVodllEcFdVYTJSYVRDQWZ1eEZJbGopaE5sRixzPVcyMlphSjBTTlk3c29Fc1VFamI2Z1E9PSxpPTQwOTY=",
    "submit_date": "2021-07-09",
    "submitter_name": "Ben Hollberg",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  }
]
