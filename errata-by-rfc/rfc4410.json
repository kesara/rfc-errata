[
  {
    "errata_id": 97,
    "doc-id": "RFC4410",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": 99,
    "orig_text": "(1)  [contradiction in specification]\r\n\r\nThe last paragraph of Section 2, on page 6 of RFC 4410, says:\r\n\r\n   SRMP is intended for general use under applications that need its\r\n                             vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\r\n|  services and may exist in parallel instances on the same host.  The\r\n   UDP port is therefore established ad hoc from available application\r\n   ports; accordingly, it would not be appropriate to have a well-known\r\n   port for SRMP.\r\n\r\nContrary to that, the first paragraph of Section 4.7, on page 15,\r\nsays:\r\n   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\r\n|  Each host will have a single instance of SRMP supporting all of its\r\n   applications.  Thus, the sender's source rate is the sum of the rates\r\n   of all the clients of the same multicast group.\r\n\r\nWhat's true ?   What's been intended ???\r\n\r\n\r\n(2)  [simple erratum: inconsistent spelling]\r\n\r\nAt the bottom of page 7, Section 3.2 says:\r\n\r\n   Receiver_Timestamp:\r\n|     16 bits   Echo of the Receiver_Time_Stamp field (in milliseconds)\r\n                of the receiver feedback message.  If the sender has\r\n                time delay between receiving the feedback and echoing\r\n                the timestamp, it MUST adjust the Receiver_Timestamp\r\n                value to compensate.\r\n\r\nTo adjust with the diagram on top of page 7 and the remainder of the\r\ntext, 'Receiver_Time_Stamp' should be spelled out 'Receiver_Timestamp'\r\nhere as well.\r\nThus, the RFC should say:\r\n\r\n   Receiver_Timestamp:\r\n|     16 bits   Echo of the Receiver_Timestamp field (in milliseconds)\r\n                of the receiver feedback message.  If the sender has\r\n                time delay between receiving the feedback and echoing\r\n                the timestamp, it MUST adjust the Receiver_Timestamp\r\n                value to compensate.\r\n\r\n\r\n(3)  [inconsistent message layout - danger of interoperability problems]\r\n\r\nThe diagram of the Bundle Header Format (Section 3.2, on page 7),\r\n\r\n      0              8              16             24             32\r\n      +--------------+--------------+--------------+--------------+\r\n      |Version| Type |fb_nr | flag  |        bundle_SN            |\r\n      +--------------+--------------+--------------+--------------+\r\n      |                       Sender_ID                           |\r\n      +--------------+--------------+--------------+--------------+\r\n      |                       Receiver_ID                         |\r\n      +--------------+--------------+--------------+--------------+\r\n      |       Sender_Timestamp      |    Receiver_Timestamp       |\r\n      +--------------+--------------+--------------+--------------+\r\n      |            ...                                            |\r\n\r\n\r\nand the diagram of the Feedback Message Format (Section 3.3, on page 9),\r\n\r\n      0              8              16             24             32\r\n      +--------------+--------------+--------------+--------------+\r\n      |Version| Type | fb_nr| flag  |             X_r             |\r\n      +--------------+--------------+--------------+--------------+\r\n      |       Sender_Timestamp      |    Receiver_Timestamp       |\r\n      +--------------+--------------+--------------+--------------+\r\n      |                       Sender_ID                           |\r\n      +--------------+--------------+--------------+--------------+\r\n      |                      Receiver_ID                          |\r\n      +--------------+--------------+--------------+--------------+\r\n\r\nshow a surprising inconsistency in the order of the (otherwise\r\ncomparable) words {Sender_ID, Receiver_ID, S/R_Timestamps} .\r\nI suspect that this might give rise to implementation faults,\r\nleading to interoperability problems.\r\nIt better would have been avoided from the beginning by using\r\nthe same order of the fields.\r\n\r\nBTW: It strikes that in Section 3.2, the sequence of the field\r\nexplanations does not agree with the order in the diagram (as is\r\nthe case throughout the remainder of the RFC); instead, the\r\nexplanations of just those four fields is given in the order\r\nof the diagram and explanation sequence in Section 3.3.\r\nTherefore, the reader could be lead to the conjecture that the\r\ndiagram in Section 3.2 is in error and in fact should be aligned\r\nwith the diagram in Section 3.3.\r\n\r\n\r\n(4)  [simple erratum: word twister]\r\n\r\nIn Section 3.6, near the top of page 12, the RFC says:\r\n\r\n   Length:\r\n      16 bits  Length of the payload data in octets (does not the\r\n               include header).\r\n\r\nIt should say:\r\n\r\n   Length:\r\n|     16 bits  Length of the payload data in octets (does not include\r\n|              the header).\r\n\r\n\r\n(5)  [simple errata: inconsistent terminology]\r\n\r\nContrary to the remainder of the RFC text, Section 3.7 uses the\r\nfield name \"Sender Address\".  To avoid the unfortunate embedded\r\nspace character, and to align this section with the remainder\r\nof the RFC, the term \"Sender_ID\" should be used.\r\nTherefore:\r\n\r\na) the diagram on page 12,\r\n\r\n      0              8              16             24             32\r\n      +--------------+--------------+--------------+--------------+\r\n      |Version| Type |111 |  00000  |          reserved           |\r\n      +--------------+--------------+--------------+--------------+\r\n      |                            DSN                            |\r\n      +--------------+--------------+--------------+--------------+\r\n|     |                      Sender Address                       |\r\n      +--------------+--------------+--------------+--------------+\r\n\r\nshould be corrected to say:\r\n\r\n      0              8              16             24             32\r\n      +--------------+--------------+--------------+--------------+\r\n      |Version| Type |111 |  00000  |          reserved           |\r\n      +--------------+--------------+--------------+--------------+\r\n      |                            DSN                            |\r\n      +--------------+--------------+--------------+--------------+\r\n|     |                         Sender_ID                         |\r\n      +--------------+--------------+--------------+--------------+\r\n\r\nb) the explanation (at the bottom of page 12),\r\n\r\n|  Sender_ID:\r\n|     The IP address of the sender of the message being NACKed.\r\n\r\nshould be corrected to say:\r\n\r\n|  Sender_ID:\r\n|     The ID of the sender of the message being NACKed.\r\n\r\nSee also item (6) below for the full rationale.\r\n\r\n\r\n(6)  [incomplete specification - IPv4-centric]\r\n\r\nIn Section 4.2, the second paragraph on page 14 says:\r\n\r\n   Also, the bundle length MUST NOT exceed LENGTH_MAX.  If adding a new\r\n   SRMP message will produce a greater length, the SRMP daemon MUST\r\n   initialize a new bundle for the new SRMP messages, and the current\r\n|  bundle should be transmitted immediately.  The recommended value for\r\n|  LENGTH_MAX is 1454 bytes (Ethernet MTU minus IP and UDP header\r\n|  lengths).\r\n\r\nSimilarly, the first paragraph of Section 4.6, on page 15, says:\r\n\r\n   TFMCC is designed for traffic with a fixed message size.  The maximum\r\n|  bundle size (including header) for SRMP is set to a configurable\r\n|  maximum, typically 1454 bytes (Ethernet MTU minus IP and UDP header\r\n|  lengths).  The bundle size will be used in a TCP throughput equation,\r\n   to get a desired source rate.  However, in SRMP, the message size is\r\n   variable because:\r\n\r\nWithout mention, the marked phrases are strictly IPv4-centric;\r\nthey do not apply to the case of IPv6.\r\n\r\nThe latter scenario is not excluded in the text, and the phrase,\r\n\"IPv4 addresses may be used.\" in the description of all Sender_ID\r\nand Receiver_ID fields supports the suspicion that IPv6 in fact\r\nwas intended to be supported.\r\n\r\nPlease supply improved wording for both text fragments.\r\n\r\n\r\n(7)  [simple erratum: grammar (singular/plural mismatch)]\r\n\r\nThe first paragraph of Section 5, on page 17, says:\r\n\r\n   SRMP operates in three distinct transmission modes in order to\r\n   deliver varying levels of reliability: Mode 0 for multicast data that\r\n|  does not require reliable transmission, Mode 1 for data that must be\r\n   received reliably by all members of a multicast group, and Mode 2 for\r\n   data that must be received reliably by a single dynamically\r\n   determined member of a multicast group.\r\n\r\nIt should say:\r\n\r\n   SRMP operates in three distinct transmission modes in order to\r\n   deliver varying levels of reliability: Mode 0 for multicast data that\r\n|  do not require reliable transmission, Mode 1 for data that must be\r\n   received reliably by all members of a multicast group, and Mode 2 for\r\n   data that must be received reliably by a single dynamically\r\n   determined member of a multicast group.\r\n\r\nRationale: \"data\" *is\" plural.\r\n",
    "correct_text": "",
    "notes": "from pending",
    "submit_date": "2006-08-14",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 129,
    "verifier_name": "Wes Eddy",
    "update_date": "2019-09-10 09:09:03"
  }
]
