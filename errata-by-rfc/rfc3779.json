[
  {
    "errata_id": "1886",
    "doc-id": "RFC3779",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "2.1.1",
    "orig_text": "   An IPv6 address is a 128-bit quantity that is written as eight\r\n   hexadecimal numbers, each in the range 0 through ffff, separated by a\r\n   semicolon (\":\"); 2001:0:200:3:0:0:0:1 is an example of an IPv6\r\n   address.  IPv6 addresses frequently have adjacent fields whose value\r\n   is 0.  One such group of 0 fields may be abbreviated by two\r\n   semicolons (\"::\"). ",
    "correct_text": "   An IPv6 address is a 128-bit quantity that is written as eight \r\n   hexadecimal numbers, each in the range 0 through ffff, separated by a \r\n   colon (\":\"); 2001:0:200:3:0:0:0:1 is an example of an IPv6 address.\r\n   IPv6 addresses frequently have adjacent fields whose value is 0.  One\r\n   such group of 0 fields may be abbreviated by two colons (\"::\").",
    "notes": "\"semicolon\" should be \"colon\"\r\nAdded reference to RFC4291.\r\nVerifier: Forward reference to RFC4291 is inappropriate.",
    "submit_date": "2009-09-21",
    "submitter_name": "Charles Bobo",
    "verifier_id": "2",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1887",
    "doc-id": "RFC3779",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "References",
    "orig_text": "   [RFC3513]   Hinden, R. and S. Deering, \"Internet Protocol Version 6\r\n               (IPv6) Addressing Architecture\", RFC 3513, April 2003.\r\n\r\n   [RFC3281]   Farrell, S. and R. Housley, \"An Internet Attribute\r\n               Certificate Profile for Authorization\", RFC 3281, April\r\n               2002.\r\n\r\n   [S-BGP]     S. Kent, C. Lynn, and K. Seo, \"Secure Border Gateway\r\n               Protocol (S-BGP),\" IEEE JSAC Special Issue on Network\r\n               Security, April 2000.",
    "correct_text": "   [RFC3281]   Farrell, S. and R. Housley, \"An Internet Attribute\r\n               Certificate Profile for Authorization\", RFC 3281, April\r\n               2002.\r\n\r\n   [RFC3513]   Hinden, R. and S. Deering, \"Internet Protocol Version 6\r\n               (IPv6) Addressing Architecture\", RFC 3513, April 2003.\r\n\r\n   [RFC4291]   R. Hinden, S. Deering, \"IP Version 6 Addressing Architecture\",\r\n               RFC 4291, February 2006\r\n\r\n   [S-BGP]     S. Kent, C. Lynn, and K. Seo, \"Secure Border Gateway\r\n               Protocol (S-BGP),\" IEEE JSAC Special Issue on Network\r\n               Security, April 2000.",
    "notes": "Section is \"Informational References\" but this doesn't fit in the Section field above.\r\nReferences were out of alphabetical order -- RFC3281 should come before RFC3513.\r\nAdded reference RFC4291",
    "submit_date": "2009-09-21",
    "submitter_name": "Charles Bobo",
    "verifier_id": "112",
    "verifier_name": "Tim Polk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2537",
    "doc-id": "RFC3779",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "2.2.3.9",
    "orig_text": "   To simplify the comparison of IP address blocks when performing\r\n   certification path validation, a maximum IP address MUST contain at\r\n   least one bit whose value is 1, i.e., the subsequent octets may not\r\n   be omitted nor all zero.",
    "correct_text": "Text should be deleted.",
    "notes": "There are a number of different issues relative to this text that need to be addressed.\r\n\r\n1.  This text implicitly change the rules for encoding a maximum value.  As an example the address 0.0.0.255 is encoded as 03 03 00 00 00 00 according to the rule \" The BIT STRING for the maximum address results from removing all the least-significant one-bits from the maximum address.\"\r\n\r\n2.  The rule in no way simplifies any comparisions of IP address blocks.  If one really wishes to simplify the comparison then one needs to change the rule for maximum addresses to remove all but the last least-signficant one-bit from the address.  However it is not clear that even this would really simplify the comparison in any significant way.\r\n\r\nIf you look at the example in 2.2.3.9 - tis is not clear how having the one bit at the top of the encoding helps make the comparisons any easier - but it satisfies the requirment that atleast one bit is a 1.  If the maximum value ws encoded as  1000 1   (0x3 0x02 0x03 0x84) - a bitwise comparision routine could make for a simplified a < b comparison (looking at only the top 5 bits of the address to be compared.)",
    "submit_date": "2010-09-30",
    "submitter_name": "Jim Schaad",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "6792",
    "doc-id": "RFC3779",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "Appendix B",
    "orig_text": "   30 3d                       Extension {\r\n      06 08 2b06010505070107     extnID        1.3.6.1.5.5.7.1.7\r\n      01 01 ff                   critical\r\n      04 2e                      extnValue {\r\n         30 2c                     IPAddrBlocks {\r\n            30 10                    IPAddressFamily {\r\n               04 03 0001 01           addressFamily: IPv4 Unicast\r\n                                       IPAddressChoice\r\n               30 09                     addressesOrRanges {\r\n                                           IPAddressOrRange\r\n                  03 02 00 0a                addressPrefix    10/8\r\n                                           IPAddressOrRange\r\n                  03 03 04 b010              addressPrefix    172.16/12\r\n                                         } -- addressesOrRanges\r\n                                     } -- IPAddressFamily\r\n            30 07                    IPAddressFamily {\r\n               04 03 0001 02           addressFamily: IPv4 Multicast\r\n                                       IPAddressChoice\r\n               05 00                     inherit from issuer\r\n                                     } -- IPAddressFamily\r\n            30 0f                    IPAddressFamily {\r\n               04 02 0002              addressFamily: IPv6\r\n                                       IPAddressChoice\r\n               30 09                     addressesOrRanges {\r\n                                           IPAddressOrRange\r\n                  03 07 00 200100000002      addressPrefix   2001:0:2/47\r\n                                         } -- addressesOrRanges\r\n                                     } -- IPAddressFamily\r\n                                   } -- IPAddrBlocks\r\n                                 } -- extnValue\r\n                                  } -- Extension",
    "correct_text": "   30 3d                       Extension {\r\n      06 08 2b06010505070107     extnID        1.3.6.1.5.5.7.1.7\r\n      01 01 ff                   critical\r\n      04 2e                      extnValue {\r\n         30 2c                     IPAddrBlocks {\r\n            30 10                    IPAddressFamily {\r\n               04 03 0001 01           addressFamily: IPv4 Unicast\r\n                                       IPAddressChoice\r\n               30 09                     addressesOrRanges {\r\n                                           IPAddressOrRange\r\n                  03 02 00 0a                addressPrefix    10/8\r\n                                           IPAddressOrRange\r\n                  03 03 04 ac10              addressPrefix    172.16/12\r\n                                         } -- addressesOrRanges\r\n                                     } -- IPAddressFamily\r\n            30 07                    IPAddressFamily {\r\n               04 03 0001 02           addressFamily: IPv4 Multicast\r\n                                       IPAddressChoice\r\n               05 00                     inherit from issuer\r\n                                     } -- IPAddressFamily\r\n            30 0f                    IPAddressFamily {\r\n               04 02 0002              addressFamily: IPv6\r\n                                       IPAddressChoice\r\n               30 09                     addressesOrRanges {\r\n                                           IPAddressOrRange\r\n                  03 07 00 200100000002      addressPrefix   2001:0:2/48\r\n                                         } -- addressesOrRanges\r\n                                     } -- IPAddressFamily\r\n                                   } -- IPAddrBlocks\r\n                                 } -- extnValue\r\n                                  } -- Extension",
    "notes": "b010 represents 176.16/12, the hex representation of 172 is ac, so it should be ac10.\r\n\r\nThe IPv6 addressPrefix in question is 2001:0:2/48, not 2001:0:2/47, as explained in the text before the example.",
    "submit_date": "2021-12-21",
    "submitter_name": "Theo Buehler",
    "verifier_id": "159",
    "verifier_name": "Benjamin Kaduk",
    "update_date": "2021-12-24 20:15:17"
  },
  {
    "errata_id": "7653",
    "doc-id": "RFC3779",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "3.2.3",
    "orig_text": "Section 3.2.3.8:\r\nThe ASRange type is a SEQUENCE consisting of a min and a max element,\r\nand is used to specify a range of AS identifier values.",
    "correct_text": "Section 3.2.3.8:\r\nThe ASRange type is a SEQUENCE consisting of a min and a max element,\r\nand is used to specify a range of AS identifier values. The min and max\r\nelements MUST specify two distinct AS identifiers.",
    "notes": "The introduction in section 1 stresses that the objective of the encoding rules in section 2 and section 3\r\nis to produce unique encoding and minimal size encoding of the information.\r\n\r\nAllowing ASRanges where the minimum value is the same as the maximum value clearly violates the\r\nobjective of specifying a canonical form (in order to produce a unique representation); however the\r\nspecification as-is doesn't forbid min & max to be the same value. The corrected text addresses this.\r\n\r\nNote: erratum edited per https://mailarchive.ietf.org/arch/msg/pkix/iZnCd58xgl1C47GSeFemAU9CF1g/",
    "submit_date": "2023-09-22",
    "submitter_name": "Job Snijders",
    "verifier_id": "171",
    "verifier_name": "John Scudder",
    "update_date": "2024-01-11 16:54:53"
  },
  {
    "errata_id": "836",
    "doc-id": "RFC3779",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "3.2.3.1",
    "orig_text": "The ASIdentifiers type is a SEQUENCE containing one or more forms of\r\nautonomous system identifiers -- AS numbers (in the asnum element) or\r\nrouting domain identifiers (in the rdi element).  When the ASIdentifiers type\r\ncontains multiple forms of identifiers, the asnum\r\nentry MUST precede the rdi entry.  AS numbers are used by BGP, and\r\nrouting domain identifiers are specified in the IDRP [RFC1142].",
    "correct_text": "[see Notes]",
    "notes": "IDRP was never defined in an RFC, only by ISO 10747.\r\n\r\nfrom pending",
    "submit_date": "2006-06-21",
    "submitter_name": "Randy Bush",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  }
]
