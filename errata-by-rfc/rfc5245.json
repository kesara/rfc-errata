[
  {
    "errata_id": "2338",
    "doc-id": "RFC5245",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "15.1",
    "orig_text": "extension-att-name    = byte-string    ;from RFC 4566\r\n",
    "correct_text": "extension-att-name    = token    ;from RFC 4566\r\n",
    "notes": "\"extension-att-name\" may contain the SP (0x20) as defined for \"byte-string\" in  RFC 4566.\r\nThe 'SP' character cannot be allowed within \"extension-att-name\" as it is also used as delimiter between \"extension-att-name\" and \"extension-att-value\".",
    "submit_date": "2010-07-20",
    "submitter_name": "Reif, Frank",
    "verifier_id": "118",
    "verifier_name": "Robert Sparks",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3107",
    "doc-id": "RFC5245",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "Appendix B.6",
    "orig_text": "However, the check from agent R has not yet \r\ngenerated a response, and agent R receives the updated offer \r\n(message 7) before getting the response (message 9).  ",
    "correct_text": "However, the check from agent R has not yet \r\nreceived a response, and agent R receives the updated offer \r\n(message 7) before getting the response (message 9).  ",
    "notes": "Here, Agent R (ideally Agent B as per the figure 11) has generated the request, so it must receive the response. The original text may give a meaning that Agent R has to generate a response.",
    "submit_date": "2012-02-05",
    "submitter_name": "N V S Kaushik",
    "verifier_id": "2",
    "verifier_name": "Robert Sparks",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3149",
    "doc-id": "RFC5245",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "21.1.4",
    "orig_text": "Type of Attribute: session-level",
    "correct_text": "Type of Attribute: media-level",
    "notes": "Section 15.3 clearly says that \"ice-mismatch\" is media-level:\r\n\r\n'\"ice-mismatch\" is a media-level\r\n attribute only, and when present in an answer, indicates that the\r\n offer arrived with a default destination for a media component that\r\n didn't have a corresponding candidate attribute.'\r\n\r\nSection Section 6.1 also implies that \"ice-mismatch\" is media-level:\r\n\r\n\"In some cases, the answer may omit a=candidate attributes for the\r\n media streams, and instead include an a=ice-mismatch attribute for\r\n one or more of the media streams in the SDP.\"",
    "submit_date": "2012-03-07",
    "submitter_name": "Marc Petit-huguenin",
    "verifier_id": "118",
    "verifier_name": "Robert Sparks",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3619",
    "doc-id": "RFC5245",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "Section 4, 5",
    "orig_text": "Missed candidate pair in ICE standard",
    "correct_text": "Scenario: X is caller, Z is callee. X is behind a non-full-cone \r\n(such as symmetric) NAT, Z is behind a full-cone NAT. \r\n\r\nICE standard: Section 2.1 of RFC5245 describes the addresses that \r\nare collected as candidate addresses: (local address, server-reflexive \r\naddress, TURN relay address).  For X: (X:x, X1:x1, Yx:yx), and for Z: \r\n(Z:z, Z1:z1, Yz:yz). \r\n\r\nMissed candidate pair in ICE standard: \r\n1. X:x sends a connection check message to the Z1:z1 (as part of the \r\nprocess in Section 2.2 of the standard) \r\n2. Since X is behind a non-full cone NAT such a symmetric one, NAT of \r\nX maps X:x to X2:x2, sends the message to Z1:z1\r\n3. Z is behind a full-cone NAT, so packets received at Z1:z1 address \r\nis forwarded to Z:z by the NAT\r\n\r\nSince X is behind a non-full cone NAT such a symmetric one and Z is \r\nbehind a full-cone NAT, connection from X:x to Z1:z1 would be via a \r\nserver-reflexive address X2:x2 of X, which is not a candidate address \r\nfor X as specified by ICE. X2:x2 should be a candidate address of X, \r\nwhich however can only be determine when X sends a message to Z. The \r\npair (X2:x2, Z1:z1) provides a direct connection option between X and Y.\r\n\r\nConditions on which X2:x2 is a valid candidate address:\r\n1. One of the peers (Z) is behind a full-cone NAT, else step 3 above \r\ndoes not succeed.\r\n2. X2:x2 is unique, i.e., different from X1:x1 (already covered by \r\nSection 2.1) if and only if one of the peers is  behind a non-full-cone \r\nNAT.\r\n\r\nSo I think there should be two stages in the candidate collection process:\r\nA: Section 2.1 -- candidate addresses independent of the other clients\r\nB: collection of the candidate pairs with respect to the peer, such as \r\nX2:x2 and Z2:z2, if any. \r\n\r\nB consists of the following steps including 1, 2, and 3:\r\n4. Z:z determines if X2:x2 from which it received the message is a \r\ndifferent address than in the candidate set of X.\r\n5. If 4 is true, then send an OK message to X2:x2 that it received the\r\nmessage with X2:x2 XOR-encoded.\r\n6. X:x receives the OK message in 4, then X:x determines X2:x2 as its \r\nnew candidate address.\r\n\r\nIf X:x decides to establish the connection via X2:x2, it sends ACK \r\nmessage to Z2:z2.",
    "notes": "This feedback for improvement of ICE candidate gathering and decision process was   sent to Dr. Rosenberg on Nov 09, 2012. However, since I have not received any response from him over my next two followups and this e-mail, I thought it should be reported via this method. \r\n\r\nThis is not an error mesage, but a method to improve the candidate gathering and decision process of ICE.\n --VERIFIER NOTES-- \n   ",
    "submit_date": "2013-05-13",
    "submitter_name": "Ashish Kundu",
    "verifier_id": "123",
    "verifier_name": "Gonzalo Camarillo",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3952",
    "doc-id": "RFC5245",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "15.1",
    "orig_text": "priority = 1*10DIGIT\r\n",
    "correct_text": null,
    "notes": "priority = 1*10DIGIT\r\n\r\nHere the maximum value it can hold is \"9999999999\"(ten-nines)(priority is of maximum length 10 DIGIT as per grammar in sec 15.1).\r\n\r\nThe number of bits required to hold the maximum value(ten-nines) is 34. Which requires a \"double\" value instead of integer of 32 bit.\r\n\r\nCan i know why the priority is maximum of 10 DIGIT length? If possible we may decrease to 9 DIGIT, so that the value will be fit into integer of 32bit.\r\n\r\n-- VERIFIER NOTES -- \r\nThe limitation to 2^32-1 is made clear elsewhere in the text.  The ABNF does not need to enforce this constraint",
    "submit_date": "2014-04-04",
    "submitter_name": "Suresh Tummala",
    "verifier_id": "2",
    "verifier_name": "Richard Barnes",
    "update_date": "2019-09-10 09:09:03"
  }
]
