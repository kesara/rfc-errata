[
  {
    "errata_id": "4365",
    "doc-id": "RFC5925",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.6",
    "orig_text": "   TCP's 4-bit data offset requires that the options end 60 bytes (15\r\n   32-bit words) after the header begins, including the 20-byte header.\r\n   This leaves 40 bytes for options, of which 15 are expected in current\r\n   implementations (listed below), leaving at most 25 for other uses.\r\n   TCP-AO consumes 16 bytes, leaving 9 bytes for additional SYN options\r\n   (depending on implementation dependant alignment padding, which could\r\n   consume another 2 bytes at most).\r\n\r\n   o  SACK permitted (2 bytes) [RFC2018][RFC3517]\r\n\r\n   o  Timestamps (10 bytes) [RFC1323]\r\n\r\n   o  Window scale (3 bytes) [RFC1323]\r\n",
    "correct_text": "   TCP's 4-bit data offset requires that the options end 60 bytes (15\r\n   32-bit words) after the header begins, including the 20-byte header.\r\n   This leaves 40 bytes for options, of which 19 are expected in current\r\n   implementations (listed below), leaving at most 21 for other uses.\r\n   TCP-AO consumes 16 bytes, leaving 5 bytes for additional SYN options\r\n   (depending on implementation dependent alignment padding, which could\r\n   consume another 2 bytes at most).\r\n\r\n   o  SACK permitted (2 bytes) [RFC2018][RFC3517]\r\n\r\n   o  Timestamps (10 bytes) [RFC1323]\r\n\r\n   o  Window scale (3 bytes) [RFC1323]\r\n\r\n   o  Maximum Segment Size (4 bytes) [RFC793]\r\n",
    "notes": "MSS was missing in the original text. New text includes MSS and updates numbers accordingly.\r\n\r\nAlso corrects a spelling error (dependant -> dependent), which is non-technical but included in the revised text.",
    "submit_date": "2015-05-12",
    "submitter_name": "Joe Touch",
    "verifier_id": "2",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5347",
    "doc-id": "RFC5925",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "5.1",
    "orig_text": "3. The TCP header, by default including options, and where the TCP\r\n   checksum and TCP-AO MAC fields are set to zero, all in network-\r\n   byte order.\r\n\r\n   The TCP option flag of the MKT indicates whether the TCP options\r\n   are included in the MAC.  When included, only the TCP-AO MAC field\r\n   is zeroed.\r\n\r\n   When TCP options are not included, all TCP options except for TCP-\r\n   AO are omitted from MAC processing.  Again, the TCP-AO MAC field\r\n   is zeroed for the MAC processing.\r\n",
    "correct_text": "3. The TCP header and TCP options, where the TCP checksum and TCP-AO\r\n   MAC fields are always set to zero, all in network-byte order.\r\n\r\n   The TCP option flag of the MKT indicates which TCP options are\r\n   included in the MAC. When TCP options are not included, only the\r\n   TCP option for TCP-AO (as described in Section 2.2) is included\r\n   in the MAC. Otherwise, all the TCP options are included in the MAC.\r\n",
    "notes": "Rewording for clarity and simplification.\r\nThe original text could lead to confusion re '...When included, only the TCP-AO MAC field is zeroed.'\n --VERIFIER NOTES-- \nRejected as the proposed text does not seem fundamentally clearer.",
    "submit_date": "2018-05-03",
    "submitter_name": "Ignacio Goyret",
    "verifier_id": "153",
    "verifier_name": "Mirja Kühlewind",
    "update_date": "2020-03-04 02:35:42"
  },
  {
    "errata_id": "5672",
    "doc-id": "RFC5925",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "6.2",
    "orig_text": "     /* set the flag when the SEG.SEQ first rolls over */\r\n     if ((RCV.SNE_FLAG == 0)\r\n        && (RCV.PREV_SEQ > 0x7fff) && (SEG.SEQ < 0x7fff)) {\r\n           RCV.SNE = RCV.SNE + 1;\r\n           RCV.SNE_FLAG = 1;\r\n     }\r\n     /* decide which SNE to use after incremented */\r\n     if ((RCV.SNE_FLAG == 1) && (SEG.SEQ > 0x7fff)) {\r\n        SNE = RCV.SNE - 1; # use the pre-increment value\r\n     } else {\r\n        SNE = RCV.SNE; # use the current value\r\n     }\r\n     /* reset the flag in the *middle* of the window */\r\n     if ((RCV.PREV_SEQ < 0x7fff) && (SEG.SEQ > 0x7fff)) {\r\n        RCV.SNE_FLAG = 0;\r\n     }\r\n     /* save the current SEQ for the next time through the code */\r\n     RCV.PREV_SEQ = SEG.SEQ;",
    "correct_text": "     /* set the flag when the SEG.SEQ first rolls over */\r\n     if ((RCV.SNE_FLAG == 0)\r\n        && (RCV.PREV_SEQ > 0x7fffffff) && (SEG.SEQ < 0x7fffffff)) {\r\n           RCV.SNE = RCV.SNE + 1;\r\n           RCV.SNE_FLAG = 1;\r\n     }\r\n     /* decide which SNE to use after incremented */\r\n     if ((RCV.SNE_FLAG == 1) && (SEG.SEQ > 0x7fffffff)) {\r\n        SNE = RCV.SNE - 1; # use the pre-increment value\r\n     } else {\r\n        SNE = RCV.SNE; # use the current value\r\n     }\r\n     /* reset the flag in the *middle* of the window */\r\n     if ((RCV.PREV_SEQ < 0x7fffffff) && (SEG.SEQ > 0x7fffffff)) {\r\n        RCV.SNE_FLAG = 0;\r\n     }\r\n     /* save the current SEQ for the next time through the code */\r\n     RCV.PREV_SEQ = SEG.SEQ;",
    "notes": "The SNE values are 32 bits; the current pseudocode used 16-bit masks (0x7fff) instead of their 32-bit equivalent (0x7fffffff).\r\n\r\nThis error was first noted by Tero Kivinen <kivinen@iki.fi>.",
    "submit_date": "2019-03-24",
    "submitter_name": "Joe Touch",
    "verifier_id": "153",
    "verifier_name": "Mirja Kühlewind",
    "update_date": "2020-03-04 02:23:08"
  },
  {
    "errata_id": "5961",
    "doc-id": "RFC5925",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.4",
    "orig_text": "d. Determine the RNextKeyID as indicated by the rnext_key\r\npointer, and insert it in the TCP-AO RNextKeyID field (using\r\nthe rnext_key MKT’s RecvID as the TCP-AO KeyID)\r\n",
    "correct_text": "d. Determine the RNextKeyID as indicated by the rnext_key\r\npointer, and insert it in the TCP-AO RNextKeyID field (using\r\nthe rnext_key MKT’s RecvID as the TCP-AO RNextKeyID)\r\n",
    "notes": "This was a cut-and-paste error",
    "submit_date": "2020-01-22",
    "submitter_name": "Ron Bonica",
    "verifier_id": "153",
    "verifier_name": "Mirja Kühlewind",
    "update_date": "2020-01-22 07:24:20"
  },
  {
    "errata_id": "6406",
    "doc-id": "RFC5925",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Section 5.1",
    "orig_text": "In Section 5.1, Figure 6 - TCP IPv6 Pseudoheader\r\n\r\n+--------+--------+--------+--------+\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+          Source Address           +\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+                                   +\r\n+--------+--------+--------+--------+\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+        Destination Address        +\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+--------+--------+--------+--------+\r\n|      Upper-Layer Payload Length   |\r\n+--------+--------+--------+--------+\r\n|      Zero       |    Next Header  |\r\n+--------+--------+--------+--------+",
    "correct_text": "+--------+--------+--------+--------+\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+          Source Address           +\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+                                   +\r\n+--------+--------+--------+--------+\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+        Destination Address        +\r\n|                                   |\r\n+                                   +\r\n|                                   |\r\n+--------+--------+--------+--------+\r\n|      Upper-Layer Payload Length   |\r\n+--------+--------+--------+--------+\r\n|            Zero          |Next Hdr|\r\n+--------+--------+--------+--------+",
    "notes": "In IPv6 pseudoheader,  Zero field should be 3 bytes and Next header should be 1 byte. \r\nBut in RFC 5925, figure 6, it misleads into Zero field 2 bytes and Next header 2 bytes.",
    "submit_date": "2021-01-22",
    "submitter_name": "Ananth Rajadurai",
    "verifier_id": "167",
    "verifier_name": "Martin Duke",
    "update_date": "2021-01-25 07:19:42"
  },
  {
    "errata_id": "7135",
    "doc-id": "RFC5925",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "7.3",
    "orig_text": ">> A TCP-AO implementation MUST allow for configuration of the\r\n   behavior of segments with TCP-AO but that do not match an MKT.  The\r\n   initial default of this configuration SHOULD be to silently accept\r\n   such connections.  If this is not the desired case, an MKT can be\r\n   included to match such connections, or the connection can indicate\r\n   that TCP-AO is required.  Alternately, the configuration can be\r\n   changed to discard segments with the AO option not matching an MKT.",
    "correct_text": ">> A TCP-AO implementation MUST allow for configuration of the\r\n   behavior of segments with TCP-AO but that do not match any MKT or \r\n   no MKT is available. The initial default of this configuration \r\n   SHOULD be to silently accept such connections. In this mode of \r\n   operation, both the endpoints will not perform TCP-AO validation.\r\n   If this is not the desired case, an MKT can be included to match such \r\n   connections, or the connection can indicate that TCP-AO is required. \r\n   Alternately, the configuration can be changed to discard segments\r\n   with the AO option not matching an MKT.",
    "notes": "The RFC does not clearly draw out the distinction between treatment of segments with TCP-AO and without TCP-AO option.\r\nNote that in the case of MKT mismatch as per existing RFC text, if either endpoint does TCP-AO validation, the session would not get established.\n --VERIFIER NOTES-- \nAs noted in the email below, when both sides do not have common configuration, the handshake will fail.  \r\n\r\n Please see https://mailarchive.ietf.org/arch/msg/tcpm/0zG2aP5tGBvbRJxuNOIPFYDK9Jg/",
    "submit_date": "2022-09-16",
    "submitter_name": "Venkatesh Natarajan",
    "verifier_id": "167",
    "verifier_name": "Martin Duke",
    "update_date": "2022-10-06 14:46:08"
  },
  {
    "errata_id": "7899",
    "doc-id": "RFC5925",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "5.2",
    "orig_text": "   o  Receive_SYN_traffic_key - the traffic key used to authenticate\r\n      incoming SYNs.  The source ISN is known (the TCP connection's\r\n      remote ISN), and the destination (remote) ISN is unknown (and so\r\n      the value 0 is used).",
    "correct_text": "   o  Receive_SYN_traffic_key - the traffic key used to authenticate\r\n      incoming SYNs.  The source ISN is known (the TCP connection's\r\n      remote ISN), and the destination (local) ISN is unknown (and so\r\n      the value 0 is used).",
    "notes": "\"remote side\" is referenced twice:  potential cut-and-paste error from the previous paragraph. Errata verified based on the discussion in tcpm mailing list : https://mailarchive.ietf.org/arch/msg/tcpm/wauBdtHFEqtltJUxTo7kdF8msIU/",
    "submit_date": "2024-04-17",
    "submitter_name": "Jean-Michel COMBES",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2024-05-15 03:45:00"
  }
]
