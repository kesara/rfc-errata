[
  {
    "errata_id": "3441",
    "doc-id": "RFC5155",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.2.3 & 8.5",
    "orig_text": "7.2.3\r\n\r\n(contents)\r\n\r\n8.5\r\n\r\n(contents)\r\n",
    "correct_text": "7.2.3.  No Data Responses, QTYPE is not DS\r\n\r\n  If the No Data Response is a result of an empty non-terminal derived \r\n  from an insecure delegation covered by an Opt-Out NSEC3 RR, the \r\n  closest provable encloser proof MUST be included in the response.  \r\n  The included NSEC3 RR that covers the \"next closer\" name for the \r\n  delegation MUST have the Opt-Out flag set to one. \r\n\r\n  In all other cases, the server MUST include the NSEC3 RR that matches \r\n  QNAME.  This NSEC3 RR MUST NOT have the bits corresponding to either \r\n  the QTYPE or CNAME set in its Type Bit Maps field.\r\n\r\n===============================================\r\n\r\n8.5.  Validating No Data Responses, QTYPE is not DS\r\n\r\n  If there is an NSEC3 RR that matches QNAME present, the validator must \r\n  check that both the QTYPE and the CNAME type are not set in its Type \r\n  Bit Maps field.\r\n\r\n  Note that this test also covers the case where the NSEC3 RR exists\r\n  because it corresponds to an empty non-terminal, in which case the\r\n  NSEC3 RR will have an empty Type Bit Maps field.\r\n\r\n  If there is no NSEC3 RR present that matches QNAME, then the validator \r\n  MUST verify a closest provable encloser proof for the QNAME.  The \r\n  validator MUST verify that the Opt-Out bit is set in the NSEC3 RR that \r\n  covers the \"next closer\" name to the delegation name. This test covers \r\n  the case where the response is due to an Empty Non-Terminal derived \r\n  from an insecure delegation covered by an Opt-Out NSEC3 RR.\r\n",
    "notes": "The corrections were derived from a private email from an editor of RFC 5155.  Note that the ordering of the paragraphs in the proposed 8.5 fix has been changed.  No other change is intentional.\r\n\r\nFrom Roy Arends:\r\n\r\nWe missed documenting the case of what a server and a validator should do in case of an opted-out, multi-label delegation. We did make it clear in signing (7.1). \r\n\r\nThis is also not part of the demo zone, included in RFC5155.\r\n\r\nAs suggested text for an errata, may I offer:\r\n\r\n7.2.3.  No Data Responses, QTYPE is not DS\r\n\r\n  If the No Data Response is a result of an empty non-terminal derived \r\n  from an insecure delegation covered by an Opt-Out NSEC3 RR, the \r\n  closest provable encloser proof MUST be included in the response.  \r\n  The included NSEC3 RR that covers the \"next closer\" name for the \r\n  delegation MUST have the Opt-Out flag set to one. \r\n\r\n  In all other cases, the server MUST include the NSEC3 RR that matches \r\n  QNAME.  This NSEC3 RR MUST NOT have the bits corresponding to either \r\n  the QTYPE or CNAME set in its Type Bit Maps field.\r\n\r\n8.5.  Validating No Data Responses, QTYPE is not DS\r\n\r\n  If there is no NSEC3 RR present that matches QNAME, then the validator \r\n  MUST verify a closest provable encloser proof for the QNAME.  The \r\n  validator MUST verify that the Opt-Out bit is set in the NSEC3 RR that \r\n  covers the \"next closer\" name to the delegation name. This test covers \r\n  the case where the response is due to an Empty Non-Terminal derived \r\n  from an insecure delegation covered by an Opt-Out NSEC3 RR.\r\n\r\n  If there is an NSEC3 RR that matches QNAME present, the validator must \r\n  check that both the QTYPE and the CNAME type are not set in its Type \r\n  Bit Maps field.\r\n\r\n  Note that this test also covers the case where the NSEC3 RR exists\r\n  because it corresponds to an empty non-terminal, in which case the\r\n  NSEC3 RR will have an empty Type Bit Maps field.\r\n\r\nThe following message is the singularly most important one in the errata submission, from David Blacka, commenting on the order of the paragraphs:\r\n\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12835.html\r\n\r\nThe heads of the threads to review:\r\n\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12819.html\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12821.html\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12830.html\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12832.html\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12839.html\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12854.html\r\nand\r\nhttp://www.ietf.org/mail-archive/web/dnsext/current/msg12864.html",
    "submit_date": "2012-12-31",
    "submitter_name": "Edward Lewis",
    "verifier_id": "117",
    "verifier_name": "Ralph Droms",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3479",
    "doc-id": "RFC5155",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "Appendix A",
    "orig_text": "The example in Appendix A has an NSEC3 next hashed owner name field \nwith the non-base 32 characters 9, 0, and 1.",
    "correct_text": "The example should be changed so that the field in question is \nvalid base 32.",
    "notes": " --VERIFIER NOTES-- \n   The example actually uses base32hex (see RFC 4648) and is, therefore, valid.",
    "submit_date": "2013-02-07",
    "submitter_name": "Andy Newton",
    "verifier_id": "117",
    "verifier_name": "Ralph Droms",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3544",
    "doc-id": "RFC5155",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.3",
    "orig_text": "o  The Next Hashed Owner Name field is represented as an unpadded\r\n   sequence of case-insensitive base32 digits, without whitespace.",
    "correct_text": "o  The Next Hashed Owner Name field is represented as an unpadded \r\n   sequence of case-insensitive base32hex digits, without whitespace.",
    "notes": "RFC 4648 Section 7 says: 'This encoding may be referred to as \"base32hex\".  This encoding should not be regarded as the same as the \"base32\" encoding and should not be referred to as only \"base32\".'\r\n\r\nThere are many spots in RFC 5155 that use the term base32 where base32hex is the appropriate term. Section 3.3 above is the most important, but Section 1.1 uses the term as well Section 3 paragraph 4 and Section 3.2 paragraph 8.",
    "submit_date": "2013-03-10",
    "submitter_name": "Andy Newton",
    "verifier_id": "2",
    "verifier_name": "Ralph Droms",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4622",
    "doc-id": "RFC5155",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.2.8",
    "orig_text": "7.2.8.  Responding to Queries for NSEC3 Owner Names\r\n\r\n   The owner names of NSEC3 RRs are not represented in the NSEC3 RR\r\n   chain like other owner names.  As a result, each NSEC3 owner name is\r\n   covered by another NSEC3 RR, effectively negating the existence of\r\n   the NSEC3 RR.  This is a paradox, since the existence of an NSEC3 RR\r\n   can be proven by its RRSIG RRSet.\r\n\r\n   If the following conditions are all true:\r\n\r\n   o  the QNAME equals the owner name of an existing NSEC3 RR, and\r\n\r\n   o  no RR types exist at the QNAME, nor at any descendant of QNAME,\r\n\r\n   then the response MUST be constructed as a Name Error response\r\n   (Section 7.2.2).  Or, in other words, the authoritative name server\r\n   will act as if the owner name of the NSEC3 RR did not exist.\r\n",
    "correct_text": "7.2.8.  Responding to Queries for NSEC3 Owner Names\r\n\r\n   The owner names of NSEC3 RRs are not represented in the NSEC3 RR\r\n   chain like other owner names.  As a result, each NSEC3 owner name is\r\n   covered by another NSEC3 RR, effectively negating the existence of\r\n   the NSEC3 RR.  This is a paradox, since the existence of an NSEC3 RR\r\n   can be proven by its RRSIG RRSet.\r\n\r\n   If the following conditions are all true:\r\n\r\n   o  the QNAME equals the owner name of an existing NSEC3 RR, and\r\n\r\n   o  no RR types exist at the QNAME besides NSEC3, nor at any\r\n      descendant of QNAME,\r\n\r\n   then the response MUST be constructed as a Name Error response\r\n   (Section 7.2.2).  Or, in other words, the authoritative name server\r\n   will act as if the owner name of the NSEC3 RR did not exist.\r\n",
    "notes": "If the QNAME is equal to the owner name of an existing NSEC3 RR, then the NSEC3 RR type itself will exist at the QNAME, and the second condition will always be false.",
    "submit_date": "2016-02-18",
    "submitter_name": "Robert Edmonds",
    "verifier_id": "131",
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4993",
    "doc-id": "RFC5155",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "Appendix A",
    "orig_text": "  ; H(example)       = 0p9mhaveqvm6t7vbl5lop2u3t2rp3tom\r\n  ; H(a.example)     = 35mthgpgcu1qg68fab165klnsnk3dpvl\r\n  ; H(ai.example)    = gjeqe526plbf1g8mklp59enfd789njgi\r\n  ; H(ns1.example)   = 2t7b4g4vsa5smi47k61mv5bv1a22bojr\r\n  ; H(ns2.example)   = q04jkcevqvmu85r014c7dkba38o0ji5r\r\n  ; H(w.example)     = k8udemvp1j2f7eg6jebps17vp3n8i58h\r\n  ; H(*.w.example)   = r53bq7cc2uvmubfu5ocmm6pers9tk9en\r\n  ; H(x.w.example)   = b4um86eghhds6nea196smvmlo4ors995\r\n  ; H(y.w.example)   = ji6neoaepv8b5o6k4ev33abha8ht9fgc\r\n  ; H(x.y.w.example) = 2vptu5timamqttgl4luu9kg21e0aor3s\r\n  ; H(xx.example)    = t644ebqk9bibcna874givr6joj62mlhv\r\n- ; H(2t7b4g4vsa5smi47k61mv5bv1a22bojr.example)\r\n- ;                  = kohar7mbb8dc2ce8a9qvl8hon4k53uhi\r\n  example. 3600  IN SOA  ns1.example. bugs.x.w.example. 1 3600 300 (\r\n                         3600000 3600 )\r\n                 NS      ns1.example.\r\n                 NS      ns2.example.\r\n                 MX      1 xx.example.\r\n                 DNSKEY  256 3 7 AwEAAaetidLzsKWUt4swWR8yu0wPHPiUi8LU (\r\n                         sAD0QPWU+wzt89epO6tHzkMBVDkC7qphQO2h\r\n                         TY4hHn9npWFRw5BYubE= )\r\n                 DNSKEY  257 3 7 AwEAAcUlFV1vhmqx6NSOUOq2R/dsR7Xm3upJ (\r\n                         j7IommWSpJABVfW8Q0rOvXdM6kzt+TAu92L9\r\n                         AbsUdblMFin8CVF3n4s= )\r\n                 NSEC3PARAM 1 0 12 aabbccdd:1\r\n  0p9mhaveqvm6t7vbl5lop2u3t2rp3tom.example. NSEC3 1 1 12 aabbccdd (\r\n                         2t7b4g4vsa5smi47k61mv5bv1a22bojr MX DNSKEY NS\r\n                         SOA NSEC3PARAM RRSIG )\r\n! 2t7b4g4vsa5smi47k61mv5bv1a22bojr.example. A 192.0.2.127\r\n!                NSEC3   1 1 12 aabbccdd (\r\n                         2vptu5timamqttgl4luu9kg21e0aor3s A RRSIG )\r\n  2vptu5timamqttgl4luu9kg21e0aor3s.example. NSEC3 1 1 12 aabbccdd (\r\n                         35mthgpgcu1qg68fab165klnsnk3dpvl MX RRSIG )\r\n  35mthgpgcu1qg68fab165klnsnk3dpvl.example. NSEC3 1 1 12 aabbccdd (\r\n                         b4um86eghhds6nea196smvmlo4ors995 NS DS RRSIG )\r\n  a.example.     NS      ns1.a.example.\r\n                 NS      ns2.a.example.\r\n                 DS      58470 5 1 (\r\n                         3079F1593EBAD6DC121E202A8B766A6A4837206C )\r\n  ns1.a.example. A       192.0.2.5\r\n  ns2.a.example. A       192.0.2.6\r\n  ai.example.    A       192.0.2.9\r\n                 HINFO   \"KLH-10\" \"ITS\"\r\n                 AAAA    2001:db8:0:0:0:0:f00:baa9\r\n  b4um86eghhds6nea196smvmlo4ors995.example. NSEC3 1 1 12 aabbccdd (\r\n                         gjeqe526plbf1g8mklp59enfd789njgi MX RRSIG )\r\n  c.example.     NS      ns1.c.example.\r\n                 NS      ns2.c.example.\r\n  ns1.c.example. A       192.0.2.7\r\n  ns2.c.example. A       192.0.2.8\r\n  gjeqe526plbf1g8mklp59enfd789njgi.example. NSEC3 1 1 12 aabbccdd (\r\n                         ji6neoaepv8b5o6k4ev33abha8ht9fgc HINFO A AAAA\r\n                         RRSIG )\r\n  ji6neoaepv8b5o6k4ev33abha8ht9fgc.example. NSEC3 1 1 12 aabbccdd (\r\n                         k8udemvp1j2f7eg6jebps17vp3n8i58h )\r\n  k8udemvp1j2f7eg6jebps17vp3n8i58h.example. NSEC3 1 1 12 aabbccdd (\r\n!                        kohar7mbb8dc2ce8a9qvl8hon4k53uhi )\r\n! kohar7mbb8dc2ce8a9qvl8hon4k53uhi.example. NSEC3 1 1 12 aabbccdd (\r\n!                        q04jkcevqvmu85r014c7dkba38o0ji5r A RRSIG )\r\n  ns1.example.   A       192.0.2.1\r\n  ns2.example.   A       192.0.2.2\r\n  q04jkcevqvmu85r014c7dkba38o0ji5r.example. NSEC3 1 1 12 aabbccdd (\r\n                         r53bq7cc2uvmubfu5ocmm6pers9tk9en A RRSIG )\r\n  r53bq7cc2uvmubfu5ocmm6pers9tk9en.example. NSEC3 1 1 12 aabbccdd (\r\n                         t644ebqk9bibcna874givr6joj62mlhv MX RRSIG )\r\n  t644ebqk9bibcna874givr6joj62mlhv.example. NSEC3 1 1 12 aabbccdd (\r\n                         0p9mhaveqvm6t7vbl5lop2u3t2rp3tom HINFO A AAAA\r\n                         RRSIG )\r\n  *.w.example.   MX      1 ai.example.\r\n  x.w.example.   MX      1 xx.example.\r\n  x.y.w.example. MX      1 xx.example.\r\n  xx.example.    A       192.0.2.10\r\n                 HINFO   \"KLH-10\" \"TOPS-20\"\r\n                 AAAA    2001:db8:0:0:0:0:f00:baaa",
    "correct_text": "  ; H(example)       = 0p9mhaveqvm6t7vbl5lop2u3t2rp3tom\r\n  ; H(a.example)     = 35mthgpgcu1qg68fab165klnsnk3dpvl\r\n  ; H(ai.example)    = gjeqe526plbf1g8mklp59enfd789njgi\r\n  ; H(ns1.example)   = 2t7b4g4vsa5smi47k61mv5bv1a22bojr\r\n  ; H(ns2.example)   = q04jkcevqvmu85r014c7dkba38o0ji5r\r\n  ; H(w.example)     = k8udemvp1j2f7eg6jebps17vp3n8i58h\r\n  ; H(*.w.example)   = r53bq7cc2uvmubfu5ocmm6pers9tk9en\r\n  ; H(x.w.example)   = b4um86eghhds6nea196smvmlo4ors995\r\n  ; H(y.w.example)   = ji6neoaepv8b5o6k4ev33abha8ht9fgc\r\n  ; H(x.y.w.example) = 2vptu5timamqttgl4luu9kg21e0aor3s\r\n  ; H(xx.example)    = t644ebqk9bibcna874givr6joj62mlhv\r\n  example. 3600  IN SOA  ns1.example. bugs.x.w.example. 1 3600 300 (\r\n                         3600000 3600 )\r\n                 NS      ns1.example.\r\n                 NS      ns2.example.\r\n                 MX      1 xx.example.\r\n                 DNSKEY  256 3 7 AwEAAaetidLzsKWUt4swWR8yu0wPHPiUi8LU (\r\n                         sAD0QPWU+wzt89epO6tHzkMBVDkC7qphQO2h\r\n                         TY4hHn9npWFRw5BYubE= )\r\n                 DNSKEY  257 3 7 AwEAAcUlFV1vhmqx6NSOUOq2R/dsR7Xm3upJ (\r\n                         j7IommWSpJABVfW8Q0rOvXdM6kzt+TAu92L9\r\n                         AbsUdblMFin8CVF3n4s= )\r\n                 NSEC3PARAM 1 0 12 aabbccdd:1\r\n  0p9mhaveqvm6t7vbl5lop2u3t2rp3tom.example. NSEC3 1 1 12 aabbccdd (\r\n                         2t7b4g4vsa5smi47k61mv5bv1a22bojr MX DNSKEY NS\r\n                         SOA NSEC3PARAM RRSIG )\r\n! 2t7b4g4vsa5smi47k61mv5bv1a22bojr.example. NSEC3   1 1 12 aabbccdd (\r\n                         2vptu5timamqttgl4luu9kg21e0aor3s A RRSIG )\r\n  2vptu5timamqttgl4luu9kg21e0aor3s.example. NSEC3 1 1 12 aabbccdd (\r\n                         35mthgpgcu1qg68fab165klnsnk3dpvl MX RRSIG )\r\n  35mthgpgcu1qg68fab165klnsnk3dpvl.example. NSEC3 1 1 12 aabbccdd (\r\n                         b4um86eghhds6nea196smvmlo4ors995 NS DS RRSIG )\r\n  a.example.     NS      ns1.a.example.\r\n                 NS      ns2.a.example.\r\n                 DS      58470 5 1 (\r\n                         3079F1593EBAD6DC121E202A8B766A6A4837206C )\r\n  ns1.a.example. A       192.0.2.5\r\n  ns2.a.example. A       192.0.2.6\r\n  ai.example.    A       192.0.2.9\r\n                 HINFO   \"KLH-10\" \"ITS\"\r\n                 AAAA    2001:db8:0:0:0:0:f00:baa9\r\n  b4um86eghhds6nea196smvmlo4ors995.example. NSEC3 1 1 12 aabbccdd (\r\n                         gjeqe526plbf1g8mklp59enfd789njgi MX RRSIG )\r\n  c.example.     NS      ns1.c.example.\r\n                 NS      ns2.c.example.\r\n  ns1.c.example. A       192.0.2.7\r\n  ns2.c.example. A       192.0.2.8\r\n  gjeqe526plbf1g8mklp59enfd789njgi.example. NSEC3 1 1 12 aabbccdd (\r\n                         ji6neoaepv8b5o6k4ev33abha8ht9fgc HINFO A AAAA\r\n                         RRSIG )\r\n  ji6neoaepv8b5o6k4ev33abha8ht9fgc.example. NSEC3 1 1 12 aabbccdd (\r\n                         k8udemvp1j2f7eg6jebps17vp3n8i58h )\r\n  k8udemvp1j2f7eg6jebps17vp3n8i58h.example. NSEC3 1 1 12 aabbccdd (\r\n!                        q04jkcevqvmu85r014c7dkba38o0ji5r )\r\n  ns1.example.   A       192.0.2.1\r\n  ns2.example.   A       192.0.2.2\r\n  q04jkcevqvmu85r014c7dkba38o0ji5r.example. NSEC3 1 1 12 aabbccdd (\r\n                         r53bq7cc2uvmubfu5ocmm6pers9tk9en A RRSIG )\r\n  r53bq7cc2uvmubfu5ocmm6pers9tk9en.example. NSEC3 1 1 12 aabbccdd (\r\n                         t644ebqk9bibcna874givr6joj62mlhv MX RRSIG )\r\n  t644ebqk9bibcna874givr6joj62mlhv.example. NSEC3 1 1 12 aabbccdd (\r\n                         0p9mhaveqvm6t7vbl5lop2u3t2rp3tom HINFO A AAAA\r\n                         RRSIG )\r\n  *.w.example.   MX      1 ai.example.\r\n  x.w.example.   MX      1 xx.example.\r\n  x.y.w.example. MX      1 xx.example.\r\n  xx.example.    A       192.0.2.10\r\n                 HINFO   \"KLH-10\" \"TOPS-20\"\r\n                 AAAA    2001:db8:0:0:0:0:f00:baaa",
    "notes": "The obligatory RRSIG records have been omitted for clarity.\r\n\r\nThe zone prior to NSEC3 signing seems to have contained an unexpected\r\n    2t7b4g4vsa5smi47k61mv5bv1a22bojr.example.\tA\t192.0.2.127\r\nwhich was then lovingly included in the NSEC3 chain.\r\n\r\nThe error is readily detectable from the list of hashes of the original owner names. The source zone prior to signing can never contain a hashed name.\r\n\r\nFor completeness, B5 also needs a corresponding amendment, although this does not invalidate the proof presented therein.",
    "submit_date": "2017-04-13",
    "submitter_name": "Dick Franks",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  }
]
