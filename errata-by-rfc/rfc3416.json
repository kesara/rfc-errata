[
  {
    "errata_id": 2757,
    "doc-id": "RFC3416",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "PDU ::= SEQUENCE {\r\n           request-id INTEGER (-214783648..214783647),\r\n\r\n           error-status                -- sometimes ignored\r\n               INTEGER {\r\n                   noError(0),\r\n                   tooBig(1),\r\n                   noSuchName(2),      -- for proxy compatibility\r\n                   badValue(3),        -- for proxy compatibility\r\n                   readOnly(4),        -- for proxy compatibility\r\n                   genErr(5),\r\n                   noAccess(6),\r\n                   wrongType(7),\r\n                   wrongLength(8),\r\n                   wrongEncoding(9),\r\n                   wrongValue(10),\r\n                   noCreation(11),\r\n                   inconsistentValue(12),\r\n                   resourceUnavailable(13),\r\n                   commitFailed(14),\r\n                   undoFailed(15),\r\n                   authorizationError(16),\r\n                   notWritable(17),\r\n                   inconsistentName(18)\r\n               },\r\n\r\n           error-index                 -- sometimes ignored\r\n               INTEGER (0..max-bindings),\r\n\r\n           variable-bindings           -- values are sometimes ignored\r\n               VarBindList\r\n       }\r\n\r\n   BulkPDU ::=                         -- must be identical in\r\n       SEQUENCE {                      -- structure to PDU\r\n           request-id      INTEGER (-214783648..214783647),\r\n           non-repeaters   INTEGER (0..max-bindings),\r\n           max-repetitions INTEGER (0..max-bindings),\r\n\r\n           variable-bindings           -- values are ignored\r\n               VarBindList\r\n       }",
    "correct_text": "PDU ::= SEQUENCE {\r\n           request-id INTEGER (-2147483648..2147483647),\r\n           error-status                -- sometimes ignored\r\n               INTEGER {\r\n                   noError(0),\r\n                   tooBig(1),\r\n                   noSuchName(2),      -- for proxy compatibility\r\n                   badValue(3),        -- for proxy compatibility\r\n                   readOnly(4),        -- for proxy compatibility\r\n                   genErr(5),\r\n                   noAccess(6),\r\n                   wrongType(7),\r\n                   wrongLength(8),\r\n                   wrongEncoding(9),\r\n                   wrongValue(10),\r\n                   noCreation(11),\r\n                   inconsistentValue(12),\r\n                   resourceUnavailable(13),\r\n                   commitFailed(14),\r\n                   undoFailed(15),\r\n                   authorizationError(16),\r\n                   notWritable(17),\r\n                   inconsistentName(18)\r\n               },\r\n\r\n           error-index                 -- sometimes ignored\r\n               INTEGER (0..max-bindings),\r\n\r\n           variable-bindings           -- values are sometimes ignored\r\n               VarBindList\r\n       }\r\n\r\n   BulkPDU ::=                         -- must be identical in\r\n       SEQUENCE {                      -- structure to PDU\r\n           request-id      INTEGER (-2147483648..2147483647),\r\n           non-repeaters   INTEGER (0..max-bindings),\r\n           max-repetitions INTEGER (0..max-bindings),\r\n\r\n           variable-bindings           -- values are ignored\r\n               VarBindList\r\n       }",
    "notes": "Consider the following dump as a Response to a Get Request:\r\n\r\nReceived 125 bytes from UDP: [127.0.0.1]:161->[0.0.0.0]\r\n0000: 30 7B 02 01  03 30 11 02  04 5B 70 9B  75 02 03 00    0{...0...[p.u...\r\n0016: FF E3 04 01  01 02 01 03  04 2E 30 2C  04 0D 80 00    ..........0,....\r\n0032: 1F 88 80 82  0B 53 2D 67  01 8A 4D 02  01 01 02 03    .....S-g..M.....\r\n0048: 02 7B 92 04  03 77 65 73  04 0C DF 8B  2A FE 4A C5    .{...wes....*.J.\r\n0064: 4C 33 63 A6  2C C8 04 00  30 33 04 0D  80 00 1F 88    L3c.,...03......\r\n0080: 80 82 0B 53  2D 67 01 8A  4D 04 00 A2  20 02 04 67    ...S-g..M... ..g\r\n0096: DB 56 C4 02  01 00 02 01  00 30 12 30  10 06 0A 2B    .V.......0.0...+\r\n0112: 06 01 02 01  5C 01 01 01  00 42 02 03  E8             ....\\....B...\r\n\r\nNOTIFICATION-LOG-MIB::nlmConfigGlobalEntryLimit.0 = Gauge32: 1000\r\n\r\nIt was produced with the following command:\r\n$ snmpget -v3 -n \"\" -c public -u wes -a md5 -A setup_passphrase -l authNoPriv -d localhost nlmConfigGlobalEntryLimit.0\r\n\r\nWhile decoding (with my own tool) the message above, I met a constraint error with ASN.1 describing SNMPv3 message.\r\nThe actual issue with request-id parameter inside PDU & BulkPDU definitions.\r\n\r\nReceived value (from dump):\r\nrequest-id = 1742427844\r\n\r\nASN.1:\r\nrequest-id INTEGER (-214783648..214783647)\r\n\r\nYou can see that may be in number = 214783647, 4 is missed. I.e.: should be the following:  2147_4_83647\r\n\r\n----------\r\n\r\nVerifier Note: \r\n\r\nThere is indeed an error in the RFC, but the \"correction\" text is also incorrect.\r\nThe two changes needed are:\r\n\r\nOLD:\r\n           request-id INTEGER (-214783648..214783647),\r\nNEW:\r\n           request-id INTEGER (-2147483648..2147483647),\r\n\r\nOLD:\r\n           request-id      INTEGER (-214783648..214783647),\r\nNEW:\r\n           request-id      INTEGER (-2147483648..2147483647),\r\n",
    "submit_date": "2011-03-27",
    "submitter_name": "Mikhail Kulinich",
    "verifier_id": 106,
    "verifier_name": "Dan Romascanu",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3402,
    "doc-id": "RFC3416",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "max-bindings INTEGER ::= 2147483647",
    "correct_text": "max-bindings ::= INTEGER (2147483647)",
    "notes": "\n --VERIFIER NOTES-- \nAccording to section 4.2 of the ASN.1 spec, the grammar for the value notation is\r\n  ValueDefinition ::= identifier Type \"::=\" Value\r\n\r\nThe current text conforms to this grammar, and the usage in this particular case\r\nis closely analogous to the example the ASN.1 standard gives in that same\r\nsection.\r\n\r\nIt looks like the submitter wants to change the value definition into a\r\ntype definition, which to me would be inconsistent with how the the SNMP\r\nspecification employs max-bindings.",
    "submit_date": "2012-11-08",
    "submitter_name": "Mike Sauve",
    "verifier_id": 132,
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3403,
    "doc-id": "RFC3416",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "VarBindList ::= SEQUENCE (SIZE (0..max-bindings)) OF VarBind",
    "correct_text": "VarBindList ::= SEQUENCE {SIZE (0..max-bindings)} OF VarBind",
    "notes": "\n --VERIFIER NOTES-- \nAs reviewed by Juergen Schoenwaelder and Randy Presuhn:\r\n\r\nIt definitely conforms to the\r\ngrammar of the ASN.1 version cited in the references.  However,\r\nthe \"new\" ASN.1's changes should not have caused any problems\r\nfor the construct in question, though other parts of the grammar\r\nmight cause some heartburn.\r\n\r\nFor the old ASN.1 / new ASN.1 issues (seen through rose-colored\r\nglasses) see http://www.itu.int/ITU-T/studygroups/com17/changing-ASN/\r\n\r\nTo be really really sure, I tried compiling the module with the\r\ncommercial OSS  Nokalva ASN.1 syntax checker, configured to\r\nbe strict in requiring ASN.1 2002, rather than auto-detecting the\r\nASN.1 version.  It issues one warning (about the anonymous CHOICE\r\ninside the VarBind construct - no surprise) but has no problem\r\nwhatsoever with the constructs referred to in the proposed erratum.\r\n\r\nThe bottom line is that the grammar is correct as-is, and that the\r\nproblem is with the submitter's toolset.\r\n\r\nAs Juergen indicates, this is really a symptom of a subtler issue:\r\nSMI notation is *not* ASN.1, but  modules written in the SMI language\r\nhave used the IMPORTS construct to reference stuff from ASN.1\r\nmodules.  Back when I was implementing this stuff, our solution to\r\nthis problem was to make sure our tools understood both grammars\r\n(as well as the GDMO and some other notations), but this is going\r\ndeep into the guts of how vendors' products handle IMPORTS\r\nconstructs, and trying to standardize it would probably\r\nnot be a good use of time at this juncture.\r\n",
    "submit_date": "2012-11-08",
    "submitter_name": "Mike Sauve",
    "verifier_id": 132,
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  }
]
