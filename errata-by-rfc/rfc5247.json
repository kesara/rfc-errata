[
  {
    "errata_id": 1642,
    "doc-id": "RFC5247",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": 4,
    "orig_text": "   EAP pre-authentication\r\n      In EAP pre-authentication, an EAP peer pre-establishes EAP keying\r\n      material with an authenticator prior to arrival.  EAP\r\n      pre-authentication only affects the timing of EAP authentication,\r\n      but does not shorten or eliminate EAP (phase 1a) or AAA (phase 1b)\r\n      exchanges;  Discovery (phase 0) and Secure Association Protocol\r\n      (phase 2) exchanges occur as described in Section 1.3.  As a\r\n      result, the primary benefit is to enable EAP authentication to be\r\n      removed from the handoff critical path, thereby reducing latency.\r\n      Use of EAP pre-authentication within IEEE 802.11 is described in\r\n      [IEEE-802.11] and [8021XPreAuth].\r\n\r\n   Proactive key distribution\r\n      In proactive key distribution, keying material and authorizations\r\n      are transported from the backend authentication server to a\r\n      candidate authenticator in advance of a handoff.  As a result, EAP\r\n      (phase 1a) is not needed, but the Discovery (phase 0), and Secure\r\n      Association Protocol exchanges (phase 2) are still necessary.\r\n      Within the AAA exchange (phase 1b), authorization and key\r\n      distribution functions are typically supported, but not\r\n      authentication.  Proactive key distribution is described in\r\n      [MishraPro], [IEEE-03-084], and [HANDOFF].\r\n\r\n",
    "correct_text": "   EAP pre-authentication\r\n      In EAP pre-authentication, an EAP peer pre-establishes EAP \r\n      keying material with an authenticator through which the peer has\r\n      routed the EAP authentication prior to arrival.  EAP\r\n      pre-authentication only affects the timing of EAP \r\n      authentication, but does not shorten or eliminate EAP (phase 1a)\r\n      or AAA (phase 1b) exchanges through the authenticator.\r\n      Discovery (phase 0) and Secure Association Protocol (phase 2)\r\n      exchanges occur as described in Section 1.3.  As a result, the\r\n      primary benefit is to enable EAP authentication to be removed\r\n      from the handoff critical path, thereby reducing latency.  Use\r\n      of EAP pre-authentication within IEEE 802.11 is described in\r\n      [IEEE-802.11].\r\n\r\n   Proactive key distribution\r\n      In proactive key distribution, keying material and authorizations\r\n      are transported from the backend authentication server to a\r\n      candidate authenticator in advance of a handoff.  As a result, EAP\r\n      (phase 1a) is not needed, but the Discovery (phase 0), and Secure\r\n      Association Protocol exchanges (phase 2) are still necessary.\r\n      Within the AAA exchange (phase 1b), authorization and key\r\n      distribution functions are typically supported, but not\r\n      authentication.  Proactive key distribution is described in\r\n      [MishraPro], [IEEE-03-084], [HANDOFF] and [8021XPreAuth].\r\n",
    "notes": "The EAP pre-authentication definition should be more clear that an EAP peer \r\nruns EAP authentication through the target authenticator before EAP keying material will be pre-established with the target authenticator prior to arrival.\n --VERIFIER NOTES-- \nDiscussion between EAP and HOKEY chairs and the ADs revealed that this is not an appropriate change.",
    "submit_date": "2008-12-20",
    "submitter_name": "Yoshihiro Ohba",
    "verifier_id": 103,
    "verifier_name": "Jari Arkko",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 1711,
    "doc-id": "RFC5247",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 4,
    "orig_text": "   EAP pre-authentication\r\n      In EAP pre-authentication, an EAP peer pre-establishes EAP keying\r\n      material with an authenticator prior to arrival.  EAP\r\n      pre-authentication only affects the timing of EAP authentication,\r\n      but does not shorten or eliminate EAP (phase 1a) or AAA (phase 1b)\r\n      exchanges;  Discovery (phase 0) and Secure Association Protocol\r\n      (phase 2) exchanges occur as described in Section 1.3.  As a\r\n      result, the primary benefit is to enable EAP authentication to be\r\n      removed from the handoff critical path, thereby reducing latency.\r\n      Use of EAP pre-authentication within IEEE 802.11 is described in\r\n      [IEEE-802.11] and [8021XPreAuth].\r\n\r\n   Proactive key distribution\r\n      In proactive key distribution, keying material and authorizations\r\n      are transported from the backend authentication server to a\r\n      candidate authenticator in advance of a handoff.  As a result, EAP\r\n      (phase 1a) is not needed, but the Discovery (phase 0), and Secure\r\n      Association Protocol exchanges (phase 2) are still necessary.\r\n      Within the AAA exchange (phase 1b), authorization and key\r\n      distribution functions are typically supported, but not\r\n      authentication.  Proactive key distribution is described in\r\n      [MishraPro], [IEEE-03-084], and [HANDOFF].\r\n\r\n",
    "correct_text": "Move the reference 8021XPreAuth to the second paragraph.",
    "notes": "The reference [8021XPreAuth] describes a mechanism in which EAP\r\nauthentication happens only once with the serving authenticator, i.e.,\r\none EAP authentication with the serving authenticator generates\r\nmultiple MSKs and distributed to serving authenticator and target\r\nauthenticator, and there is no additional EAP authentication\r\nperformed between peer and target authenticator. This does not match\r\nthe definition of pre-authentication as described by the first paragraph;\r\nhence the reference should be moved to the second paragraph.",
    "submit_date": "2008-12-20",
    "submitter_name": "Yoshihiro Ohba",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5011,
    "doc-id": "RFC5247",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "Appendix A",
    "orig_text": "   EAP-AKA\r\n\r\n      EAP-AKA is defined in [RFC4187].  The EAP-AKA Session-Id is the\r\n      concatenation of the EAP Type Code (0x17) with the contents of the\r\n      RAND field from the AT_RAND attribute, followed by the contents of\r\n      the AUTN field in the AT_AUTN attribute:\r\n\r\n      Session-Id = 0x17 || RAND || AUTN\r\n",
    "correct_text": "   EAP-AKA\r\n\r\n      EAP-AKA is defined in [RFC4187].  When using full authentication,\r\n      the EAP-AKA Session-Id is the\r\n      concatenation of the EAP Type Code (0x17) with the contents of the\r\n      RAND field from the AT_RAND attribute, followed by the contents of\r\n      the AUTN field in the AT_AUTN attribute:\r\n\r\n      Session-Id = 0x17 || RAND || AUTN\r\n\r\n      When using fast re-authentication, the EAP-AKA Session-Id is the\r\n      concatenation of the EAP Type Code (0x17) with the contents of the\r\n      NONCE_S field from the AT_NONCE_S attribute, followed by the\r\n      contents of the MAC field from the AT_MAC attribute from\r\n      EAP-Request/AKA-Reauthentication:\r\n\r\n      Session-Id = 0x17 || NONCE_S || MAC\r\n",
    "notes": "RFC 5247 was supposed to define exported parameters for existing EAP methods in Appendix A. The way Session-Id was defined for EAP-AKA and EAP-SIM works only for the full authentication case, i.e., it cannot be used when the optional fast re-authentication case is used since the used parameters (RAND, AUTN, NONCE_MT) are not used in the fast re-authentication case. Based on RFC 4187 chapter 5.2 (and similar chapter in RFC 4186), NONCE_S corresponds to RAND and MAC in EAP-Request/AKA-Reauthentication corresponds to AUTN. That would seem to imply that the Session-Id could be defined using NONCE_S and MAC instead of RAND and AUTN/NONCE_MT.\r\n\r\nThe corrected text in this errata shows the changes for EAP-AKA. Similar changes should be done for EAP-SIM (replace RAND || NONCE_MT with NONCE_S || MAC for fast re-authentication).\r\n\r\nIt should be noted that EAP-AKA' (RFC 5448) specification did not follow the MUST requirement in RFC 5247, i.e., it did not define Session-Id derivation. That could be done in an update of RFC 5247 with a clone of EAP-AKA design.\r\n\r\nIn addition, RFC 5247 did not define Session-Id definition for PEAP and there does not seem to exist any IETF RFC which such definition. That could also be included in RFC 5247 update and done similarly to EAP-TLS (Session-Id = EAP type || client.random || server.random).\r\n\r\nIt would be good to have a clear IETF reference for these details since EAP Session-Id is needed for ERP (RFC 6696) and that is now seeing additional implementation and deployment interest as a component of FILS authentication (IEEE 802.11ai). Same definition of EAP Session-Id is needed to make FILS shared key authentication implementation interoperable.",
    "submit_date": "2017-05-07",
    "submitter_name": "Jouni Malinen",
    "verifier_id": 162,
    "verifier_name": "Roman Danyliw",
    "update_date": "2020-07-27 06:29:43"
  }
]
