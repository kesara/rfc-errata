[
  {
    "errata_id": "1440",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "8.3",
    "orig_text": "   When the value of this counter reaches the protocol parameter\r\n   'Path.Max.Retrans', the endpoint should mark the corresponding\r\n   destination address as inactive if it is not so marked, and may also\r\n   optionally report to the upper layer the change of reachability of\r\n   this destination address.  After this, the endpoint should continue\r\n   HEARTBEAT on this destination address but should stop increasing the\r\n   counter.",
    "correct_text": "   When the value of this counter exceeds the protocol parameter\r\n   'Path.Max.Retrans', the endpoint should mark the corresponding\r\n   destination address as inactive if it is not so marked, and may also\r\n   optionally report to the upper layer the change of reachability of\r\n   this destination address.  After this, the endpoint should continue\r\n   HEARTBEAT on this destination address but should stop increasing the\r\n   counter.",
    "notes": "The path should be considered inactive, when the error counter exceeds\r\nthe threshold. This is stated correctly in 8.2.",
    "submit_date": "2008-06-12",
    "submitter_name": "Michael TÃ¼xen",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1574",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "9.2",
    "orig_text": "Once an endpoint has reached the SHUTDOWN-RECEIVED state, it MUST NOT\r\n send a SHUTDOWN in response to a ULP request, and should discard\r\n subsequent SHUTDOWN chunks.",
    "correct_text": "Once an endpoint has reached the SHUTDOWN-RECEIVED state, it MUST NOT\r\n send a SHUTDOWN in response to a ULP request, and should discard\r\n subsequent ULP shutdown requests.",
    "notes": "The text never intended the SCTP endpoint to ignore SHUTDOWN\r\nchunks from its peer. If it did the endpoints could never gracefully\r\nterminate a associations in some cases.",
    "submit_date": "2008-10-14",
    "submitter_name": "Randall Stewart",
    "verifier_id": "114",
    "verifier_name": "Magnus Westerlund",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2592",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "14.1",
    "orig_text": "14.1.  IETF-Defined Chunk Extension\r\n\r\n   The assignment of new chunk parameter type codes is done through an\r\n   IETF Consensus action, as defined in [RFC2434].  Documentation of the\r\n   chunk parameter MUST contain the following information:",
    "correct_text": "14.1.  IETF-Defined Chunk Extension\r\n\r\n   The assignment of new chunk type codes is done through an\r\nIETF Consensus action, as defined in [RFC2434].  Documentation of the\r\nchunk type MUST contain the following information:",
    "notes": "The OLD text relates to parameter types, and not chunk types, and already appears, correctly, in section 14.2.  Section 14.1 is about chunk types,as the NEW text says.",
    "submit_date": "2010-10-29",
    "submitter_name": "tom petch",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3291",
    "doc-id": "RFC4960",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "3.3.2",
    "orig_text": "          Variable Parameters                  Status     Type Value\r\n          -------------------------------------------------------------\r\n          IPv4 Address (Note 1)               Optional    5 IPv6 Address\r\n          (Note 1)               Optional    6 Cookie Preservative\r\n          Optional    9 Reserved for ECN Capable (Note 2)   Optional\r\n          32768 (0x8000) Host Name Address (Note 3)          Optional\r\n          11 Supported Address Types (Note 4)    Optional    12",
    "correct_text": "          Variable Parameters                  Status     Type Value\r\n          -------------------------------------------------------------\r\n          IPv4 Address (Note 1)               Optional    5 \r\n          IPv6 Address (Note 1)               Optional    6\r\n          Cookie Preservative                 Optional    9\r\n          Reserved for ECN Capable (Note 2)   Optional    32768 (0x8000)\r\n          Host Name Address (Note 3)          Optional    11\r\n          Supported Address Types (Note 4)    Optional    12",
    "notes": "Something placed the line ending in the wrong place making the table nearly\r\nunreadable.",
    "submit_date": "2012-07-21",
    "submitter_name": "Eric W. Biederman",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3423",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "B",
    "orig_text": "   unsigned long\r\n   generate_crc32c(unsigned char *buffer, unsigned int length)\r\n   {\r\n     unsigned int i;\r\n     unsigned long crc32 = ~0L;",
    "correct_text": "   unsigned long\r\n   generate_crc32c(unsigned char *buffer, unsigned int length)\r\n   {\r\n     unsigned int i;\r\n     unsigned long crc32 = 0xffffffffL;",
    "notes": "The remainder register (crc32) should be initialized to 0xffffffffL rather than ~0L, for correct operation on platforms where unisigned long is longer than 32 bits. I.e., 64-bit platforms.",
    "submit_date": "2012-12-01",
    "submitter_name": "Pontus Andersson",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3788",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "8.1",
    "orig_text": "   An endpoint shall keep a counter on the total number of consecutive\r\n   retransmissions to its peer (this includes retransmissions to all the\r\n   destination transport addresses of the peer if it is multi-homed),\r\n   including unacknowledged HEARTBEAT chunks.  \r\n",
    "correct_text": "An endpoint shall keep a counter on the total number of consecutive\r\nretransmissions to its peer (this includes data retransmissions \r\nto all the destination transport addresses of the peer if it is \r\nmulti-homed),including the number of unacknowledged HEARTBEAT \r\nchunks observed on the path which currently is used for data \r\ntransfer. Unacknowledged HEARTBEAT chunks observed on paths \r\ndifferent from the path currently used for data transfer shall \r\nnot increment the association error counter, as this could lead \r\nto association closure even if the path which \r\ncurrently is used for data transfer is available (but idle). \r\n",
    "notes": "RFC4960 Endpoint Failure detection mechanism is deficient in that \r\nHB failures on some failing paths may take the association down, even \r\nif other paths are working perfectly, but simply at the time no data \r\nor HBs are being sent on the working paths.\r\n\r\nThe situation occurs when the association is idle \r\n(no data is being transmitted) and the HBI settings on \r\nthe failing paths are much more aggressive than the HBI \r\nset on the working paths. RFC6458 allows for specification \r\nof the HBI on a per destination address whereby\r\nsuch in-homogeneous setting of the HBI can occur.\r\n\r\nThe solution proposed to the issue is to demand that\r\nHB failures observed on paths different from the path \r\ncurrently used for data transfer do\r\nnot contribute to the association error counter. \r\nHB failures observed on the path currently used for \r\ndata transfer, when this path is idle, \r\n shall contribute to the association error counter. \r\nThereby supporting Endpoint Failure detection when the\r\nassociation is idle. When the association is transmitting data, \r\nthe fate of the data transmissions and retransmissions \r\nwill serve to instantiate Endpoint Failure detection.",
    "submit_date": "2013-11-06",
    "submitter_name": "Karen Nielsen",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3804",
    "doc-id": "RFC4960",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "3.3.2",
    "orig_text": null,
    "correct_text": null,
    "notes": "something was placed in the ending line that made it almost unreadable.\n --VERIFIER NOTES-- \nThis errata is not technical and the presumably editorial part is not identifiable. ",
    "submit_date": "2013-11-16",
    "submitter_name": "Stephen Galvan Jr",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4071",
    "doc-id": "RFC4960",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "6.1",
    "orig_text": "      However, regardless of the value of rwnd (including if it is 0),\r\n      the data sender can always have one DATA chunk in flight to the\r\n      receiver if allowed by cwnd (see rule B below).  This rule allows\r\n      the sender to probe for a change in rwnd that the sender missed\r\n      due to the SACK having been lost in transit from the data receiver\r\n      to the data sender.\r\n",
    "correct_text": "[empty]",
    "notes": "The whole paragraph is a one-to-one repetition of the final part of first paragraph of Rule A).\r\nThe position of the paragraph does not affect meaning, but the repetition hinders readability.",
    "submit_date": "2014-08-06",
    "submitter_name": "Federico Zuccardi Merli",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4250",
    "doc-id": "RFC4960",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "3.3.4",
    "orig_text": "                     +--------------------------------+\r\n                     |   Cumulative TSN Ack = 12      |\r\n                     +--------------------------------+\r\n                     |        a_rwnd = 4660           |\r\n                     +----------------+---------------+\r\n                     | num of block=2 | num of dup=0  |\r\n                     +----------------+---------------+\r\n                     |block #1 strt=2 |block #1 end=3 |\r\n                     +----------------+---------------+\r\n                     |block #2 strt=5 |block #2 end=5 |\r\n                     +----------------+---------------+",
    "correct_text": "                     +--------------------------------+\r\n                     |   Cumulative TSN Ack = 12      |\r\n                     +--------------------------------+\r\n                     |        a_rwnd = 4660           |\r\n                     +----------------+---------------+\r\n                     | num of block=2 | num of dup=0  |\r\n                     +----------------+---------------+\r\n                     |block #1 strt=2 |block #1 end=3 |\r\n                     +----------------+---------------+\r\n                     |block #2 strt=5 |block #2 end=6 |\r\n                     +----------------+---------------+",
    "notes": "According to the illustration of the DATA chunks just above it, with \"still missing\" TSN 13 and TSN 16, the block #2 end=6 not 5.\n --VERIFIER NOTES-- \nReasoning provided by M. TÃ¼xen: \"I think the RFC is correct. The first block is TSN 14 and TSN 15. Since the cumulative TSN ack is 12, this\r\nis [2, 3]. The second block consists only of TSN 17. Therefore is is reported as [5, 5].\r\nThe block [5, 6] as you suggest would mean that TSN 17 and TSN 18 would have been received, which\r\nis not the case described in the illustration.\"   ",
    "submit_date": "2015-01-31",
    "submitter_name": "Phung Pham",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4400",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "5.1.6.",
    "orig_text": "                                    /-- INIT ACK [Veri Tag=Tag_A,\r\n                                   /             I-Tag=Tag_Z,\r\n    (Cancel T1-init timer) <------/              Cookie_Z, & other info]\r\n                                         (destroy temp TCB)\r\n    COOKIE ECHO [Cookie_Z] ------\\\r\n    (Start T1-init timer)         \\\r\n    (Enter COOKIE-ECHOED state)    \\---> (build TCB enter ESTABLISHED\r\n                                          state)\r\n                                   /---- COOKIE-ACK\r\n                                  /\r\n    (Cancel T1-init timer, <-----/",
    "correct_text": "                                    /-- INIT ACK [Veri Tag=Tag_A,\r\n                                   /             I-Tag=Tag_Z,\r\n    (Cancel T1-init timer) <------/              Cookie_Z, & other info]\r\n                                         (destroy temp TCB)\r\n    COOKIE ECHO [Cookie_Z] ------\\\r\n    (Start T1-cookie timer)       \\\r\n    (Enter COOKIE-ECHOED state)    \\---> (build TCB enter ESTABLISHED\r\n                                          state)\r\n                                   /---- COOKIE-ACK\r\n                                  /\r\n    (Cancel T1-cookie timer, <---/",
    "notes": "Upon reception of an INIT ACK Endpoint A should start the T1-cookie timer, not the T1-init timer. Reception of a COOKIE-ACK cancels The T1-cookie timer, not the T1-init timer.",
    "submit_date": "2015-06-25",
    "submitter_name": "Julien Pourtet",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4656",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "GLOBAL",
    "orig_text": "6.2.  Acknowledgement on Reception of DATA Chunks\r\n\r\n   The SCTP endpoint MUST always acknowledge the reception of each valid\r\n   DATA chunk when the DATA chunk received is inside its receive window.\r\n\r\n   When the receiver's advertised window is 0, the receiver MUST drop\r\n   any new incoming DATA chunk with a TSN larger than the largest TSN\r\n   received so far.  If the new incoming DATA chunk holds a TSN value\r\n   less than the largest TSN received so far, then the receiver SHOULD\r\n   drop the largest TSN held for reordering and accept the new incoming\r\n   DATA chunk.  In either case, if such a DATA chunk is dropped, the\r\n   receiver MUST immediately send back a SACK with the current receive\r\n   window showing only DATA chunks received and accepted so far.  The\r\n   dropped DATA chunk(s) MUST NOT be included in the SACK, as they were\r\n   not accepted.  The receiver MUST also have an algorithm for\r\n   advertising its receive window to avoid receiver silly window\r\n   syndrome (SWS), as described in [RFC0813].  The algorithm can be\r\n   similar to the one described in Section 4.2.3.3 of [RFC1122].\r\n\r\n   The guidelines on delayed acknowledgement algorithm specified in\r\n   Section 4.2 of [RFC2581] SHOULD be followed.  Specifically, an\r\n   acknowledgement SHOULD be generated for at least every second packet\r\n   (not every second DATA chunk) received, and SHOULD be generated\r\n   within 200 ms of the arrival of any unacknowledged DATA chunk.  In\r\n   some situations, it may be beneficial for an SCTP transmitter to be\r\n   more conservative than the algorithms detailed in this document\r\n   allow.  However, an SCTP transmitter MUST NOT be more aggressive than\r\n   the following algorithms allow.\r\n\r\n   An SCTP receiver MUST NOT generate more than one SACK for every\r\n   incoming packet, other than to update the offered window as the\r\n   receiving application consumes new data.\r\n\r\n   IMPLEMENTATION NOTE: The maximum delay for generating an\r\n   acknowledgement may be configured by the SCTP administrator, either\r\n   statically or dynamically, in order to meet the specific timing\r\n   requirement of the protocol being carried.\r\n\r\n   An implementation MUST NOT allow the maximum delay to be configured\r\n   to be more than 500 ms.  In other words, an implementation MAY lower\r\n   this value below 500 ms but MUST NOT raise it above 500 ms.\r\n\r\n[ remaining of the section unchanged ]\r\n\r\n***********************************************************************\r\n15.  Suggested SCTP Protocol Parameter Values\r\n\r\n   The following protocol parameters are RECOMMENDED:\r\n\r\n      RTO.Initial - 3 seconds\r\n      RTO.Min - 1 second\r\n      RTO.Max - 60 seconds\r\n      Max.Burst - 4\r\n      RTO.Alpha - 1/8\r\n      RTO.Beta - 1/4\r\n      Valid.Cookie.Life - 60 seconds\r\n      Association.Max.Retrans - 10 attempts\r\n      Path.Max.Retrans - 5 attempts (per destination address)\r\n      Max.Init.Retransmits - 8 attempts\r\n      HB.interval - 30 seconds\r\n      HB.Max.Burst - 1\r\n\r\n   IMPLEMENTATION NOTE: The SCTP implementation may allow ULP to\r\n   customize some of these protocol parameters (see Section 10).\r\n\r\n   Note: RTO.Min SHOULD be set as recommended above.",
    "correct_text": "6.2.  Acknowledgement on Reception of DATA Chunks\r\n\r\n   The SCTP endpoint MUST always acknowledge the reception of each valid\r\n   DATA chunk when the DATA chunk received is inside its receive window.\r\n\r\n   When the receiver's advertised window is 0, the receiver MUST drop\r\n   any new incoming DATA chunk with a TSN larger than the largest TSN\r\n   received so far.  If the new incoming DATA chunk holds a TSN value\r\n   less than the largest TSN received so far, then the receiver SHOULD\r\n   drop the largest TSN held for reordering and accept the new incoming\r\n   DATA chunk.  In either case, if such a DATA chunk is dropped, the\r\n   receiver MUST immediately send back a SACK with the current receive\r\n   window showing only DATA chunks received and accepted so far.  The\r\n   dropped DATA chunk(s) MUST NOT be included in the SACK, as they were\r\n   not accepted.  The receiver MUST also have an algorithm for\r\n   advertising its receive window to avoid receiver silly window\r\n   syndrome (SWS), as described in [RFC0813].  The algorithm can be\r\n   similar to the one described in Section 4.2.3.3 of [RFC1122].\r\n\r\n   The guidelines on delayed acknowledgement algorithm specified in\r\n   Section 4.2 of [RFC2581] SHOULD be followed.  Specifically, an\r\n   acknowledgement SHOULD be generated for at least every second packet\r\n   (not every second DATA chunk) received, and SHOULD be generated\r\n   within 200 ms of the arrival of any unacknowledged DATA chunk.  In\r\n   some situations, it may be beneficial for an SCTP transmitter to be\r\n   more conservative than the algorithms detailed in this document\r\n   allow.  However, an SCTP transmitter MUST NOT be more aggressive than\r\n   the following algorithms allow.\r\n\r\n   An SCTP receiver MUST NOT generate more than one SACK for every\r\n   incoming packet, other than to update the offered window as the\r\n   receiving application consumes new data.\r\n\r\n   IMPLEMENTATION NOTE: The maximum delay for generating an\r\n   acknowledgement may be configured by the SCTP administrator, either\r\n   statically or dynamically, in order to meet the specific timing\r\n   requirement of the protocol being carried.\r\n\r\n   An implementation MUST NOT allow the maximum delay (protocol \r\n   parameter 'SACK.Delay') to be configured to be more than 500 ms.\r\n   In other words, an implementation MAY lower the value of \r\n   'SACK.Delay' below 500 ms but MUST NOT raise it above 500 ms.\r\n\r\n[ remaining of the section unchanged ]\r\n\r\n***********************************************************************\r\n15.  Suggested SCTP Protocol Parameter Values\r\n\r\n   The following protocol parameters are RECOMMENDED:\r\n\r\n      RTO.Initial - 3 seconds\r\n      RTO.Min - 1 second\r\n      RTO.Max - 60 seconds\r\n      Max.Burst - 4\r\n      RTO.Alpha - 1/8\r\n      RTO.Beta - 1/4\r\n      Valid.Cookie.Life - 60 seconds\r\n      Association.Max.Retrans - 10 attempts\r\n      Path.Max.Retrans - 5 attempts (per destination address)\r\n      Max.Init.Retransmits - 8 attempts\r\n      HB.interval - 30 seconds\r\n      HB.Max.Burst - 1\r\n      SACK.Delay - 200 milliseconds\r\n\r\n   IMPLEMENTATION NOTE: The SCTP implementation may allow ULP to\r\n   customize some of these protocol parameters (see Section 10).\r\n\r\n   Note: RTO.Min SHOULD be set as recommended above.",
    "notes": "In section 6.2, the name 'SACK.Delay' is given to the protocol parameter that indicate themaximum delay for generating a SACK.\r\n\r\nIn section 15, the list of SCTP protocol parameters and associated recommended value is not complete. The maximum delay for generating an acknowledgement ('SACK.Delay') is missing from this list.",
    "submit_date": "2016-04-06",
    "submitter_name": "Lionel Morand",
    "verifier_id": "137",
    "verifier_name": "Spencer Dawkins",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4876",
    "doc-id": "RFC4960",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "5.1.5.",
    "orig_text": "3)  Compare the port numbers and the Verification Tag contained\r\n    within the COOKIE ECHO chunk to the actual port numbers and the\r\n    Verification Tag within the SCTP common header of the received\r\n    packet.  If these values do not match, the packet MUST be\r\n    silently discarded.",
    "correct_text": "3)  Compare the port numbers and the Verification Tag contained\r\n    within the TCB data carried in the State Cookie to the actual\r\n    port numbers and the Verification Tag within the SCTP common\r\n    header of the received packet.  If these values do not match,\r\n    the packet MUST be silently discarded.",
    "notes": "The comparison has to be performed between the values found in the SCTP common header and what is inside the TCB carried in the State Cookie. The current phrasing can lead to think that there are Verifcation Tag and port number fields within the COOKIE ECHO chunk yet outside the State Cookie.\n --VERIFIER NOTES-- \nThis errata was withdrawn by the submitter, and was not included in draft-ietf-tsvwg-rfc4960-errata.",
    "submit_date": "2016-12-01",
    "submitter_name": "Julien Pourtet",
    "verifier_id": "137",
    "verifier_name": "Spencer Dawkins",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5003",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "10.1",
    "orig_text": "   o  Receive Unacknowledged Message\r\n\r\n      Format: RECEIVE_UNACKED(data retrieval id, buffer address, buffer\r\n              size, [,stream id] [, stream sequence number] [,partial\r\n              flag] [,payload protocol-id])",
    "correct_text": "   O) Receive Unacknowledged Message\r\n\r\n      Format: RECEIVE_UNACKED(data retrieval id, buffer address, buffer\r\n              size, [,stream id] [, stream sequence number] [,partial\r\n              flag] [,payload protocol-id])",
    "notes": "This is part of a lettered list of items, and surrounding sublists use lowercase \"o\" as a bullet. This item appears to have been mis-corrected to an \"o\" sublist item when it should be item \"O)\" of the primary list, as evidenced by the preceding item \"N)\" and following \"P)\"",
    "submit_date": "2017-04-24",
    "submitter_name": "Max Mattes",
    "verifier_id": "137",
    "verifier_name": "Spencer Dawkins",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5202",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.3.4.",
    "orig_text": "   The SACK also contains zero or more Gap Ack Blocks.  Each Gap Ack\r\n   Block acknowledges a subsequence of TSNs received following a break\r\n   in the sequence of received TSNs.  By definition, all TSNs\r\n   acknowledged by Gap Ack Blocks are greater than the value of the\r\n   Cumulative TSN Ack.",
    "correct_text": "   The SACK also contains zero or more Gap Ack Blocks.  Each Gap Ack\r\n   Block acknowledges a subsequence of TSNs received following a break\r\n   in the sequence of received TSNs.  By definition, all TSNs\r\n   acknowledged by Gap Ack Blocks are greater than the value of the\r\n   Cumulative TSN Ack.\r\n\r\n   The sequence of Gap Ack Blocks MUST be an increasing sequence of\r\n   ranges, non-intersecting, and with at least one TSN as a gap between\r\n   each Block and between the Cumulative TSN Ack and the first Block.",
    "notes": "It seems clear that the Gap Ack sequence must be sent in its \"canonical\" form (monotonic non-overlapping ranges) but I can't find anywhere where this is actually stated.\r\n\r\nIt is implied (but not stated) by the following sentence on the next page, which implies that there is no freedom of choice in how the Gap Ack sequence is encoded:\r\n\r\n    \"For example, assume that ...\r\n    then the parameter part of the SACK MUST be constructed as follows\"\r\n\r\nVerifier Notes:\r\nThis errata suggests two corrections:\r\n(1) Ensure that the gap ack blocks are not overlapping.\r\n(2) Ensure that the gap ack blocks are monotonic.\r\n\r\nSubsequent discussion in TSVWG, as documented in \r\nhttps://tools.ietf.org/html/draft-ietf-tsvwg-rfc4960-errata-06#section-3.47,\r\n has converged on this resolution:\r\n\r\n* The intention actually was to have the gap blocks isolated. So (1) ought \r\n   to be included in the next revision of SCTP. \r\n* In some cases gap blocks might not be monotonic. This is the same as with \r\n  the handling of gap reports in TCP SACK. Therefore (2) ought not be \r\n  included in the next revision of SCTP.\r\n\r\n",
    "submit_date": "2017-12-13",
    "submitter_name": "Nicholas Wilson",
    "verifier_id": "2",
    "verifier_name": "Spencer Dawkins",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5957",
    "doc-id": "RFC4960",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "10.1",
    "orig_text": "D) Abort\r\n\r\n      Format: ABORT(association id [, Upper Layer Abort Reason]) ->\r\n      result\r\n\r\n   Ungracefully closes an association.  Any locally queued user data\r\n   will be discarded, and an ABORT chunk is sent to the peer.  A success\r\n   code will be returned on successful abort of the association.  If\r\n   attempting to abort the association results in a failure, an error\r\n   code shall be returned.\r\n\r\n   Mandatory attributes:\r\n\r\n   o association id - local handle to the SCTP association.\r\n\r\n   Optional attributes:\r\n\r\n   o Upper Layer Abort Reason - reason of the abort to be passed to the\r\n   peer.\r\n\r\n   None.",
    "correct_text": "D) Abort\r\n\r\n      Format: ABORT(association id [, Upper Layer Abort Reason]) ->\r\n      result\r\n\r\n   Ungracefully closes an association.  Any locally queued user data\r\n   will be discarded, and an ABORT chunk is sent to the peer.  A success\r\n   code will be returned on successful abort of the association.  If\r\n   attempting to abort the association results in a failure, an error\r\n   code shall be returned.\r\n\r\n   Mandatory attributes:\r\n\r\n   o association id - local handle to the SCTP association.\r\n\r\n   Optional attributes:\r\n\r\n   o Upper Layer Abort Reason - reason of the abort to be passed to the\r\n   peer.\r\n",
    "notes": "There is an extra \"None.\" at the end but it is not necessary because there is an optional attribute.",
    "submit_date": "2020-01-13",
    "submitter_name": "FÃ¶ldvÃ¡ri ZoltÃ¡n",
    "verifier_id": "153",
    "verifier_name": "Mirja KÃ¼hlewind",
    "update_date": "2020-01-13 07:52:43"
  },
  {
    "errata_id": "5958",
    "doc-id": "RFC4960",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "10.1",
    "orig_text": null,
    "correct_text": null,
    "notes": "From A) to I) there are \"Mandatory attributes\" and \"Optional attributes\" section for each primitive.\r\n\"Optional attributes\" section is missing from J) Request HeartBeat.\r\n\"Optional attributes\" section is missing from K) Get SRTT Report.\r\n\"Optional attributes\" section is missing from L) Set Failure Threshold.\r\n\"Mandatory attributes\" label is missing from N) Receive Unsent Message.\r\n\"Mandatory attributes\" label is missing from o  Receive Unacknowledged Message.\r\n\"Mandatory attributes\" label is missing from P) Destroy SCTP Instance.",
    "submit_date": "2020-01-13",
    "submitter_name": "FÃ¶ldvÃ¡ri ZoltÃ¡n",
    "verifier_id": "167",
    "verifier_name": "Martin Duke",
    "update_date": "2020-04-27 13:50:47"
  }
]
