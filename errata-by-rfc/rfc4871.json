[
  {
    "errata_id": "1376",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.4.3/.4",
    "orig_text": "section 3.4.3 & section 3.4.4",
    "correct_text": "Add to end of section 3.4.3:\r\n\r\n   The sha1 value (in base64) for an empty body (canonicalized to a \"CRLF\") is \"uoq1oCgLlTqpdDX/iUbLy7J1Wic=\".\r\n   The sha256 value is \"frcCV1k9oG9oKj3dpUqdJg1PxRT2RSN/XKdLCPjaYaY=\".\r\n\r\nAdd to end of section 3.4.4:\r\n\r\n   The sha1 value (in base64) for an empty body (canonicalized to a null input) is \"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\".\r\n   The sha256 value is \"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=\".\r\n",
    "notes": "From the October 2008 interop event:\r\n\r\nEmpty message bodies\r\n•\tthe “simple” body canonicalization says precisely what to do in the case of an empty message body\r\n•\t“relaxed” does not\r\n•\tConsensus is that the “relaxed” body canonicalization of the null body is the null input\r\n•\tMajority felt it was conspicuous that “simple” was explicit while “relaxed” was not\r\n•\tErrata: add clarification statement on expected values for relaxed",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1377",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.4.4",
    "orig_text": "---",
    "correct_text": "Add a 4th bullet item to section 3.4.4:\r\n\r\no  If the body is non-empty, but does not end with a CRLF, a CRLF is \r\n   added.  (For email, this is only possible when using extensions to\r\n   SMTP or non-SMTP transport mechanisms.)",
    "notes": "From the October 2008 interop event:\r\n\r\nNo Trailing CR-LF\r\n*\tWhat if body is non-empty, but does not end in CRLF?\r\n*\tOnly possible with BDAT or non-SMTP transport mechanisms\r\n*\t“simple” (§3.4.3) says to add a CRLF\r\n*\t“relaxed” (§3.4.4) says nothing\r\n*\tConsensus is to add a CRLF for Relaxed if \r\n–\tit was missing and \r\n–\tthe body is not empty\r\n–\tErrata: Add statement on what to do for Relaxed",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "2",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1378",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.3",
    "orig_text": "The rsa-sha256 algorithm is the default if no algorithm is specified. ",
    "correct_text": "(nothing)",
    "notes": "According to 3.5, including \"a=\" is REQUIRED, so the algorithm is \r\nalways specified, and there is no default.",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1379",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.5",
    "orig_text": "       sig-z-tag      = %x7A [FWS] \"=\" [FWS] sig-z-tag-copy\r\n                    *( [FWS] \"|\" sig-z-tag-copy )\r\n   sig-z-tag-copy = hdr-name \":\" qp-hdr-value\r\n",
    "correct_text": "       sig-z-tag      = %x7A [FWS] \"=\" [FWS] sig-z-tag-copy\r\n                    *( \"|\" [FWS] sig-z-tag-copy )\r\n   sig-z-tag-copy = hdr-name [FWS] \":\" qp-hdr-value\r\n",
    "notes": "From the October 2008 interop event, there are several issues with z=:\r\n\r\nFWS in z= tag\r\n\r\n1)\tDoes not allow any FWS between the \"|\" and the following header name in sig-z-tag-copy\r\n\r\n2)\tBy the ABNF, the informative example that immediately follows is invalid:\r\n\r\nz=From:foo@eng.example.net|To:joe@example.com|\r\n----Subject:demo=20run|Date:July=205,…\r\n\r\n3)\tThe [FWS] is redundant there; sig-z-tag-copy ends with qp-hdr-value, which can already end with arbitrary FWS\r\n\r\n4)\tNo FWS allowed between the hdr_name and the following \":“:\r\n\r\nThe modified ABNF is not redundant and agrees with the example.",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1380",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "3.5",
    "orig_text": "       INFORMATIVE NOTE: The \"x=\" tag is not intended as an anti-replay\r\n           defense.\r\n",
    "correct_text": "       INFORMATIVE NOTE: The \"x=\" tag is not intended as an anti-replay\r\n           defense.\r\n       INFORMATIVE NOTE: Due to clock drift, the receiver’s notion of \r\nwhen to consider the signature expired may not match exactly when the \r\nsender is expecting. Receiver’s MAY add a 'fudge factor' to allow for \r\nsuch possible drift.\r\n",
    "notes": "From the October 2008 interop event:\r\n\r\nWhen does x= take effect?\r\n*\t§3.5 says the “x=” value is an “absolute date”\r\n*\tA receiver’s notion of absolute time might not match the sender’s notion of absolute time\r\n*\tThe document may not expire exactly when sender thinks it should\r\n*\tA receiving implementation has these choices:\r\n-\tTry to decide how far apart sender’s notion of absolute time is from the receiver’s notion of absolute time, based on header information\r\n-\tUse local knowledge of what the absolute time is\r\n-\tAdd in a “fudge factor” to acknowledge possible clock drift",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1381",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "3.5/3.6.1",
    "orig_text": "section 3.5:\r\n\r\n   q=  A colon-separated list of query methods used to retrieve the\r\n       public key ... Implementations MUST use the recognized query\r\n       mechanisms in the order presented.\r\n\r\nsection 3.6.1:\r\n\r\n   h=  Acceptable hash algorithms ... Signers and Verifiers MUST\r\n       support the \"sha256\" hash algorithm.  Verifiers MUST also support\r\n       the \"sha1\" hash algorithm.\r\n\r\n   k=  Key type ... (Note: the \"p=\" tag further encodes the value using the\r\n       base64 algorithm.)\r\n\r\n   s=  Service Type ... Verifiers for a given service type MUST ignore this \r\n       record if the appropriate type is not listed.  Currently defined \r\n       service types are as follows:\r\n\r\n   t=  Flags, represented as a colon-separated list of names (plain-\r\n       text; OPTIONAL, default is no flags set).  The defined flags are\r\n       as follows:",
    "correct_text": "section 3.5:\r\n\r\n   q=  A colon-separated list of query methods used to retrieve the\r\n       public key ...  Implementations MUST use the recognized query\r\n       mechanisms in the order presented. Unrecognized query mechanisms\r\n       MUST be ignored.\r\n\r\nsection 3.6.1:\r\n\r\n   h=  Acceptable hash algorithms ... Signers and Verifiers MUST\r\n       support the \"sha256\" hash algorithm.  Verifiers MUST also support\r\n       the \"sha1\" hash algorithm. Unrecognized hash algorithms MUST be \r\n       ignored.\r\n\r\n   k=  Key type ...(Note: the \"p=\" tag further encodes the value using the\r\n       base64 algorithm.) Unrecognized key types MUST be ignored.\r\n\r\n   s=  Service Type ... Verifiers for a given service type MUST ignore this \r\n       record if the appropriate type is not listed. Unrecognized service \r\n       types MUST be ignored. Currently defined service types are as follows:\r\n\r\n   t=  Flags, represented as a colon-separated list of names (plain-\r\n       text; OPTIONAL, default is no flags set).  Unrecognized flags MUST be \r\n       ignored. The defined flags are as follows:",
    "notes": "From the October 2008 interop event:\r\n\r\nInvalid q=, etc. values\r\n\r\n*\tq=foo/bar:dns/txt:exam/ple\r\n*\tNothing in text about unknown values\r\n*\tBut ABNF says unknown values are for “future extension”\r\n*\tConsensus: ignore unknown values\r\n*\tErrata: Add statement saying unknown values must be ignored in signature “q=” and key “h=”, “k=”, “s=”, “t=”",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1382",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "3.6.1",
    "orig_text": "   s=  Service Type (plain-text; OPTIONAL; default is \"*\").  A colon-\r\n       separated list of service types to which this record applies.\r\n       Verifiers for a given service type MUST ignore this record if the\r\n       appropriate type is not listed.  Currently defined service types\r\n       are as follows:\r\n\r\n       *   matches all service types\r\n\r\n       email   electronic mail (not necessarily limited to SMTP)\r\n\r\n       This tag is intended to constrain the use of keys for other\r\n       purposes, should use of DKIM be defined by other services in the\r\n       future.\r\n",
    "correct_text": "   s=  Service Type (plain-text; OPTIONAL; default is \"*\").  A colon-\r\n       separated list of service types to which this record applies.\r\n       Verifiers for a given service type MUST ignore this record if the\r\n       appropriate type is not listed.  Currently defined service types\r\n       are as follows:\r\n\r\n       *   matches all service types\r\n\r\n       email   electronic mail (not necessarily limited to SMTP)\r\n\r\n       Unrecognized service types MUST be ignored.\r\n\r\n       This tag is intended to constrain the use of keys for other\r\n       purposes, should use of DKIM be defined by other services in the\r\n       future.\r\n",
    "notes": "From the October 2008 interop event:\r\n\r\nDNS Key Interoperability Issues: “s=” in key records\r\n\r\n*\t§3.6.1 doesn't say what to do if one of the colon-separated words is a word not enumerated in the “currently defined service types”\r\ns=foo:email:bar\r\n*\tNo explicit guidance about what to do with clearly bogus values, e.g.\r\ns=*:email\r\n*\tConsensus is to ignore any colon-separated value not recognized and only pay attention to “*” and “email” for DKIM e-mail implementations",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1383",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "3.6.1",
    "orig_text": "   g=  Granularity of the key (plain-text; OPTIONAL, default is \"*\").\r\n       ....  Wildcarding allows matching for addresses such as\r\n       \"user+*\" or \"*-offer\".  An empty \"g=\" value never matches any\r\n       addresses.\r\n",
    "correct_text": "   g=  Granularity of the key (plain-text; OPTIONAL, default is \"*\").\r\n       ....  Wildcarding allows matching for addresses such as\r\n       \"user+*\", \"*-offer\", or \"foo*bar\". An empty \"g=\" value never \r\n       matches any addresses.\r\n",
    "notes": "The ABNF allows \"*\" in the middle (but only one), and this should\r\nbe shown in the examples, too.",
    "submit_date": "2008-03-21",
    "submitter_name": "Tony Hansen",
    "verifier_id": "2",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1384",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.3.4",
    "orig_text": "   The \"relaxed\" body canonicalization algorithm:\r\n\r\n   o  Ignores all whitespace at the end of lines.  Implementations MUST\r\n      NOT remove the CRLF at the end of the line.\r\n\r\n   o  Reduces all sequences of WSP within a line to a single SP\r\n      character.\r\n\r\n   o  Ignores all empty lines at the end of the message body.  \"Empty\r\n      line\" is defined in Section 3.4.3.\r\n\r\n",
    "correct_text": "   The \"relaxed\" body canonicalization algorithm MUST apply the\r\n   following steps (a) and (b) in order:\r\n\r\n   a) Reduce whitespace:\r\n      *  Ignore all whitespace at the end of lines.  Implementations MUST\r\n         NOT remove the CRLF at the end of the line.\r\n\r\n      *  Reduce all sequences of WSP within a line to a single SP\r\n         character.\r\n\r\n   b)  Ignore all empty lines at the end of the message body.  \"Empty\r\n      line\" is defined in Section 3.4.3.\r\n\r\n",
    "notes": "This was discussed on the dkim interop mailing list.\r\n\r\nYou can wind up with different results depending on whether steps 1 and 3 are executed in that order or swapped around. Half of the implementations were found to do it one way and another half the other way.\r\n\r\nIt was decided that the same text applied to section 4.3.2\r\n\r\n   The \"relaxed\" header canonicalization algorithm MUST apply the\r\n   following steps in order:\r\n\r\nshould be used in 4.3.4 as well, that is\r\n\r\n   The \"relaxed\" body canonicalization algorithm MUST apply the\r\n   following steps in order:\r\n\r\nBut since steps 1&2 can still be done in either order, make those sub-bullets of step 1.\r\n\r\nJust to be totally clear, following this decision we would wind up with this sequence.\r\n\r\nGiven this input:\r\n\r\ntesting<cr><lf>\r\n<sp><sp><cr><lf>\r\n<cr><lf>\r\n\r\n   a) Reduce whitespace:\r\n      *  Ignore all whitespace at the end of lines.  Implementations MUST\r\n         NOT remove the CRLF at the end of the line.\r\n\r\ntesting<cr><lf>\r\n<cr><lf>\r\n<cr><lf>\r\n\r\n      *  Reduce all sequences of WSP within a line to a single SP\r\n         character.\r\n\r\ntesting<cr><lf>\r\n<cr><lf>\r\n<cr><lf>\r\n\r\n   b)  Ignore all empty lines at the end of the message body.  \"Empty\r\n      line\" is defined in Section 3.4.3.\r\n\r\ntesting<cr><lf>\r\n\r\nIf the two steps in (a) are performed in the opposite order, \r\n\r\ntesting<cr><lf>\r\n<sp><sp><cr><lf>\r\n<cr><lf>\r\n\r\n   a) Reduce whitespace:\r\n      *  Reduce all sequences of WSP within a line to a single SP\r\n         character.\r\n\r\ntesting<cr><lf>\r\n<sp><cr><lf>\r\n<cr><lf>\r\n\r\n      *  Ignore all whitespace at the end of lines.  Implementations MUST\r\n         NOT remove the CRLF at the end of the line.\r\n\r\ntesting<cr><lf>\r\n<cr><lf>\r\n<cr><lf>\r\n\r\n   b)  Ignore all empty lines at the end of the message body.  \"Empty\r\n      line\" is defined in Section 3.4.3.\r\n\r\ntesting<cr><lf>",
    "submit_date": "2008-03-22",
    "submitter_name": "Tony Hansen",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1385",
    "doc-id": "RFC4871",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "3.6.1",
    "orig_text": "It is expected that many key servers will choose to present the keys in an\r\notherwise unstructured text format (for example, an XML form would not be\r\nconsidered to be unstructured text for this purpose).  The following definition\r\nMUST be used for any DKIM key represented in an otherwise unstructured textual\r\nform.\r\n",
    "correct_text": "It is expected that many key servers will choose to present the keys in an\r\notherwise unstructured text format (for example, an XML form would not be\r\nconsidered to be unstructured text for this purpose).  The following definition\r\nMUST be used for any DKIM key represented in an otherwise unstructured textual\r\nform.\r\n\r\nThe TXT RDATA format is described in section 3.3.14 of RFC1035.  If the retrieved\r\nTXT record consists of more than one \"character-string\" (as defined in that\r\ndocument), the RDATA MUST be preprocessed by concatenating all of the\r\n\"character-string\"s together in the order in which they appeared in the RDATA\r\nbefore being interpreted as described below.",
    "notes": "No guidance is provided about how to handle a single TXT RDATA which is subdivided into multiple character-strings, such as an encoded public key that is too large to fit in such a construct (which is limited by RFC1035 to be each 255 characters or less).\n --VERIFIER NOTES-- \nSection 3.6.2.2 already specifies the necessary details.",
    "submit_date": "2008-03-23",
    "submitter_name": "Murray S. Kucherawy",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1386",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "3.5",
    "orig_text": "DKIM-Signature: a=rsa-sha256; d=example.net; s=brisbane;",
    "correct_text": "DKIM-Signature: v=1; a=rsa-sha256; d=example.net; s=brisbane;",
    "notes": "The example is missing the v= tag which MUST be included.",
    "submit_date": "2008-03-24",
    "submitter_name": "Mark Delany",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1461",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.5",
    "orig_text": "       sig-h-tag       = %x68 [FWS] \"=\" [FWS] hdr-name\r\n                     0*( *FWS \":\" *FWS hdr-name )\r\n",
    "correct_text": "       sig-h-tag       = %x68 [FWS] \"=\" [FWS] hdr-name\r\n                     0*( [FWS] \":\" [FWS] hdr-name )\r\n",
    "notes": "Confirmed by many occurrences of [FWS] in this section the intention is to allow optional \"folding white space\" with at most one folding.  Compare section 2.3 in this memo for the rationale; more than one folding is known as <obs-FWS> in RFC 2822 and MUST NOT be generated.",
    "submit_date": "2008-07-04",
    "submitter_name": "Frank Ellermann",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1487",
    "doc-id": "RFC4871",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.6.1",
    "orig_text": "   v=  Version of the DKIM key record (plain-text; RECOMMENDED, default\r\n       is \"DKIM1\").  If specified, this tag MUST be set to \"DKIM1\"\r\n       (without the quotes).  This tag MUST be the first tag in the\r\n       record.  Records beginning with a \"v=\" tag with any other value\r\n       MUST be discarded.  Note that verifiers must do a string\r\n       comparison on this value; for example, \"DKIM1\" is not the same as\r\n       \"DKIM1.0\".\r\n\r\n       ABNF:\r\n\r\n       key-v-tag    = %x76 [FWS] \"=\" [FWS] \"DKIM1\"",
    "correct_text": "   v=  Version of the DKIM key record (plain-text; RECOMMENDED, default\r\n       is \"DKIM1\").  If specified, this tag MUST be set to \"DKIM1\"\r\n       (without the quotes).  This tag MUST be the first tag in the\r\n       record.  Records beginning with a \"v=\" tag with any other value\r\n       MUST be discarded.  Note that verifiers must do a string\r\n       comparison on this value; for example, \"DKIM1\" is not the same as\r\n       \"DKIM1.0\".\r\n\r\n       ABNF:\r\n\r\n       key-v-tag    = %x76 [FWS] \"=\" [FWS] %x44 %x4B %x49 %x4D %x31",
    "notes": "RFC5234 section 2.3 says string literals in ABNF are case-insensitive.  However, RFC4871 section 3.2 says tag values are case-sensitive unless stated otherwise.  This renders the defintion of \"v=\" in section 3.6.1 of this RFC ambiguous.\r\n\r\nTherefore, one interpretation of \"DKIM1\" here allows \"dkim1\" and one does not.\r\n\r\nEither the \"case-sensitive\" nature of tag values should be changed, or the ABNF needs to be revised to be more precise.",
    "submit_date": "2008-08-14",
    "submitter_name": "Murray S. Kucherawy",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1532",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "3.6.1",
    "orig_text": "N/A (see Notes below)",
    "correct_text": "Add text similar to the following:\r\n\r\nCompatibility Note for DomainKeys\r\n\r\nIf a v= value is not found at the beginning of the DKIM key record, \r\nthe key record should be interpreted as for DomainKeys [4870]. The \r\ndefinition given here is upwardly compatible with what is used for \r\nDomainKeys, with the exception of the \"g=\" value. In a DomainKeys \r\nkey record, an empty \"g=\" value should be interpreted as being \r\nequivalent to DKIM's \"g=*\".",
    "notes": "There should be a note added somewhere to section 3.6.1 saying \r\nthat if a v= is not found at the beginning of the DKIM key \r\nrecord, the DNS key record should be interpreted as for DomainKeys \r\nand described in RFC 4870. In addition, a note should be added \r\nabout the difference in the interpretation of an empty \"g=\", \r\nwhich is the only incompatible tag.",
    "submit_date": "2008-09-30",
    "submitter_name": "Tony Hansen",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1596",
    "doc-id": "RFC4871",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "2.4/3.7",
    "orig_text": "Here're the relevant portions of RFC 4871 \r\n\r\n   2.4.  Common ABNF Tokens\r\n\r\n   The following ABNF tokens are used elsewhere in this document:\r\n\r\n     base64string =     1*(ALPHA / DIGIT / \"+\" / \"/\" / [FWS])\r\n                        [ \"=\" [FWS] [ \"=\" [FWS] ] ]\r\n\r\n   3.7.  Computing the Message Hashes\r\n \r\n   2.  The DKIM-Signature header field that exists (verifying) or will\r\n       be inserted (signing) in the message, with the value of the \"b=\"\r\n       tag deleted (i.e., treated as the empty string), canonicalized\r\n       using the header canonicalization algorithm specified in the \"c=\"\r\n       tag, and without a trailing CRLF.\r\n\r\nSections 3.2 and 3.5 have this to say:\r\n\r\n   3.2.  Tag=Value Lists\r\n \r\n   Formally, the syntax rules are as follows:\r\n\r\n        tag-list  =  tag-spec 0*( \";\" tag-spec ) [ \";\" ]\r\n        tag-spec  =  [FWS] tag-name [FWS] \"=\" [FWS] tag-value [FWS]\r\n        tag-name  =  ALPHA 0*ALNUMPUNC\r\n        tag-value =  [ tval 0*( 1*(WSP / FWS) tval ) ]\r\n                          ; WSP and FWS prohibited at beginning and end\r\n        tval      =  1*VALCHAR\r\n\r\n   Note that WSP is allowed anywhere around tags.  In particular, any\r\n   WSP after the \"=\" and any WSP before the terminating \";\" is not part\r\n   of the value; however, WSP inside the value is significant.\r\n\r\n   3.5.  The DKIM-Signature Header Field\r\n\r\n   The signature of the email is stored in the DKIM-Signature header\r\n   field.  This header field contains all of the signature and key-\r\n   fetching data.  The DKIM-Signature value is a tag-list as described\r\n   in Section 3.2.\r\n\r\n   ...\r\n\r\n   b=  The signature data (base64; REQUIRED).  Whitespace is ignored in\r\n       this value and MUST be ignored when reassembling the original\r\n       signature.  In particular, the signing process can safely insert\r\n       FWS in this value in arbitrary places to conform to line-length\r\n       limits.  See Signer Actions (Section 5) for how the signature is\r\n       computed.\r\n\r\n   ABNF:\r\n\r\n       sig-b-tag       = %x62 [FWS] \"=\" [FWS] sig-b-tag-data\r\n       sig-b-tag-data  = base64string",
    "correct_text": "Add text \"(including all surrounding whitespace)\" to the description of deleting the b= value.\r\n\r\n   3.7.  Computing the Message Hashes\r\n\r\n   2.  The DKIM-Signature header field that exists (verifying) or will\r\n       be inserted (signing) in the message, with the value of the \"b=\"\r\n       tag (including all surrounding whitespace) deleted \r\n       (i.e., treated as the empty string), canonicalized\r\n       using the header canonicalization algorithm specified in the \"c=\"\r\n       tag, and without a trailing CRLF.\r\n\r\nFix the ambiguity in the base64string grammar to remove leading and trailing FWS:\r\n\r\n     ALPHADIGITPS =     (ALPHA / DIGIT / \"+\" / \"/\")\r\n\r\n     base64string =     ALPHADIGITPS *([FWS] ALPHADIGITPS)\r\n                        [ [FWS] \"=\" [ [FWS] \"=\" ] ]",
    "notes": "The issues are, what constitutes the *value* of the b= tag? Is it everything after the \"=\" through any following \";\" and/or the end of the header? Does that include or exclude surrounding white space? Is it specifically the characters that constitute \"tag-val\" / \"sig-b-tag-data\"? Does sig-b-tag-data include or exclude white space?\r\n\r\nNotice how the section 3.5 \"b=\" deletion description talks about adding FWS \"in\" the value, but not \"before\" or \"after\".\r\n\r\nNotice that the section 3.2 definition of tag-val\r\n\r\n        tag-spec  =  [FWS] tag-name [FWS] \"=\" [FWS] tag-value [FWS]\r\n        tag-value =  [ tval 0*( 1*(WSP / FWS) tval ) ]\r\n                          ; WSP and FWS prohibited at beginning and end\r\n\r\nexplicitly does *not* include either the FWS before its value or after.\r\n\r\nAnd the text in section 3.2 explicitly says that the surrounding WSP is not part of the value.\r\n\r\nAnd notice that the section 3.5 grammar around sig-b-tag-data\r\n\r\n       sig-b-tag       = %x62 [FWS] \"=\" [FWS] sig-b-tag-data\r\n       sig-b-tag-data  = base64string\r\n\r\nexplicitly mentions FWS as being separate from the data.\r\n\r\nBy the above definitions, tag-val and sig-b-tag-data explicitly do *not* include the FWS either before or after it.\r\n\r\nHowever, the definition of base64string\r\n\r\n     base64string =     1*(ALPHA / DIGIT / \"+\" / \"/\" / [FWS])\r\n                        [ \"=\" [FWS] [ \"=\" [FWS] ] ]\r\n\r\ntosses FWS in to its production. So it is ambiguous from the grammar whether the leading/trailing FWS is part of sig-b-tag-data or part of base64string. (This grammar ambiguity is in *all* of the uses of base64string in sections 3.5 and 3.6.1.)\r\n\r\nIn addition, the text in the section 3.5 b= description certainly implies that white space before and after the hash should not affect the verification.\r\n\r\nSo by these, \"with the value of the 'b=' tag deleted\" could mean 1) everything after the \"=\" which includes the leading/trailing white space, 2) the *tag-value* grammar production which excludes leading/trailing white space, or 3) the *sig-b-tag-data* grammar production that may or may not include leading/trailing white space.\r\n\r\n**This is an ambiguity (a bug) in the spec.**",
    "submit_date": "2008-11-17",
    "submitter_name": "Tony Hansen",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1942",
    "doc-id": "RFC4871",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "3.4.4",
    "orig_text": "The \"relaxed\" body canonicalization algorithm:\r\n",
    "correct_text": "The \"relaxed\" body canonicalization algorithm MUST apply the following \r\nsteps in order:",
    "notes": "The order of the steps should be enforced, as in section 3.4.2.  I have two disagreeing interpretations that have resulted in an interoperability problem (fortunately a corner case), namely:\r\n\r\n<CRLF><CRLF><SP><SP><CRLF> should be canonicalized as what?  Taken top-to-bottom, the output is the empty body; given the other pending errata, the output should be a single <CRLF>; yet another interpretation strips trailing <CRLF>s first, then does space trimming, leaving the output as <CRLF><CRLF><CRLF>.\r\n\r\nI might further suggest changing these steps to an enumerated/ordered list instead of a list of bullet points.\r\n --VERIFIER NOTES-- \r\nDuplicate; this issue is already covered by errata 1384.",
    "submit_date": "2009-11-11",
    "submitter_name": "Murray S. Kucherawy",
    "verifier_id": "2",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  }
]
