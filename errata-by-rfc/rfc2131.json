[
  {
    "errata_id": "488",
    "doc-id": "RFC2131",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "1.2",
    "orig_text": "In other related work, the path minimum transmission unit (MTU) discovery\r\nalgorithm can determine the MTU of an arbitrary internet path [14].",
    "correct_text": "In other related work, the path maximum transmission unit (MTU) discovery\r\nalgorithm can determine the MTU of an arbitrary internet path [14].\r\n",
    "notes": "",
    "submit_date": "2006-03-23",
    "submitter_name": "Robert Floyd Jr",
    "verifier_id": "131",
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "489",
    "doc-id": "RFC2131",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "3.1 number 5",
    "orig_text": "     The client times out and retransmits the DHCPREQUEST message if the\r\n     client receives neither a DHCPACK or a DHCPNAK message.  \r\n     ...\r\n     If the client\r\n     receives neither a DHCPACK or a DHCPNAK message after employing the\r\n     retransmission algorithm, the client reverts to INIT state and\r\n     restarts the initialization process. ",
    "correct_text": "     The client times out and retransmits the DHCPREQUEST message if the\r\n     client receives neither a DHCPACK nor a DHCPNAK message.  \r\n     ...\r\n     If the client\r\n     receives neither a DHCPACK nor a DHCPNAK message after employing the\r\n     retransmission algorithm, the client reverts to INIT state and\r\n     restarts the initialization process. ",
    "notes": "\r\n\r\n",
    "submit_date": "2004-04-29",
    "submitter_name": "Soohong Daniel Park",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "490",
    "doc-id": "RFC2131",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.1",
    "orig_text": "Normally, DHCP servers and BOOTP relay agents attempt to deliver\r\nDHCPOFFER, DHCPACK and DHCPNAK messages directly to the client using\r\nuicast delivery.",
    "correct_text": "Normally, DHCP servers and BOOTP relay agents attempt to deliver\r\nDHCPOFFER, DHCPACK and DHCPNAK messages directly to the client using\r\nunicast delivery.",
    "notes": "typo (uicast -> unicast). Updated 2013-06-05. Thanks to Carlos Prendes for the correction.",
    "submit_date": "2004-01-13",
    "submitter_name": "Sreeni R. Nair",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5100",
    "doc-id": "RFC2131",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.1",
    "orig_text": "Normally, DHCP servers and BOOTP relay agents attempt to deliver\r\nDHCPOFFER, DHCPACK and DHCPNAK messages directly to the client using\r\nuicast delivery.",
    "correct_text": "Normally, DHCP servers and BOOTP relay agents attempt to deliver\r\nDHCPOFFER, DHCPACK messages directly to the client using\r\nunicast delivery.",
    "notes": "According to prior part description in section 4.1: \"In all cases, when ’giaddr’ is zero, the server broadcasts any DHCPNAK messages to 0xffffffff.\", the DHCP server should not send DHCPNAK in unicast to client unless 'giaddr' is not zero.\n --VERIFIER NOTES-- \n   DHC WG feedback on this errata is:\r\n\"What's possibly being missed here is that the DHCP server has the client's MAC address, and is not relying on just on the routing table in the kernel, but also on giaddr and chaddr to determine how to send unicast responses. If giaddr is nonzero, the server sends the response using regular unicast through the IP stack's routing table, but if giaddr is zero, the server constructs a layer 2 frame with chaddr as the layer 2 destination address and unicasts that frame out the appropriate interface, bypassing the kernel's routing table and layer 3 processing entirely. So it doesn't actually matter what the IP destination address is other than that the client stack has to recognize that address as its own. The 'broadcast' bit takes care of the case where the client isn't able to do this. The server is always permitted to broadcast if it doesn't have the ability to route the response directly over layer 2, but at the time this RFC was written this was considered suboptimal, and the RFC goes to some lengths to make it possible for DHCP servers and relay agents to avoid sending broadcasts\"\r\n\r\nI.e., the current text is correct.",
    "submit_date": "2017-08-29",
    "submitter_name": "Fan Wei",
    "verifier_id": "161",
    "verifier_name": "Eric Vyncke",
    "update_date": "2024-04-23 05:52:27"
  },
  {
    "errata_id": "6447",
    "doc-id": "RFC2131",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "2.2",
    "orig_text": "a client requests the use of an address for some period of time.  The \r\nallocation mechanism (the collection of DHCP servers) guarantees not \r\nto reallocate that address within the requested time",
    "correct_text": "a client requests the use of an address for some period of time.  The \r\nallocation mechanism (the collection of DHCP servers) may or may not be able or willing to grant a lease for the requested duration.  Any lease duration it offers it then guarantees not to reallocate within the offered time",
    "notes": "It is simply ludicrous to imagine that clients are in control of the lease duration, and that servers will simply comply, regardless of resource availability.\n --VERIFIER NOTES-- \n   The text does not say that the DHCP servers must grant the requested leased time. I.e., the current text is OK.",
    "submit_date": "2021-03-01",
    "submitter_name": "Adrien de Croy",
    "verifier_id": "161",
    "verifier_name": "Eric Vyncke",
    "update_date": "2023-08-03 04:06:53"
  },
  {
    "errata_id": "6618",
    "doc-id": "RFC2131",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "3.1",
    "orig_text": "                Server          Client          Server\r\n            (not selected)                    (selected)\r\n\r\n                  v               v               v\r\n                  |               |               |\r\n                  |     Begins initialization     |\r\n                  |               |               |\r\n                  | _____________/|\\____________  |\r\n                  |/DHCPDISCOVER | DHCPDISCOVER  \\|\r\n                  |               |               |\r\n              Determines          |          Determines\r\n             configuration        |         configuration\r\n                  |               |               |\r\n                  |\\             |  ____________/ |\r\n                  | \\________    | /DHCPOFFER     |\r\n                  | DHCPOFFER\\   |/               |\r\n                  |           \\  |                |\r\n                  |       Collects replies        |\r\n                  |             \\|                |\r\n                  |     Selects configuration     |\r\n                  |               |               |\r\n                  | _____________/|\\____________  |\r\n                  |/ DHCPREQUEST  |  DHCPREQUEST\\ |\r\n                  |               |               |\r\n                  |               |     Commits configuration\r\n                  |               |               |\r\n                  |               | _____________/|\r\n                  |               |/ DHCPACK      |\r\n                  |               |               |\r\n                  |    Initialization complete    |\r\n                  |               |               |\r\n                  .               .               .\r\n                  .               .               .\r\n                  |               |               |\r\n                  |      Graceful shutdown        |\r\n                  |               |               |\r\n                  |               |\\ ____________ |\r\n                  |               | DHCPRELEASE  \\|\r\n                  |               |               |\r\n                  |               |        Discards lease\r\n                  |               |               |\r\n                  v               v               v\r\n     Figure 3: Timeline diagram of messages exchanged between DHCP\r\n               client and servers when allocating a new network address\r\n\r\n\r\n\r\n",
    "correct_text": "                Server          Client          Server\r\n            (not selected)                    (selected)\r\n\r\n                  v               v               v\r\n                  |               |               |\r\n                  |     Begins initialization     |\r\n                  |               |               |\r\n                  | _____________/|\\_____________ |\r\n                  |/DHCPDISCOVER  | DHCPDISCOVER \\|\r\n                  |               |               |\r\n              Determines          |          Determines\r\n             configuration        |         configuration\r\n                  |               |               |\r\n                  |\\              |  ____________/|\r\n                  | \\_________    | /DHCPOFFER    |\r\n                  |  DHCPOFFER\\   |/              |\r\n                  |            \\  |               |\r\n                  |       Collects replies        |\r\n                  |              \\|               |\r\n                  |     Selects configuration     |\r\n                  |               |               |\r\n                  | _____________/|\\____________  |\r\n                  |/ DHCPREQUEST  |  DHCPREQUEST\\ |\r\n                  |               |               |\r\n                  |               |     Commits configuration\r\n                  |               |               |\r\n                  |               | _____________/|\r\n                  |               |/ DHCPACK      |\r\n                  |               |               |\r\n                  |    Initialization complete    |\r\n                  |               |               |\r\n                  .               .               .\r\n                  .               .               .\r\n                  |               |               |\r\n                  |      Graceful shutdown        |\r\n                  |               |               |\r\n                  |               |\\ ____________ |\r\n                  |               | DHCPRELEASE  \\|\r\n                  |               |               |\r\n                  |               |        Discards lease\r\n                  |               |               |\r\n                  v               v               v\r\n     Figure 3: Timeline diagram of messages exchanged between DHCP\r\n               client and servers when allocating a new network address\r\n",
    "notes": "alignment",
    "submit_date": "2021-06-22",
    "submitter_name": "Rubén L.M.",
    "verifier_id": "161",
    "verifier_name": "Eric Vyncke",
    "update_date": "2022-05-29 22:07:27"
  },
  {
    "errata_id": "7177",
    "doc-id": "RFC2131",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.1",
    "orig_text": "If the server has received a message through a DHCP relay agent, the server SHOULD choose an address from the interface on which the message was recieved as the 'server identifier' (unless the server has other, better information on which to make its choice).",
    "correct_text": "If the server has received a message through a DHCP relay agent, the server SHOULD choose an address from the interface on which the message was received as the 'server identifier' (unless the server has other, better information on which to make its choice).",
    "notes": "spelling correction\r\n\r\ns/recieved/received/",
    "submit_date": "2022-10-22",
    "submitter_name": "Greg Skinner",
    "verifier_id": "165",
    "verifier_name": "Erik Kline",
    "update_date": "2022-10-22 16:32:53"
  },
  {
    "errata_id": "7367",
    "doc-id": "RFC2131",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.1",
    "orig_text": "   The 'server identifier' field is used both to identify a DHCP server\r\n   in a DHCP message and as a destination address from clients to\r\n   servers.  A server with multiple network addresses MUST be prepared\r\n   to to accept any of its network addresses as identifying that server\r\n   in a DHCP message.",
    "correct_text": "   The 'server identifier' field is used both to identify a DHCP server\r\n   in a DHCP message and as a destination address from clients to\r\n   servers.  A server with multiple network addresses MUST be prepared\r\n   to accept any of its network addresses as identifying that server in\r\n   a DHCP message.",
    "notes": "redundant word\r\ns/to to/to/",
    "submit_date": "2023-02-23",
    "submitter_name": "Eugene Adell",
    "verifier_id": "2",
    "verifier_name": "RFC Editor",
    "update_date": "2023-02-23 14:57:13"
  },
  {
    "errata_id": "7368",
    "doc-id": "RFC2131",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "3.1",
    "orig_text": "DHCPNAK      -  Server to client indicating client's notion of network\r\n                   address is incorrect (e.g., client has moved to new\r\n                   subnet) or client's lease as expired",
    "correct_text": "DHCPNAK      -  Server to client indicating client's notion of network\r\n                   address is incorrect (e.g., client has moved to new\r\n                   subnet) or client's lease has expired",
    "notes": "Spelling: \"as expired\" -> \"has expired\". (The original might have been the intended spelling, but grammatically it would make more sense to write \"has\" instead of \"as\" with the verb \"indicate\".)",
    "submit_date": "2023-02-24",
    "submitter_name": "Panayiotis Gavriil",
    "verifier_id": "2",
    "verifier_name": "RFC Editor",
    "update_date": "2023-02-24 14:26:48"
  },
  {
    "errata_id": "7369",
    "doc-id": "RFC2131",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "3.2",
    "orig_text": "  2. Servers with knowledge of the client's configuration parameters\r\n      respond with a DHCPACK message to the client.  Servers SHOULD NOT\r\n      check that the client's network address is already in use; the\r\n      client may respond to ICMP Echo Request messages at this point.\r\n\r\n                Server          Client          Server\r\n\r\n                  v               v               v\r\n                  |                |               |\r\n                  |              Begins            |\r\n                  |          initialization        |\r\n                  |                |               |\r\n                  |                /|\\             |\r\n                  |   _________ __/ | \\__________  |\r\n                  | /DHCPREQU EST  |  DHCPREQUEST\\ |\r\n                  |/               |              \\|\r\n                  |                |               |\r\n               Locates             |            Locates\r\n            configuration          |         configuration\r\n                  |                |               |\r\n                  |\\               |              /|\r\n                  | \\              |  ___________/ |\r\n                  |  \\             | /  DHCPACK    |\r\n                  |   \\ _______    |/              |\r\n                  |     DHCPACK\\   |               |\r\n                  |          Initialization        |\r\n                  |             complete           |\r\n                  |               \\|               |\r\n                  |                |               |\r\n                  |           (Subsequent          |\r\n                  |             DHCPACKS           |\r\n                  |             ignored)           |\r\n                  |                |               |\r\n                  |                |               |\r\n                  v                v               v\r\n\r\n     Figure 4: Timeline diagram of messages exchanged between DHCP\r\n               client and servers when reusing a previously allocated\r\n               network address",
    "correct_text": "  2. Servers with knowledge of the client's configuration parameters\r\n      respond with a DHCPACK message to the client.  Servers SHOULD NOT\r\n      check that the client's network address is already in use; the\r\n      client may respond to ICMP Echo Request messages at this point.\r\n\r\n                Server          Client          Server\r\n\r\n                  v               v               v\r\n                  |               |               |\r\n                  |             Begins            |\r\n                  |         initialization        |\r\n                  |               |               |\r\n                  |              /|\\              |\r\n                  |   __________/ | \\__________   |\r\n                  | /DHCPREQUEST  |  DHCPREQUEST\\ |\r\n                  |/              |              \\|\r\n                  |               |               |\r\n               Locates            |            Locates\r\n            configuration         |         configuration\r\n                  |               |               |\r\n                  |\\              |              /|\r\n                  | \\___________  |  ___________/ |\r\n                  |    DHCPACK  \\ | /  DHCPACK    |\r\n                  |              \\|/              |\r\n                  |               |               |\r\n                  |         Initialization        |\r\n                  |            complete           |\r\n                  |               |               |\r\n                  |               |               |\r\n                  |          (Subsequent          |\r\n                  |            DHCPACKS           |\r\n                  |            ignored)           |\r\n                  |               |               |\r\n                  |               |               |\r\n                  v               v               v\r\n\r\n     Figure 4: Timeline diagram of messages exchanged between DHCP\r\n               client and servers when reusing a previously allocated\r\n               network address",
    "notes": "Alignment in various places + removing space in the middle of a word (\"DHCPREQU EST\" -> \"DHCPREQUEST\")",
    "submit_date": "2023-02-24",
    "submitter_name": "Panayiotis Gavriil",
    "verifier_id": "2",
    "verifier_name": "RFC Editor",
    "update_date": "2023-02-24 14:39:26"
  },
  {
    "errata_id": "7776",
    "doc-id": "RFC2131",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "Client identifier         MUST NOT     MUST NOT           MAY",
    "correct_text": "Client identifier         MUST NOT     MUST NOT           MUST NOT",
    "notes": "In the \"Options\" list in Table 3 (\"Fields and options used by DHCP server\"), the \"Client identifier\" option has \"MUST NOT\" for both DHCPOFFER and DHCPACK; however, for DHCPNAK, it has \"MAY\".\r\n\r\n\"Client identifier\" should be a \"MUST NOT\" for DHCPNAK as well. \r\n\r\nIt seems that the field should only be used by a client and never by a server, and if that's true for the OFFER and ACK, then it should be even more correct for the NAK.\r\n\r\n\"Vendor class identifier\" has a MAY for all three messages, so maybe it was a typo in the previous option because of the repetitive input in the next one.\n --VERIFIER NOTES-- \nRFC 6842 has addressed this problem with more information than a simple errata.\r\n\r\nI.e., the problem in RFC 2131 exists indeed but has been fixed.",
    "submit_date": "2024-01-23",
    "submitter_name": "Imrane",
    "verifier_id": "161",
    "verifier_name": "Eric Vyncke",
    "update_date": "2024-04-23 05:59:15"
  }
]
