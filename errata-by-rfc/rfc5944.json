[
  {
    "errata_id": 3116,
    "doc-id": "RFC5944",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.7.2",
    "orig_text": "Section 3.7.2 \"Receiving Registration Requests\" says:\r\n\r\nOtherwise, if the foreign agent does not serve the mobile node as a home\r\nagent,\r\n   the foreign agent rejects the Registration Request with Code 194\r\n   (Invalid Home Agent Address).\r\n\r\nAnother entry for \"Invalid Home Agent Address\" is indicated in Section 3.4: \r\n\r\n        194 Invalid Home Agent Address\r\n\r\n\r\n",
    "correct_text": "For Section 3.7.2 \"Receiving Registration Requests\", it should say:\r\n\r\nOtherwise, if the foreign agent does not serve the mobile node as a home\r\nagent,\r\nthe foreign agent rejects the Registration Request with Code 116\r\n(Invalid Home Agent Address).\r\n\r\nFor the entry for \"Invalid Home Agent Address\" in Section 3.4, it should say:\r\n\r\n        116 Invalid Home Agent Address",
    "notes": "The Code 194 was incorrectly registered under the range for Error Codes from the Foreign Agent (64-127).  The mobile note (Invalid Home Agent Address) is a registration under denied by the foreign agent, and so the mobile note should be changed to the Code 116 for Invalid Home Agent Address in the range for Error Codes from the Foreign Agent.  The Code 194 has been reserved in the range for Error Codes from the Gateway Foreign Agent (194-200).",
    "submit_date": "2012-02-07",
    "submitter_name": "Pearl Liang",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3428,
    "doc-id": "RFC5944",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 3.3,
    "orig_text": "      M        Minimal encapsulation.  If the 'M' bit is set, the mobile\r\n               node requests that its home agent use minimal\r\n               encapsulation [16] for datagrams tunneled to the mobile\r\n               node.\r\n",
    "correct_text": "      M        Minimal encapsulation.  If the 'M' bit is set, the mobile\r\n               node requests that its home agent use minimal\r\n               encapsulation [15] for datagrams tunneled to the mobile\r\n               node.\r\n",
    "notes": "The citation points to the wrong reference:\r\n   [16]  Plummer, D., \"Ethernet Address Resolution Protocol: Or\r\n         Converting Network Protocol Addresses to 48.bit Ethernet\r\n         Address for Transmission on Ethernet Hardware\", STD 37, RFC\r\n         826, November 1982.\r\n\r\nIt should point to:\r\n    [15]  Perkins, C., \"Minimal Encapsulation within IP\", RFC 2004,\r\n         October 1996.",
    "submit_date": "2012-12-12",
    "submitter_name": "Ville Nuorvala",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3438,
    "doc-id": "RFC5944",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "3.7.3.2",
    "orig_text": "A Registration Reply that satisfies the validity checks of Section\r\n3.8.2.1 is relayed to the mobile node.",
    "correct_text": "A Registration Reply that satisfies the validity checks of Section\r\n3.7.3.1 is relayed to the mobile node.",
    "notes": "Currently, the incorrect cross reference is provided.\r\nThe Foreign Agent would perform the validity checks mentioned in Section 3.7.3.1 upon receiving the Registration Reply and would relay the Registration Reply that satisfies the validity checks.",
    "submit_date": "2012-12-27",
    "submitter_name": "Pritish Aherrao",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4133,
    "doc-id": "RFC5944",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 1.1,
    "orig_text": "This format is applicable for non-skippable extensions that carry\r\ninformation of more that 256 bytes.\r\n.\r\n.\r\n.\r\nSince the Length field is 16 bits wide, the extension data can exceed\r\n256 bytes in length.",
    "correct_text": "This format is applicable for non-skippable extensions that carry\r\ninformation of more that 254 bytes.\r\n.\r\n.\r\n.\r\nSince the Length field is 16 bits wide, the extension data can exceed\r\n254 bytes in length.",
    "notes": "Since the short extension form defined in section 1.11 can only carry up to 254 bytes of data, all extensions with 255 or more bytes needs to use the long extension.",
    "submit_date": "2014-10-17",
    "submitter_name": "Jack Martin",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4134,
    "doc-id": "RFC5944",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 1.11,
    "orig_text": "This format is compatible with the skippable extensions defined in\r\nSection 1.9. It is not applicable for extensions that require more\r\nthan 256 bytes of data; for such extensions, use the format described\r\nin Section 1.10.",
    "correct_text": "This format is compatible with the skippable extensions defined in\r\nSection 1.9. It is not applicable for extensions that require more\r\nthan 254 bytes of data; for such extensions, use the format described\r\nin Section 1.10.",
    "notes": "The length field is 8 bits which yields a maximum of 255 data octets.\r\nBut the length field must include one octet for the sub-type field,\r\nyielding a maximum of 254 octets of data.",
    "submit_date": "2014-10-17",
    "submitter_name": "Jack Martin",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  }
]
