[
  {
    "errata_id": "4694",
    "doc-id": "RFC5288",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "6.1",
    "orig_text": "   AES-GCM security requires that the counter is never reused.  The IV\r\n   construction in Section 3 is designed to prevent counter reuse.\r\n\r\n   Implementers should also understand the practical considerations of\r\n   IV handling outlined in Section 9 of [GCM].",
    "correct_text": "   Security of AES-GCM requires that the \"nonce\" (number used once) is\r\n   never reused.  The IV construction in Section 3 does not prevent \r\n   implementers from reusing the nonce by mistake.  It is paramount that \r\n   the implementer be aware of the security implications when a nonce \r\n   is reused even once. \r\n\r\n   Nonce reuse in AES-GCM allows for the recovery of the authentication key \r\n   resulting in complete failure of the mode's authenticity.  Hence, TLS \r\n   sessions can be effectively attacked through forgery by an adversary.\r\n   This enables an attacker to inject data into the TLS allowing for XSS and \r\n   other attack vectors.",
    "notes": "Obviously the original wording is so ambiguous that implementers got it wrong in the real world. Related to: https://www.blackhat.com/us-16/briefings.html#nonce-disrespecting-adversaries-practical-forgery-attacks-on-gcm-in-tls\r\n\r\nIt may be worth adding a reference to [JOUX] http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/...38.../GCM/Joux_comments.pdf and maybe the paper we're intending to release on the actual HTTPS forgery/injection attack.\r\n\r\nI'd actually like to change the nonce construction to that of the ChaCha20/Poly1305 document, but I figure this will cause massive breakage for already deployed implementations. TLS 1.3 fixes this issue per design.",
    "submit_date": "2016-05-14",
    "submitter_name": "Aaron Zauner",
    "verifier_id": "128",
    "verifier_name": "Stephen Farrell",
    "update_date": "2019-09-10 09:09:03"
  }
]
