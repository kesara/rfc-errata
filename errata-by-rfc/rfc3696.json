[
  {
    "errata_id": 246,
    "doc-id": "RFC3696",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "   The exact rule is that any ASCII character, including control\r\n   characters, may appear quoted, or in a quoted string.  When quoting\r\n   is needed, the backslash character is used to quote the following\r\n   character.  For example\r\n\r\n      Abc\\@def@example.com\r\n\r\n   is a valid form of an email address.  Blank spaces may also appear,\r\n   as in\r\n\r\n      Fred\\ Bloggs@example.com\r\n\r\n   The backslash character may also be used to quote itself, e.g.,\r\n\r\n      Joe.\\\\Blow@example.com",
    "correct_text": "   The exact rule is that any ASCII character, including control\r\n   characters, may appear quoted, or in a quoted string.  When quoting\r\n   is needed, the backslash character is used to quote the following\r\n   character.  For example\r\n\r\n      \"Abc\\@def\"@example.com\r\n\r\n   is a valid form of an email address.  Blank spaces may also appear,\r\n   as in\r\n\r\n      \"Fred\\ Bloggs\"@example.com\r\n\r\n   The backslash character may also be used to quote itself, e.g.,\r\n\r\n      \"Joe.\\\\Blow\"@example.com",
    "notes": "",
    "submit_date": "2005-07-09",
    "submitter_name": "John C. Klensin",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 1003,
    "doc-id": "RFC3696",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "   In addition to restrictions on syntax, there is a length limit on\r\n   email addresses.  That limit is a maximum of 64 characters (octets)\r\n   in the \"local part\" (before the \"@\") and a maximum of 255 characters\r\n   (octets) in the domain part (after the \"@\") for a total length of 320\r\n   characters.  Systems that handle email should be prepared to process\r\n   addresses which are that long, even though they are rarely\r\n   encountered.",
    "correct_text": "   In addition to restrictions on syntax, there is a length limit on\r\n   email addresses.  That limit is a maximum of 64 characters (octets)\r\n   in the \"local part\" (before the \"@\") and a maximum of 255 characters\r\n   (octets) in the domain part (after the \"@\") for a total length of 320\r\n   characters. However, there is a restriction in RFC 2821 on the length of an\r\n   address in MAIL and RCPT commands of 256 characters.  Since addresses\r\n   that do not fit in those fields are not normally useful, the upper\r\n   limit on address lengths should normally be considered to be 256.\r\n\r\n   \r\n",
    "notes": "",
    "submit_date": "2005-07-09",
    "submitter_name": "John C. Klensin",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 1004,
    "doc-id": "RFC3696",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 4.3,
    "orig_text": "   +-------------------------+-----------------------------+-----------+\r\n   |      Email address      |         MAILTO URL          |   Notes   |\r\n   +-------------------------+-----------------------------+-----------+\r\n   |     Joe@example.com     |  mailto:joe@example.com     |     1     |\r\n\r\n...\r\n\r\n   Notes on Table\r\n\r\n   1.  No characters appear in the email address that require escaping,\r\n       so the body of the MAILTO URL is identical to the email address.",
    "correct_text": "   +-------------------------+-----------------------------+-----------+\r\n   |      Email address      |         MAILTO URL          |   Notes   |\r\n   +-------------------------+-----------------------------+-----------+\r\n   |     Joe@example.com     |  mailto:Joe@example.com     |     1     |\r\n\r\n...\r\n\r\n   Notes on Table\r\n\r\n   1.  No characters appear in the email address that\r\n       require escaping, so the body of the MAILTO URL is\r\n       identical to the email address.  Because the local part\r\n       of email addresses may be treated as case-sensitive by\r\n       the system hosting the mailbox (see RFC 2821, Section\r\n       4.1.2), \"mailto:joe@example.com\" would not be a valid\r\n       URL for the mailbox Joe@example.com even though, if the\r\n       recommendations of RFC 2821 are followed, it would work\r\n       as a synonym.  See also Section 6.2.3 of RFC 3986.",
    "notes": "",
    "submit_date": "2007-09-09",
    "submitter_name": "Charles Curran",
    "verifier_id": 99,
    "verifier_name": "John C. Klensin",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 1690,
    "doc-id": "RFC3696",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "(from erratum 1003)\r\n\r\nIn addition to restrictions on syntax, there is a length limit on\r\n   email addresses.  That limit is a maximum of 64 characters (octets)\r\n   in the \"local part\" (before the \"@\") and a maximum of 255 characters\r\n   (octets) in the domain part (after the \"@\") for a total length of 320\r\n   characters. However, there is a restriction in RFC 2821 on the length of an\r\n   address in MAIL and RCPT commands of 256 characters.  Since addresses\r\n   that do not fit in those fields are not normally useful, the upper\r\n   limit on address lengths should normally be considered to be 256.",
    "correct_text": "In addition to restrictions on syntax, there is a length limit on\r\n   email addresses.  That limit is a maximum of 64 characters (octets)\r\n   in the \"local part\" (before the \"@\") and a maximum of 255 characters\r\n   (octets) in the domain part (after the \"@\") for a total length of 320\r\n   characters. However, there is a restriction in RFC 2821 on the length of an\r\n   address in MAIL and RCPT commands of 254 characters.  Since addresses\r\n   that do not fit in those fields are not normally useful, the upper\r\n   limit on address lengths should normally be considered to be 254.",
    "notes": "I believe erratum ID 1003 is slightly wrong. RFC 2821 places a 256 character limit on the forward-path. But a path is defined as\r\n\r\nPath = \"<\" [ A-d-l \":\" ] Mailbox \">\"\r\n\r\nSo the forward-path will contain at least a pair of angle brackets in addition to the Mailbox. This limits the Mailbox (i.e. the email address) to 254 characters.",
    "submit_date": "2009-02-22",
    "submitter_name": "Dominic Sayers",
    "verifier_id": 126,
    "verifier_name": "Nevil Brownlee",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3563,
    "doc-id": "RFC3696",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3.4,
    "orig_text": "Section 3 says:\r\n\r\n   The exact rule is that any ASCII character, including control\r\n   characters, may appear quoted, or in a quoted string.  When quoting\r\n   is needed, the backslash character is used to quote the following\r\n   character.  For example\r\n\r\n      Abc\\@def@example.com\r\n\r\n   is a valid form of an email address.  Blank spaces may also appear,\r\n   as in\r\n\r\n      Fred\\ Bloggs@example.com\r\n\r\n   The backslash character may also be used to quote itself, e.g.,\r\n\r\n      Joe.\\\\Blow@example.com\r\n\r\n",
    "correct_text": "Section 3 says:\r\n\r\n   The exact rule is that any ASCII character, including control\r\n   characters, may appear quoted, or in a quoted string.  When quoting\r\n   is needed, the backslash character is used to quote the following\r\n   character.  For example\r\n\r\n      Abc\\@def@example.com\r\nor      \r\n      \"Abc@def\"@example.com\r\n\r\n   is a valid form of an email address.  Blank spaces may also appear,\r\n   as in\r\n\r\n      Fred\\ Bloggs@example.com\r\nor      \r\n      \"Fred Bloggs\"@example.com\r\n\r\n   The backslash character may also be used to quote itself, e.g.,\r\n\r\n      Joe.\\\\Blow@example.com\r\nor      \r\n      \" Joe.\\Blow\"@example.com\r\n\r\n",
    "notes": "Errata 246 is clearly wrong. The author changed the quoting to make it appear backslash quoting was required to use a single backquote. This is totally wrong, and contradicts the RFC text:\r\n\r\n\"may appear quoted, or in a quoted string\".\r\n\r\nI tested today with several mailers sending to the google pseudo-alias of first.last+note@gmail.com, where note can be arbitrary text. By testing numerous versions of quoting I was able to see that my corrected text was what appeared in the destination email.",
    "submit_date": "2013-03-22",
    "submitter_name": "David Hoerl",
    "verifier_id": 126,
    "verifier_name": "Nevil Brownlee",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4002,
    "doc-id": "RFC3696",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "   The exact rule is that any ASCII character, including control\r\n   characters, may appear quoted, or in a quoted string.  When quoting\r\n   is needed, the backslash character is used to quote the following\r\n   character.  For example\r\n\r\n      Abc\\@def@example.com\r\n\r\n   is a valid form of an email address.  Blank spaces may also appear,\r\n   as in\r\n\r\n      Fred\\ Bloggs@example.com\r\n\r\n   The backslash character may also be used to quote itself, e.g.,\r\n\r\n      Joe.\\\\Blow@example.com\r\n\r\n   In addition to quoting using the backslash character, conventional\r\n   double-quote characters may be used to surround strings.  For example\r\n\r\n      \"Abc@def\"@example.com\r\n\r\n      \"Fred Bloggs\"@example.com\r\n\r\n   are alternate forms of the first two examples above.",
    "correct_text": "   The exact rule is that any ASCII character, including control\r\n   characters, may appear quoted, or in a quoted string.  When quoting\r\n   is needed, the backslash character is used to quote the following\r\n   character.  For example\r\n\r\n      Abc\\@def@example.com\r\n\r\n   is a valid form of an email address.  Blank spaces may also appear,\r\n   as in\r\n\r\n      Fred\\ Bloggs@example.com\r\n\r\n   The backslash character may also be used to quote itself, e.g.,\r\n\r\n      Joe.\\\\Blow@example.com\r\n\r\n   In addition to quoting using the backslash character, conventional\r\n   double-quote characters may be used to surround strings.  For example\r\n\r\n      \"Abc@def\"@example.com\r\n\r\n      \"Fred Bloggs\"@example.com\r\n\r\n      \"Joe.\\\\Blow\"@example.com\r\n\r\n   are alternate forms of the examples above.",
    "notes": "Errata 3563 is incorrect. The first two suggested additions it makes to the spec are actually already present in the original spec just one paragraph down. The third and final suggested addition (allowing an unquoted backslash in a quoted string), while appearing to comport with this RFC, violates RFC 2822 (the reference document for this section). While the suggested email address is valid, it is not equivalent to the original.\r\n\r\nRFC 2822 sections 3.2.1, 3.2.2, and 3.2.5 define quoted-string as consisting of any unquoted ASCII character except for backslash and double quote, and any backslash-quoted ASCII character including backslash and double quote.\r\n\r\nThus, while it is correct that\r\n\r\n   \"Joe.\\Blow\"@example.com\r\n\r\nis a valid email address, it is not equivalent to \r\n\r\n   Joe.\\\\Blow@example.com\r\n\r\nas the \\B in the first should be interpreted as a quoted B, not as an illegally unquoted backslash followed by a B. The quoted equivalent of\r\n\r\n   Joe.\\\\Blow@example.com\r\n\r\nis\r\n\r\n   \"Joe.\\\\Blow\"@example.com\r\n\r\nThis example was probably left out of the original spec because the quoted-string version differs from the original only in the quotes themselves.",
    "submit_date": "2014-05-28",
    "submitter_name": "Brandon Gabbert",
    "verifier_id": 126,
    "verifier_name": "Nevil Brownlee",
    "update_date": "2019-09-10 09:09:03"
  }
]
