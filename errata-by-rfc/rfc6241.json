[
  {
    "errata_id": "3569",
    "doc-id": "RFC6241",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "1.2",
    "orig_text": "   (2)  The Messages layer provides a simple, transport-independent\r\n        framing mechanism for encoding RPCs and notifications.\r\n        Section 4 documents the RPC messages, and [RFC5717] documents\r\n        notifications",
    "correct_text": "   (2)  The Messages layer provides a simple, transport-independent\r\n        framing mechanism for encoding RPCs and notifications.\r\n        Section 4 documents the RPC messages, and [RFC5277] documents\r\n        notifications",
    "notes": "RFC5717 Partial Lock Remote Procedure Call (RPC) for NETCONF\r\nRFC5277 NETCONF Event Notifications",
    "submit_date": "2013-03-27",
    "submitter_name": "Xiang Li",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3821",
    "doc-id": "RFC6241",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "8.4.1",
    "orig_text": "8.4.1.  Description\r\n\r\nThe :confirmed-commit:1.1 capability indicates that the server will\r\nsupport the <cancel-commit> operation and the <confirmed>,\r\n<confirm-timeout>, <persist>, and <persist-id> parameters for the\r\n<commit> operation.  See Section 8.3 for further details on the\r\n<commit> operation.\r\n\r\nA confirmed <commit> operation MUST be reverted if a confirming\r\ncommit is not issued within the timeout period (by default 600\r\nseconds = 10 minutes).  The confirming commit is a <commit> operation\r\nwithout the <confirmed> parameter.  The timeout period can be\r\nadjusted with the <confirm-timeout> parameter.  If a follow-up\r\nconfirmed <commit> operation is issued before the timer expires, the\r\ntimer is reset to the new value (600 seconds by default).  Both the\r\nconfirming commit and a follow-up confirmed <commit> operation MAY\r\nintroduce additional changes to the configuration.\r\n\r\nIf the <persist> element is not given in the confirmed commit\r\noperation, any follow-up commit and the confirming commit MUST be\r\nissued on the same session that issued the confirmed commit.  If the\r\n<persist> element is given in the confirmed <commit> operation, a\r\nfollow-up commit and the confirming commit can be given on any\r\nsession, and they MUST include a <persist-id> element with a value\r\nequal to the given value of the <persist> element.\r\n\r\nIf the server also advertises the :startup capability, a\r\n<copy-config> from running to startup is also necessary to save the\r\nchanges to startup.\r\n\r\nIf the session issuing the confirmed commit is terminated for any\r\nreason before the confirm timeout expires, the server MUST restore\r\nthe configuration to its state before the confirmed commit was\r\nissued, unless the confirmed commit also included a <persist>\r\nelement.\r\n\r\nIf the device reboots for any reason before the confirm timeout\r\nexpires, the server MUST restore the configuration to its state\r\nbefore the confirmed commit was issued.\r\n\r\nIf a confirming commit is not issued, the device will revert its\r\nconfiguration to the state prior to the issuance of the confirmed\r\ncommit.  To cancel a confirmed commit and revert changes without\r\nwaiting for the confirm timeout to expire, the client can explicitly\r\nrestore the configuration to its state before the confirmed commit\r\nwas issued, by using the <cancel-commit> operation.",
    "correct_text": "8.4.1.  Description\r\n \r\nThe :confirmed-commit:1.1 capability indicates that the server will\r\nsupport the <cancel-commit> operation, the <confirmed>, <confirm-\r\ntimeout>, <persist>, and <persist-id> parameters for the <commit>\r\noperation, and differentiate between a “to be confirmed” <commit>\r\noperation (a “confirmed commit”) and a confirming <commit>\r\noperation. See Section 8.3 for further details on the <commit>\r\noperation.\r\n \r\nA confirmed <commit> operation MUST be reverted if a confirming\r\ncommit is not issued within the timeout period (by default 600\r\nseconds = 10 minutes). The confirming commit is a <commit> operation\r\nwithout the <confirmed> parameter and, if successful, cannot be\r\nreverted. The timeout period can be adjusted with the <confirm-\r\ntimeout> parameter. If a follow-up confirmed <commit> operation is\r\nissued before the timer expires, the timer is reset to the new value\r\n(600 seconds by default). Both the confirming commit and a follow-up\r\nconfirmed <commit> operation MAY introduce additional changes to the\r\nconfiguration.\r\n \r\nIf the <persist> element is not given in the confirmed commit\r\noperation, any follow-up commit and the confirming commit MUST be\r\nissued on the same session that issued the confirmed commit. If the\r\n<persist> element is given in the confirmed <commit> operation, a\r\nfollow-up commit and the confirming commit can be given on any\r\nsession, and they MUST include a <persist-id> element with a value\r\nequal to the given value of the <persist> element.\r\n \r\nIf the server also advertises the :startup capability, a <copy-\r\nconfig> from running to startup is also necessary to save the\r\nchanges to startup. If the session issuing a sequence of one or more\r\nconfirmed commits is terminated for any reason before the confirm\r\ntimeout expires, the server MUST restore the configuration to its\r\nstate before the sequence of confirmed commits was issued, unless\r\nthe last confirmed commit also included a <persist> or <persist-id>\r\nelement.\r\n \r\nIf the device reboots for any reason before the confirm timeout\r\nexpires, the server MUST restore the configuration to its state\r\nbefore the sequence of confirmed commits was issued, unless the last\r\nconfirmed commit also included a <persist> or <persist-id> element.\r\n \r\nIf a confirming commit is not issued, the device will revert its\r\nconfiguration to the state prior to the issuance of the first in the\r\ncurrent sequence of confirmed commits. To cancel the current\r\nsequence of confirmed commits and revert changes without waiting for\r\nthe confirm timeout to expire, the client can explicitly restore the\r\nconfiguration to its state before the sequence of confirmed commits\r\nwas issued, by using the <cancel-commit> operation.\r\n ",
    "notes": "This erratum seeks to clarify the meaning of the term \"confirmed commit\" for those not familiar with the use of the term within JUNOS. In particular, that the use of \"confirmed\" is not in the sense of the adjective (meaning \"firmly established\") but rather that the commit needs to be confirmed. It also emphasises that a \"confirming commit\" cannot be reverted. Finally it identifies that it is possible to have a sequence of \"confirmed commits\" prior to a \"confirming commit\" and that, should no \"confirming commit\" be received, the configuration will revert to the state prior to the first \"confirmed commit\" in the sequence.",
    "submit_date": "2013-12-06",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "2",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3822",
    "doc-id": "RFC6241",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "8.4.4.1",
    "orig_text": "Description:\r\n\r\n      Cancels an ongoing confirmed commit.  If the <persist-id>\r\n      parameter is not given, the <cancel-commit> operation MUST be\r\n      issued on the same session that issued the confirmed commit.\r\n\r\nParameters:\r\n\r\n   persist-id:\r\n\r\n         Cancels a persistent confirmed commit.  The value MUST be\r\n         equal to the value given in the <persist> parameter to the\r\n         <commit> operation.  If the value does not match, the\r\n         operation fails with an \"invalid-value\" error.\r\n",
    "correct_text": "Description:\r\n\r\n      Cancels an ongoing sequence of confirmed commits. If the\r\n      <persist-id> parameter is not given, the <cancel-commit>\r\n      operation MUST be issued on the same session that issued the\r\n      sequence of confirmed commits.\r\n\r\nParameters:\r\n\r\n   persist-id:\r\n\r\n         Cancels a persistent sequence of confirmed commits. The\r\n         value MUST be equal to the value given in the <persist>\r\n         parameter to the <commit> operation. If the value does not\r\n         match, the operation fails with an \"invalid-value\" error.\r\n",
    "notes": "This erratum seeks to clarify that <cancel-commit> will cancel all configuration changes arising from a sequence of \"confirmed commits\".",
    "submit_date": "2013-12-06",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3823",
    "doc-id": "RFC6241",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "8.4.5.1",
    "orig_text": "   persist:\r\n\r\n         Make the confirmed commit survive a session termination, and\r\n         set a token on the ongoing confirmed commit.",
    "correct_text": "   persist:\r\n\r\n         Make the confirmed commit survive a session termination,\r\n         and set a token on the ongoing sequence of confirmed\r\n         commits.",
    "notes": "This erratum seeks to clarify that the use of the \"persist\" parameter will persist all configuration changes arising from a sequence of \"confirmed commits\".",
    "submit_date": "2013-12-06",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3980",
    "doc-id": "RFC6241",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "Sections 6.2.5 and 6.3",
    "orig_text": "In section 6.3:\r\n\r\nOLD:\r\n   The\r\n   algorithm continues until all sibling sets in all subtrees specified\r\n   in the filter have been processed.\r\n\r\nIn section 6.2.5\r\n\r\nOLD:\r\n  o  If any sibling nodes of the selection node are instance identifier\r\n      components for a conceptual data structure (e.g., list key leaf),\r\n      then they MAY also be included in the filter output.\r\n",
    "correct_text": "In section 6.3:\r\n\r\nNEW:\r\n\r\n   The \r\n   algorithm continues until all sibling sets in all subtrees specified\r\n   in the filter have been processed. If any sibling nodes of a node\r\n   are instance identifier components for a conceptual data structure\r\n   (e.g., list key leaf), then they MAY also be included in the filter \r\n   output.\r\n\r\nIn section 6.2.5\r\n\r\nNEW:\r\n",
    "notes": "The intent is to allow the server to always include the key node values and the wording accidentally does not cover this case.\r\n\r\nHere is the OLD/NEW in a more intuitive way:\r\nIn section 6.3:\r\n\r\nOLD:\r\n\r\n  The algorithm continues until all sibling sets in all subtrees specified\r\n   in the filter have been processed.\r\nNEW:\r\n\r\n   The algorithm continues until all sibling sets in all subtrees specified\r\n   in the filter have been processed. If any sibling nodes of a node\r\n   are instance identifier components for a conceptual data structure\r\n   (e.g., list key leaf), then they MAY also be included in the filter output.\r\n\r\nImplicitly in section 6.2.5 to delete the moved text:\r\n\r\nOLD:\r\n\r\n   If any sibling nodes of the selection node are instance identifier\r\n   components for a conceptual data structure (e.g., list key leaf),\r\n   then they MAY also be included in the filter output.\r\n\r\nNEW:\r\n   <void>\r\n\r\n",
    "submit_date": "2014-05-05",
    "submitter_name": "Klement Sekera",
    "verifier_id": "2",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4066",
    "doc-id": "RFC6241",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.2",
    "orig_text": "If the \"operation\" attribute is not specified, the\r\nconfiguration is merged into the configuration datastore.",
    "correct_text": "If the \"operation\" attribute is not specified, then the \r\noperation applied to the parent data node of the configuration\r\nis used. If no parent data node is available, then the value of \r\nthe <default-operation> parameter is used.  If the \r\n<default-operation> parameter is not given, the configuration \r\nis merged into the configuration datastore.\r\n",
    "notes": "sentence in para 6 is not correct.\r\nThe default-operation value is used, not the value \"merge\".\r\n\r\nDiscussion on the NETCONF mailing list. See http://www.ietf.org/mail-archive/web/netconf/current/msg09169.html",
    "submit_date": "2014-07-30",
    "submitter_name": "Andy Bierman",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4544",
    "doc-id": "RFC6241",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "6.1",
    "orig_text": "   XML subtree filtering is a mechanism that allows an application to\r\n   select particular XML subtrees to include in the <rpc-reply> for a\r\n   <get> or <get-config> operation.  A small set of filters for\r\n   inclusion, simple content exact-match, and selection is provided,\r\n   which allows some useful, but also very limited, selection\r\n   mechanisms.  The server does not need to utilize any data-model-\r\n   specific semantics during processing, allowing for simple and\r\n   centralized implementation strategies.\r\n\r\n   Conceptually, a subtree filter is comprised of zero or more element\r\n   subtrees, which represent the filter selection criteria.  At each\r\n   containment level within a subtree, the set of sibling nodes is\r\n   logically processed by the server to determine if its subtree and\r\n   path of elements to the root are included in the filter output.\r\n\r\n   Each node specified in a subtree filter represents an inclusive\r\n   filter.  Only associated nodes in underlying data model(s) within the\r\n   specified datastore on the server are selected by the filter.  A node\r\n   is selected if it matches the selection criteria and hierarchy of\r\n   elements given in the filter data, except that the filter absolute\r\n   path name is adjusted to start from the layer below <filter>.\r\n\r\n   Response messages contain only the subtrees selected by the filter.\r\n   Any selection criteria that were present in the request, within a\r\n   particular selected subtree, are also included in the response.  Note\r\n   that some elements expressed in the filter as leaf nodes will be\r\n   expanded (i.e., subtrees included) in the filter output.  Specific\r\n   data instances are not duplicated in the response in the event that\r\n   the request contains multiple filter subtree expressions that select\r\n   the same data.",
    "correct_text": "   XML subtree filtering is a mechanism that allows an application to\r\n   select particular XML subtrees to include in the <rpc-reply> for a\r\n   <get> or <get-config> operation.  A small set of filters for\r\n   inclusion, simple content exact-match, and selection is provided,\r\n   which allows some useful, but also very limited, selection\r\n   mechanisms.  The server does not need to utilize any data-model-\r\n   specific semantics during processing, allowing for simple and\r\n   centralized implementation strategies.\r\n\r\n   Conceptually, a subtree filter is comprised of zero or more element\r\n   subtrees, which represent the filter selection criteria.  At each\r\n   containment level within a subtree, the set of sibling nodes is\r\n   logically processed by the server to determine if its subtree and\r\n   path of elements to the root are included in the filter output.\r\n\r\n   Each node specified in a subtree filter represents an inclusive\r\n   filter.  Only associated nodes in underlying data model(s) within the\r\n   specified datastore on the server are selected by the filter.  A node\r\n   is selected if it matches the selection criteria and hierarchy of\r\n   elements given in the filter data, except that the filter absolute\r\n   path name is adjusted to start from the layer below <filter>.\r\n\r\n   Response messages contain only the subtrees selected by the filter.\r\n   Any selection criteria that were present in the request, within a\r\n   particular selected subtree, are also included in the response.  Note\r\n   that some elements expressed in the filter as leaf nodes will be\r\n   expanded (i.e., subtrees included) in the filter output.  Specific\r\n   data instances are not duplicated in the response in the event that\r\n   the request contains multiple filter subtree expressions that select\r\n   the same data.\r\n\r\n   When a node in the subtree filter is unknown, the server sends a \r\n   <rpc-error> as reply with \"unknown-element\" error-tag. In case of\r\n   <get-config> RPC, if the subtree filter contains a node that is\r\n   not a configuration node, the server sends <rpc-error> as reply\r\n   with \"bad-element\" error-tag. ",
    "notes": "It is not clear in the RFC what a netconf server should do when \r\nit encounters invalid nodes in a subtree filter in case of \r\nget/get-config RPC.\r\n --VERIFIER NOTES-- \r\nI think the text is clear - it says that if the element \"exactly\r\nmatches a corresponding portion of the supported data model\" it is\r\nincluded.  If it is not even in the server's schema, it doesn't match\r\nthe \"supported data model\".\r\n\r\nXPath filtering works the same way; elements that are not part of the\r\ndata model simply won't match, without producing an error.",
    "submit_date": "2015-11-24",
    "submitter_name": "Keshava Bhat",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4856",
    "doc-id": "RFC6241",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "7.2",
    "orig_text": "config:  A hierarchy of configuration data as defined by one of\r\n         the device's data models.  The contents MUST be placed in an\r\n         appropriate namespace, to allow the device to detect the\r\n         appropriate data model, and the contents MUST follow the\r\n         constraints of that data model, as defined by its capability\r\n         definition.  Capabilities are discussed in Section 8.",
    "correct_text": "config:  A hierarchy of configuration data as defined by one or more of\r\n         the device's data models.  The contents MUST be placed in an\r\n         appropriate namespace, to allow the device to detect the\r\n         appropriate data model, and the contents MUST follow the\r\n         constraints of that data model, as defined by its capability\r\n         definition.  Capabilities are discussed in Section 8.",
    "notes": "\n --VERIFIER NOTES-- \nAs discussed on the NETCONF mailing list.",
    "submit_date": "2016-11-08",
    "submitter_name": "frank feng",
    "verifier_id": "132",
    "verifier_name": "Benoit Claise",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5388",
    "doc-id": "RFC6241",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "8.3.4.2",
    "orig_text": "8.3.4.2.  <discard-changes>\r\n\r\n   If the client decides that the candidate configuration is not to be\r\n   committed, the <discard-changes> operation can be used to revert the\r\n   candidate configuration to the current running configuration.\r\n\r\n     <rpc message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <discard-changes/>\r\n     </rpc>\r\n\r\n   This operation discards any uncommitted changes by resetting the\r\n   candidate configuration with the content of the running\r\n   configuration.",
    "correct_text": "8.3.4.2.  <discard-changes>\r\n\r\n   Description:\r\n\r\n         If the client decides that the candidate configuration is not\r\n         to be committed, the <discard-changes> operation can be used to\r\n         revert the candidate configuration to the current running\r\n         configuration.\r\n\r\n         This operation discards any uncommitted changes by resetting\r\n         the candidate configuration with the content of the running\r\n         configuration.\r\n\r\n   Positive Response:\r\n\r\n         If the device was able to satisfy the request, an <rpc-reply>\r\n         is sent that contains an <ok> element.\r\n\r\n   Negative Response:\r\n\r\n         An <rpc-error> element is included in the <rpc-reply> if the\r\n         request cannot be completed for any reason.\r\n\r\n   Example:\r\n\r\n     <rpc message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <discard-changes/>\r\n     </rpc>\r\n\r\n     <rpc-reply message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <ok/>\r\n     </rpc-reply>",
    "notes": "RFC 6241 section 1.1 includes the following two definitions:\r\n\r\n   o  protocol operation: A specific remote procedure call, as used\r\n      within the NETCONF protocol.\r\n\r\n   o  remote procedure call (RPC): Realized by exchanging <rpc> and\r\n      <rpc-reply> messages.\r\n\r\nPositive and negative responses are detailed for all instances of an operation within the RFC with the exception of <discard-changes>.\r\n\r\nSection 8.3.4.2 identifies <discard-changes> as an operation, and appendices A and C identify \"rollback-failed\" as an error-tag to be used when the \"Request to roll back some configuration change (via rollback-on-error or <discard-changes> operations) was not completed for some reason.\"\r\n\r\nThis change clarifies that <discard-changes> requires an <rpc-reply>.",
    "submit_date": "2018-06-11",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "158",
    "verifier_name": "Ignas Bagdonas",
    "update_date": "2019-10-18 11:34:13"
  },
  {
    "errata_id": "5401",
    "doc-id": "RFC6241",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "8.9.1",
    "orig_text": "   The XPath expression MUST return a node set.  If it does not return a\r\n   node set, the operation fails with an \"invalid-value\" error.",
    "correct_text": "   The XPath expression MUST return a node set.  If it does not return a\r\n   node set, the operation fails with an <error-tag> value of \r\n   \"invalid-value\".",
    "notes": "It is unclear what is the meaning of \"invalid-value\" \"error\". Since the xpath will be part of \"select\" attribute, we can assume that a server can return a \"bad-attribute\" error-tag and having error-message indicating invalid-value for the attribute. This clarifies the <error-tag> to be used in such cases.\r\nIn other places, where error-tag has been mentioned, it is clear that \"invalid-value\" <error-tag> must be used.",
    "submit_date": "2018-06-21",
    "submitter_name": "Rohit R Ranade",
    "verifier_id": "158",
    "verifier_name": "Ignas Bagdonas",
    "update_date": "2019-10-18 12:39:15"
  },
  {
    "errata_id": "5443",
    "doc-id": "RFC6241",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.4",
    "orig_text": "The <ok> element is sent in <rpc-reply> messages if no errors or\r\nwarnings occurred during the processing of an <rpc> request, and no\r\ndata was returned from the operation.",
    "correct_text": "The <ok> element is sent in <rpc-reply> messages if\r\nand only if\r\nno errors or\r\nwarnings occurred during the processing of an <rpc> request, and no\r\ndata was returned from the operation.",
    "notes": "I have been informed that an <ok> element should not include any errors or warnings, even in the event of the associated operation completing because the error's severity was only at warning level).\n --VERIFIER NOTES-- \n   Rejected based on WG mailing list discussion: https://mailarchive.ietf.org/arch/msg/netconf/nQYVm8sm5pZamtRAIhbcB9cOuos\r\n\r\n",
    "submit_date": "2018-07-27",
    "submitter_name": "Jonathan Natale",
    "verifier_id": "158",
    "verifier_name": "Ignas Bagdonas",
    "update_date": "2019-10-18 13:35:49"
  },
  {
    "errata_id": "5596",
    "doc-id": "RFC6241",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "7.5",
    "orig_text": "      The duration of the lock is defined as beginning when the lock is\r\n      acquired and lasting until either the lock is released or the\r\n      NETCONF session closes.  The session closure can be explicitly\r\n      performed by the client, or implicitly performed by the server\r\n      based on criteria such as failure of the underlying transport,\r\n      simple inactivity timeout, or detection of abusive behavior on the\r\n      part of the client.  These criteria are dependent on the\r\n      implementation and the underlying transport.",
    "correct_text": "      The duration of the lock is defined as beginning when the lock is\r\n      acquired and lasting until either the lock is released or the\r\n      NETCONF session closes.  The session closure can be explicitly\r\n      performed by the client, or implicitly performed by the server\r\n      based on criteria such as failure of the underlying transport,\r\n      simple inactivity timeout, or detection of abusive behavior on the\r\n      part of the client.  These criteria are dependent on the\r\n      implementation and the underlying transport. Note that a lock\r\n      associated with a persistent confirmed commit will be released if\r\n      the NETCONF session closes and, if required, a new lock will have\r\n      to be acquired.",
    "notes": "A persistent confirmed commit can survive a session termination, however any lock on that same session cannot. If a new session is established between the client and server, the client will need to acquire new locks if it wishes to protect the ongoing persistent confirmed commit.\n --VERIFIER NOTES-- \n   Rejected based on WG mailing list discussion: https://mailarchive.ietf.org/arch/msg/netconf/lNr91W5aK-abxDaqzadftjoE2Pg\r\n\r\n",
    "submit_date": "2019-01-09",
    "submitter_name": "Jonathan Hansford",
    "verifier_id": "158",
    "verifier_name": "Ignas Bagdonas",
    "update_date": "2019-10-19 07:31:23"
  },
  {
    "errata_id": "5790",
    "doc-id": "RFC6241",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "In Sections 7.8, 7.9, and 8.4.1",
    "orig_text": "OLD:\r\n\r\n7.8.  <close-session>\r\n\r\n   Description:  Request graceful termination of a NETCONF session.\r\n\r\n      When a NETCONF server receives a <close-session> request, it will\r\n      gracefully close the session.  The server will release any locks\r\n      and resources associated with the session and gracefully close\r\n      any associated connections.  Any NETCONF requests received after\r\n      a <close-session> request will be ignored.\r\n\r\n   Positive Response:  If the device was able to satisfy the request, an\r\n      <rpc-reply> is sent that includes an <ok> element.\r\n\r\n   Negative Response:  An <rpc-error> element is included in the\r\n      <rpc-reply> if the request cannot be completed for any reason.\r\n\r\n   Example:\r\n\r\n     <rpc message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <close-session/>\r\n     </rpc>\r\n\r\n     <rpc-reply message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <ok/>\r\n     </rpc-reply>\r\n\r\nNEW\r\n\r\n7.8.  <close-session>\r\n\r\n   Description:  Request graceful termination of a NETCONF session.\r\n\r\n      When a NETCONF server receives a <close-session> request, it will\r\n      gracefully close the session.  The server will release any locks\r\n      and resources associated with the session and gracefully close any\r\n      associated connections.  Any NETCONF requests received after a\r\n      <close-session> request will be ignored.\r\n\r\n      For details on what happens if a NETCONF server receives a \r\n      <close-session> request while processing a confirmed commit,\r\n      please refer to Section 8.4.\r\n\r\n   Positive Response:  If the device was able to satisfy the request, an\r\n      <rpc-reply> is sent that includes an <ok> element.\r\n\r\n   Negative Response:  An <rpc-error> element is included in the\r\n      <rpc-reply> if the request cannot be completed for any reason.\r\n\r\n   Example:\r\n\r\n     <rpc message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <close-session/>\r\n     </rpc>\r\n\r\n     <rpc-reply message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <ok/>\r\n     </rpc-reply>\r\n\r\nOLD\r\n\r\n7.9.  <kill-session>\r\n\r\n   Description:  Force the termination of a NETCONF session.\r\n\r\n      When a NETCONF entity receives a <kill-session> request for an\r\n      open session, it will abort any operations currently in process,\r\n      release any locks and resources associated with the session, and\r\n      close any associated connections.\r\n\r\n      If a NETCONF server receives a <kill-session> request while\r\n      processing a confirmed commit (Section 8.4), it MUST restore the\r\n      configuration to its state before the confirmed commit was issued.\r\n\r\n      Otherwise, the <kill-session> operation does not roll back\r\n      configuration or other device state modifications made by the\r\n      entity holding the lock.\r\n\r\n   Parameters:\r\n\r\n      session-id:  Session identifier of the NETCONF session to be\r\n         terminated.  If this value is equal to the current session ID,\r\n         an \"invalid-value\" error is returned.\r\n\r\n   Positive Response:  If the device was able to satisfy the request, an\r\n      <rpc-reply> is sent that includes an <ok> element.\r\n\r\n   Negative Response:  An <rpc-error> element is included in the\r\n      <rpc-reply> if the request cannot be completed for any reason.\r\n\r\n\r\n   Example:\r\n\r\n     <rpc message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <kill-session>\r\n         <session-id>4</session-id>\r\n       </kill-session>\r\n     </rpc>\r\n\r\n     <rpc-reply message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <ok/>\r\n     </rpc-reply>\r\n\r\nNEW\r\n\r\n7.9.  <kill-session>\r\n\r\n   Description:  Force the termination of a NETCONF session.\r\n\r\n      When a NETCONF entity receives a <kill-session> request for an\r\n      open session, it will abort any operations currently in process,\r\n      release any locks and resources associated with the session, and\r\n      close any associated connections.\r\n\r\n      For details on what happens if a NETCONF server receives a \r\n      <kill-session> request while processing a confirmed commit,\r\n      please refer to Section 8.4.\r\n\r\n      Otherwise, the <kill-session> operation does not roll back\r\n      configuration or other device state modifications made by the\r\n      entity holding the lock.\r\n\r\n   Parameters:\r\n\r\n      session-id:  Session identifier of the NETCONF session to be\r\n         terminated.  If this value is equal to the current session ID,\r\n         an \"invalid-value\" error is returned.\r\n\r\n   Positive Response:  If the device was able to satisfy the request, an\r\n      <rpc-reply> is sent that includes an <ok> element.\r\n\r\n   Negative Response:  An <rpc-error> element is included in the\r\n      <rpc-reply> if the request cannot be completed for any reason.\r\n\r\n\r\n   Example:\r\n\r\n     <rpc message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <kill-session>\r\n         <session-id>4</session-id>\r\n       </kill-session>\r\n     </rpc>\r\n\r\n     <rpc-reply message-id=\"101\"\r\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <ok/>\r\n     </rpc-reply>\r\n\r\n\r\nSection 8.4.1\r\n\r\nOLD:\r\n\r\n   If the device reboots for any reason before the confirm timeout\r\n   expires, the server MUST restore the configuration to its state\r\n   before the confirmed commit was issued.\r\n\r\nNEW:\r\n\r\n   If the device reboots for any reason before the confirm timeout\r\n   expires, the server MUST restore the configuration to its state\r\n   before the confirmed commit was issued, unless the confirmed commit \r\n   also included a <persist> element, in which case the server MAY\r\n   continue the confirmed commit procedure.\r\n",
    "correct_text": null,
    "notes": "This Errata modifies three different sections, Sections 7.8, 7.9 and 8.4.1. The changes in Section 7.8 and 7.9 defer the description of the behavior of confirmed commit to Section 8.4.1.",
    "submit_date": "2019-07-23",
    "submitter_name": "Mahesh Jethanandani",
    "verifier_id": "158",
    "verifier_name": "Ignas Bagdonas",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "7624",
    "doc-id": "RFC6241",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.3.",
    "orig_text": "     <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <rpc-error>\r\n         <error-type>rpc</error-type>\r\n         <error-tag>missing-attribute</error-tag>\r\n         <error-severity>error</error-severity>\r\n         <error-info>\r\n           <bad-attribute>message-id</bad-attribute>\r\n           <bad-element>rpc</bad-element>\r\n         </error-info>\r\n       </rpc-error>\r\n     </rpc-reply>",
    "correct_text": "     <nc:rpc-reply xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\r\n       <nc:rpc-error>\r\n         <nc:error-type>rpc</nc:error-type>\r\n         <nc:error-tag>missing-attribute</nc:error-tag>\r\n         <nc:error-severity>error</nc:error-severity>\r\n         <nc:error-info>\r\n           <nc:bad-attribute>message-id</nc:bad-attribute>\r\n           <nc:bad-element>nc:rpc</nc:bad-element>\r\n         </nc:error-info>\r\n       </nc:rpc-error>\r\n     </nc:rpc-reply>",
    "notes": "The original error response is referring to the NETCONF messages layer attribute \"message-id\", which does not belong to any XML namespace. The response is not properly encoding xs:QName values of elements \"bad-attribute\" and \"bad-element\" by placing them both into the default XML namespace. Proposed new text (while verbose) ensures that the values are placed into their respective proper XML namespaces.",
    "submit_date": "2023-08-31",
    "submitter_name": "Jernej Tuljak",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
