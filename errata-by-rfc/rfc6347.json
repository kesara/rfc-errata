[
  {
    "errata_id": 3917,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.2.1",
    "orig_text": "   struct {\r\n     ProtocolVersion client_version;\r\n     Random random;\r\n     SessionID session_id;\r\n     opaque cookie<0..2^8-1>;                             // New field\r\n     CipherSuite cipher_suites<2..2^16-1>;\r\n           CompressionMethod compression_methods<1..2^8-1>;\r\n   } ClientHello;",
    "correct_text": "   struct {\r\n     ProtocolVersion client_version;\r\n     Random random;\r\n     SessionID session_id;\r\n     opaque cookie<0..2^8-1>;                             // New field\r\n     CipherSuite cipher_suites<2..2^16-1>;\r\n     CompressionMethod compression_methods<1..2^8-1>;\r\n     select (extensions_present) {\r\n       case false:\r\n         struct {};\r\n       case true:\r\n         Extension extensions<0..2^16-1>;\r\n     };\r\n   } ClientHello;",
    "notes": "This also affects Section 4.3.2 where the same structure is repeated.\r\n\r\nExtensions are a part of TLS.  They are also part of DTLS in practice, but the RFC omits them.  The corrected text includes the relevant part of the ClientHello from RFC 5246.",
    "submit_date": "2014-03-14",
    "submitter_name": "Martin Thomson",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4103,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.2.1",
    "orig_text": "\r\n   [p. 15]            DTLS 1.2 server implementations SHOULD use DTLS\r\n   version 1.0 regardless of the version of TLS that is expected to be\r\n   negotiated.\r\n\r\n   [p. 16]                                The server MUST use the same\r\n   version number in the HelloVerifyRequest that it would use when\r\n   sending a ServerHello.\r\n\r\n   [p. 15]      DTLS 1.2 and 1.0 clients MUST use the version solely to\r\n   indicate packet formatting (which is the same in both DTLS 1.2 and\r\n   1.0) and not as part of version negotiation.  In particular, DTLS 1.2\r\n   clients MUST NOT assume that because the server uses version 1.0 in\r\n   the HelloVerifyRequest that the server is not DTLS 1.2 or that it\r\n   will eventually negotiate DTLS 1.0 rather than DTLS 1.2.\r\n\r\n   [p. 16]                 Upon receipt of the ServerHello, the client\r\n   MUST verify that the server version values match.\r\n",
    "correct_text": "   [p. 15]            DTLS 1.2 server implementations MAY use DTLS\r\n   version 1.0 regardless of the version of TLS that is expected to be\r\n   negotiated, or the version that is expected to be negotiated.\r\n\r\n   [p. 15]      DTLS 1.2 and 1.0 clients MUST use the version solely to\r\n   indicate packet formatting (which is the same in both DTLS 1.2 and\r\n   1.0) and not as part of version negotiation.  In particular, DTLS 1.2\r\n   clients MUST NOT assume that because the server uses version 1.0 in\r\n   the HelloVerifyRequest that the server is not DTLS 1.2 or that it\r\n   will eventually negotiate DTLS 1.0 rather than DTLS 1.2.\r\n\r\n   [p. 16] [Delete text relating to HelloVerifyRequest.server_version]\r\n",
    "notes": "The statements on the bottom of page 15 and on the top of page 16 are mutually contradictory. It looks like the statements on page 16 were copied from RFC 4347, but the intention was to replace them with the version from page 15 in this revision of the standard.",
    "submit_date": "2014-09-08",
    "submitter_name": "Manuel Pégourié-Gonnard",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4104,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 4.1,
    "orig_text": "   [Page 8]                                                   In order\r\n   to ensure that any given sequence/epoch pair is unique,\r\n   implementations MUST NOT allow the same epoch value to be reused\r\n   within two times the TCP maximum segment lifetime.  In practice, TLS\r\n   implementations rarely rehandshake; therefore, we do not expect this\r\n   to be a problem.\r\n",
    "correct_text": "[Delete these two sentences.]",
    "notes": "Page 9 starts with: \"Similarly, implementations MUST NOT allow the epoch to wrap\" which is a stronger requirement (not allowing to wrap at all vs not allowing reuse within some period), so the weaker requirement should be eliminated to avoid confusion.",
    "submit_date": "2014-09-08",
    "submitter_name": "Manuel Pégourié-Gonnard",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4105,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "4.1.2.1",
    "orig_text": "                                                                      In\r\n   DTLS, the receiving implementation MAY simply discard the offending\r\n   record and continue with the connection.  This change is possible\r\n   because DTLS records are not dependent on each other in the way that\r\n   TLS records are.\r\n\r\n   In general, DTLS implementations SHOULD silently discard records with\r\n   bad MACs or that are otherwise invalid.  They MAY log an error.  If a\r\n   DTLS implementation chooses to generate an alert when it receives a\r\n   message with an invalid MAC, it MUST generate a bad_record_mac alert\r\n   with level fatal and terminate its connection state.  Note that\r\n   because errors do not cause connection termination, DTLS stacks are\r\n   more efficient error type oracles than TLS stacks.  Thus, it is\r\n   especially important that the advice in Section 6.2.3.2 of [TLS12] be",
    "correct_text": "See section 4.1.2.7.\r\n[And merge the last two sentences above in section 4.1.2.7.]\r\n",
    "notes": "Some text is duplicated between 4.1.2.1 and 4.1.2.7, which my cause confusion or give rise to diverging updates in future revisions of this document.",
    "submit_date": "2014-09-08",
    "submitter_name": "Manuel Pégourié-Gonnard",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4642,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 4.1,
    "orig_text": "   version\r\n      The version of the protocol being employed.  This document\r\n      describes DTLS version 1.2, which uses the version { 254, 253 }.\r\n      The version value of 254.253 is the 1's complement of DTLS version\r\n      1.2.  This maximal spacing between TLS and DTLS version numbers\r\n      ensures that records from the two protocols can be easily\r\n      distinguished.  It should be noted that future on-the-wire version\r\n      numbers of DTLS are decreasing in value (while the true version\r\n      number is increasing in value.)\r\n",
    "correct_text": "Replace \"1's complement of DTLS version\" with \"1's complement\r\nof TLS version\":\r\n\r\n   version\r\n      The version of the protocol being employed.  This document\r\n      describes DTLS version 1.2, which uses the version { 254, 253 }.\r\n      The version value of 254.253 is the 1's complement of TLS version\r\n      1.2.  This maximal spacing between TLS and DTLS version numbers\r\n      ensures that records from the two protocols can be easily\r\n      distinguished.  It should be noted that future on-the-wire version\r\n      numbers of DTLS are decreasing in value (while the true version\r\n      number is increasing in value.)\r\n",
    "notes": "Clearly this won't confuse the reader, but it is incorrect as written and should be corrected at some time.",
    "submit_date": "2016-03-18",
    "submitter_name": "Dale R. Worley",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5026,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 4.1,
    "orig_text": "   length\r\n      Identical to the length field in a TLS 1.2 record.  As in TLS 1.2,\r\n      the length should not exceed 2^14.",
    "correct_text": "   length\r\n      Identical to the length field in a TLS 1.2 record.  As in TLS 1.2,\r\n      the length MUST NOT exceed 2^14.",
    "notes": "The originial comment on length in RFC 5246, 6.2.1 is:\r\n   length\r\n      The length (in bytes) of the following TLSPlaintext.fragment.  The\r\n      length MUST NOT exceed 2^14.\r\nso it has to be \"MUST NOT\" - instead of \"should not\" as currently stated.",
    "submit_date": "2017-05-31",
    "submitter_name": "Timm Korte",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5186,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.2.4",
    "orig_text": "[p17]                                                 In order to avoid\r\n   sequence number duplication in case of multiple HelloVerifyRequests,\r\n   the server MUST use the record sequence number in the ClientHello as\r\n   the record sequence number in the HelloVerifyRequest.\r\n\r\n[p17]                  In order to avoid sequence number duplication in\r\n   case of multiple cookie exchanges, the server MUST use the record\r\n   sequence number in the ClientHello as the record sequence number in\r\n   its initial ServerHello. ",
    "correct_text": "[p17]                                                 In order to avoid\r\n   sequence number duplication in case of multiple HelloVerifyRequests,\r\n   the server MUST use the message_seq in the ClientHello as\r\n   the message_seq in the HelloVerifyRequest.\r\n\r\n[p17]                  In order to avoid sequence number duplication in\r\n   case of multiple cookie exchanges, the server MUST use the \r\n   message_seq in the ClientHello as the message_seq in\r\n   its initial ServerHello. ",
    "notes": "the \"record sequence number\" here should be message_seq.",
    "submit_date": "2017-11-28",
    "submitter_name": "Chen Wumao",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5903,
    "doc-id": "RFC6347",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": 1,
    "orig_text": "   with the exception that there is no DTLS version of SSLv2 or SSLv3,",
    "correct_text": "   with the exception that there is no DTLS version of SSLv2, SSLv3, or TLS 1.0,",
    "notes": "DTLS has versions that match TLS 1.1, 1.2, and (soon) 1.3.  DTLS 1.0 corresponds to TLS 1.1.",
    "submit_date": "2019-11-12",
    "submitter_name": "Martin Thomson",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  }
]
