[
  {
    "errata_id": 967,
    "doc-id": "RFC3973",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "   assert_metric\r\n   my_assert_metric(S,G,I) {\r\n     if (CouldAssert(S,G,I) == TRUE) {\r\n       return spt_assert_metric(S,G,I)\r\n     } else {\r\n       return infinite_assert_metric()\r\n     }\r\n   }",
    "correct_text": "   assert_metric\r\n   my_assert_metric(S,G,I) {\r\n     if (CouldAssert(S,G,I) == TRUE) {\r\n       return spt_assert_metric(S,I)\r\n     } else {\r\n       return infinite_assert_metric()\r\n     }\r\n   }",
    "notes": "In Section 4.6.1, spt_assert_metric(S,I) is defined to have two\r\nparameters, not three.\r\n\r\nfrom pending [error in data transfer corrected 2/15/08.]",
    "submit_date": "2007-05-16",
    "submitter_name": "Mark Doll",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 968,
    "doc-id": "RFC3973",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "   assert_metric\r\n   spt_assert_metric(S,I) {\r\n     return {0,MRIB.pref(S),MRIB.metric(S),my_addr(I)}\r\n   }",
    "correct_text": "   assert_metric\r\n   spt_assert_metric(S,I) {\r\n     return {MRIB.pref(S),MRIB.metric(S),my_addr(I)}\r\n   }",
    "notes": "In Section 4.6.1, assert_metric is defined to be a 3-tuple, not a\r\n4-tuple.",
    "submit_date": "2007-05-16",
    "submitter_name": "Mark Doll",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 969,
    "doc-id": "RFC3973",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.6.1",
    "orig_text": "   assert_metric\r\n   infinite_assert_metric() {\r\n     return {1,infinity,infinity,0}\r\n   }",
    "correct_text": "   assert_metric\r\n   infinite_assert_metric() {\r\n     return {infinity,infinity,0}\r\n   }",
    "notes": "In Section 4.6.1, assert_metric is defined to be a 3-tuple, not a\r\n4-tuple.",
    "submit_date": "2007-05-16",
    "submitter_name": "Mark Doll",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 970,
    "doc-id": "RFC3973",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 99,
    "orig_text": "Remark: In Section 4.7.10 it says, the 4th value is \"The Rendezvous Point Tree\r\nbit. Set to 0 for PIM-DM. Ignored upon receipt.\"",
    "correct_text": "[not submitted]",
    "notes": "from pending\n --VERIFIER NOTES-- \nThis Erratum is complaining that this RFC defines a bit, but then marks it as outside the scope of this document. \r\n\r\nWhile this is bad practice, it does not break any rules and is not grounds for an Erratum. It might be justifiable e use of the bit if anyone is interested.\r\n\r\nFurthermore, the Erratum does not make any specific point or propose and resolution.   ",
    "submit_date": "2007-05-16",
    "submitter_name": "Mark Doll",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3270,
    "doc-id": "RFC3973",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "4.5.1",
    "orig_text": "if StateRefreshCapable(I) == TRUE\r\n         set PT(S,G) to largest active holdtime read from a Prune\r\n         message accepted on I;",
    "correct_text": "if StateRefreshCapable(I) == TRUE\r\n         set PT(S,G,I) to largest active holdtime read from a Prune\r\n         message accepted on I;",
    "notes": "No macro PT(S,G) is defined anywhere in the RFC; the reference appears to be to P(S,G,I).\n --VERIFIER NOTES-- \nRejected as a duplicate of http://www.rfc-editor.org/errata_search.php?eid=3271",
    "submit_date": "2012-06-28",
    "submitter_name": "Joseph Weinstein",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3271,
    "doc-id": "RFC3973",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.5.1",
    "orig_text": "if StateRefreshCapable(I) == TRUE\r\n         set PT(S,G) to largest active holdtime read from a Prune\r\n         message accepted on I;",
    "correct_text": "if StateRefreshCapable(I) == TRUE\r\n         set PT(S,G,I) to the Holdtime from an active Prune received on\r\n         interface I. The Holdtime used SHOULD be the largest active one\r\n         but MAY be the most recently received active Prune Holdtime.",
    "notes": "It is not clear what is meant by the \"largest active holdtime\", and in any event sec. 4.4.2.3 specifies a slightly different rule:\r\n\r\n     Send State Refresh(S,G) out interface I\r\n       The router has refreshed the Prune(S,G) state on interface I.\r\n       The router MUST reset the Prune Timer (PT(S,G,I)) to the Holdtime\r\n       from an active Prune received on interface I.  The Holdtime used\r\n       SHOULD be the largest active one but MAY be the most recently\r\n       received active Prune Holdtime.\r\n\r\nAdditionally...\r\nNo macro PT(S,G) is defined anywhere in the RFC; the reference appears to be to P(S,G,I).\r\n\r\nThe concept of an \"active Prune\" is not defined in this RFC, but simply means those prunes which have not expired.",
    "submit_date": "2012-06-28",
    "submitter_name": "Joseph Weinstein",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3286,
    "doc-id": "RFC3973",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": 4.5,
    "orig_text": "(Additional subection)",
    "correct_text": "4.5.3 Receiving State Refresh Messages\r\n\r\nWhen a State Refresh message is received, it may trigger state \r\ntransitions to the upstream state machine and related actions, \r\nas described in Section 4.4.  It is then forwarded in accordance \r\nwith Section 4.5.1.",
    "notes": "For clarity and completeness, an additional subsection is required to 4.5 describing the actions to be taken when a state refresh message is received. Since these actions have already been specified in Sections 4.4 and 4.5.1, it should be sufficient to simply refer to these sections. Without this additional subsection, an implementer could easily miss an important step in the processing of received state refresh messages.\n --VERIFIER NOTES-- \nThis may be fine and useful, but it does not qualify as Errata because it is\r\nintroducing new text and material.\r\n\r\nIf the WG feels strongly about this, it can be brought forward as a small\r\nInformational I-D or included in an update of this RFC.   ",
    "submit_date": "2012-07-16",
    "submitter_name": "Joseph Weinstein",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4635,
    "doc-id": "RFC3973",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.1.2",
    "orig_text": "Upstream interface-specific:\r\n       Graft/Prune State:\r\n         State: One of {\"NoInfo\" (NI), \"Pruned\" (P), \"Forwarding\" (F),\r\n                        \"AckPending\" (AP) }\r\n",
    "correct_text": "\"NoInfo\" (NI) is not defined as an upstream interface state in 4.4.1.",
    "notes": "Suggest to remove \"NoInfo\" (NI) here.",
    "submit_date": "2016-03-08",
    "submitter_name": "Rui Lin",
    "verifier_id": 148,
    "verifier_name": "Alvaro Retana",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 5894,
    "doc-id": "RFC3973",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4.4.1",
    "orig_text": "Forwarding (F)\r\n       This is the starting state of the Upsteam(S,G) state machine.\r\n       The state machine is in this state if it just started or if\r\n       oiflist(S,G) != NULL.",
    "correct_text": "Forwarding (F)\r\n       This is the starting state of the Upstream(S,G) state machine.\r\n       The state machine is in this state if it just started or if\r\n       oiflist(S,G) != NULL.",
    "notes": "Upsteam(S,G) is a typo and should be corrected as Upstream(S,G)",
    "submit_date": "2019-11-06",
    "submitter_name": "Ehsan Hemmati",
    "verifier_id": 148,
    "verifier_name": "Alvaro Retana",
    "update_date": "2019-11-06 10:13:51"
  }
]
