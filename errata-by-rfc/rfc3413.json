[
  {
    "errata_id": "2459",
    "doc-id": "RFC3413",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.2.1",
    "orig_text": "           OBJECT snmpNotifyType\r\n           SYNTAX INTEGER {\r\n               trap(1)\r\n           }\r\n           MIN-ACCESS    read-only\r\n           DESCRIPTION\r\n               \"Create/delete/modify access is not required.\r\n                Support of the value notify(2) is not required.\"\r\n",
    "correct_text": "           OBJECT snmpNotifyType\r\n           SYNTAX INTEGER {\r\n               trap(1)\r\n           }\r\n           MIN-ACCESS    read-only\r\n           DESCRIPTION\r\n               \"Create/delete/modify access is not required.\r\n                Support of the value inform(2) is not required.\"",
    "notes": "the enumeration value as stated:  notify(2)\r\nthe enumeration value should be:  inform(2)\r\n\r\nThis appears in section 4.2.1, \"Definitions\" for the SNMP-NOTIFICATION-MIB spanning the page break between page 54 and 55 and contained within the snmpNotifyBasicCompliance macro.",
    "submit_date": "2010-08-07",
    "submitter_name": "Mark Ellison",
    "verifier_id": "106",
    "verifier_name": "Dan Romascanu",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "279",
    "doc-id": "RFC3413",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.5.1.1",
    "orig_text": "   (2) If appropriate outgoing management target information cannot be\n       found, the proxy forwarder increments the snmpProxyDrops\n       counter [RFC1907], and then calls the Dispatcher using the\n       returnResponsePdu abstract service interface.",
    "correct_text": "   (2) If appropriate outgoing management target information cannot be\n       found, the proxy forwarder increments the snmpProxyDrops\n       counter [RFC3418], and then calls the Dispatcher using the\n       returnResponsePdu abstract service interface. ",
    "notes": "In Sections 3.2 and 4.1.2: \n    by [RFC1905]\nShould be:\n    by [RFC3416]\n\n",
    "submit_date": "2002-12-27",
    "submitter_name": "Guan Hai Bing",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "280",
    "doc-id": "RFC3413",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "In Section 4.2.1, page 50, in DESCRIPTION clause of snmpNotifyFilterTable: ",
    "orig_text": "       A more complete discussion of notification filtering \n       can be found in section 6. of [SNMP-APPL].\" ",
    "correct_text": "       A more complete discussion of notification filtering \n       can be found in section 6. of RFC3413.\" ",
    "notes": "\nAdditionally, page 52, in DESCRIPTION clause of snmpNotifyFilterType: \n\n        filter.  A more detailed discussion of the use of this \n       object can be found in section 6. of [SNMP-APPL].\" \n\nIt should be: \n\n        filter.  A more detailed discussion of the use of this \n       object can be found in section 6. of RFC3413.\" \n\n\n",
    "submit_date": "2004-02-20",
    "submitter_name": "Eduardo Cardona",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "6531",
    "doc-id": "RFC3413",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "GLOBAL",
    "orig_text": "   4.1.1   Tag Lists .....................,........................   29",
    "correct_text": "   4.1.1   Tag Lists ..............................................   29",
    "notes": "Improper punctuation.",
    "submit_date": "2021-04-13",
    "submitter_name": "Juli Mallett",
    "verifier_id": "166",
    "verifier_name": "Robert Wilton",
    "update_date": "2021-04-13 13:43:29"
  },
  {
    "errata_id": "6532",
    "doc-id": "RFC3413",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "GLOBAL",
    "orig_text": "   4.1.2   Definitions ..................,.........................   30",
    "correct_text": "   4.1.2   Definitions ............................................   30",
    "notes": "Improper punctuation,",
    "submit_date": "2021-04-13",
    "submitter_name": "Juli Mallett",
    "verifier_id": "166",
    "verifier_name": "Robert Wilton",
    "update_date": "2021-04-13 13:44:15"
  },
  {
    "errata_id": "7694",
    "doc-id": "RFC3413",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "3.2",
    "orig_text": "       - If the isAccessAllowed ASI returns a noSuchView, noAccessEntry,\r\n         or noGroupName error, processing of the management operation is\r\n         halted, a PDU value is constructed using the values from the\r\n         originally received PDU, but replacing the error-status with an\r\n         authorizationError code, and error-index value of 0, and\r\n         control is passed to step (6) below.\r\n\r\n       - If the isAccessAllowed ASI returns an otherError, processing of\r\n         the management operation is halted, a different PDU value is\r\n         constructed using the values from the originally received PDU,\r\n         but replacing the error-status with a genError code and the\r\n         error-index with the index of the failed variable binding, and\r\n         control is passed to step (6) below.",
    "correct_text": "       - If the isAccessAllowed ASI returns a notInView error for a\r\n         Write-Class viewType (e.g. for a SetRequest-PDU), processing\r\n         of the management operation is halted, a different PDU value is\r\n         constructed using the values from the originally received PDU,\r\n         but replacing the error-status with a noAccess code and the\r\n         error-index with the index of the failed variable binding, and\r\n         control is passed to step (6) below.\r\n\r\n       - If the isAccessAllowed ASI returns a noSuchView, noAccessEntry,\r\n         or noGroupName error, processing of the management operation is\r\n         halted, a PDU value is constructed using the values from the\r\n         originally received PDU, but replacing the error-status with an\r\n         authorizationError code, and error-index value of 0, and\r\n         control is passed to step (6) below.\r\n\r\n       - If the isAccessAllowed ASI returns an otherError, processing of\r\n         the management operation is halted, a different PDU value is\r\n         constructed using the values from the originally received PDU,\r\n         but replacing the error-status with a genError code and the\r\n         error-index with the index of the failed variable binding, and\r\n         control is passed to step (6) below.",
    "notes": "RFC3415, Section 3, defines 6 distinct errorIndication types for the isAccessAllowed ASI: notInView, noSuchView, noSuchContext, noGroupName, noAccessEntry, and otherError.\r\n\r\nWhereas RFC3413 does not define handling of the notInView error. Whereby one might, presumably mistakenly, assume that notInView should be handled as \"an otherError\". However otherError is a distinct errorIndication for \"undefined error\" (presumably as a catch-all for possible implementation-level errors), whereas notInView is a defined error.\r\n\r\nAdditionally, RFC3416, Section 4.2.5, and only for SetRequest-PDU, clearly defines noAccess error-status as the first-priority validation check for \"not...in the appropriate MIB view\" case:\r\n   (1)   If the variable binding's name specifies an existing or non-\r\n         existent variable to which this request is/would be denied\r\n         access because it is/would not be in the appropriate MIB view,\r\n         then the value of the Response-PDU's error-status field is set\r\n         to \"noAccess\", and the value of its error-index field is set to\r\n         the index of the failed variable binding.",
    "submit_date": "2023-11-02",
    "submitter_name": "Blake Nemura",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
