[
  {
    "errata_id": "1586",
    "doc-id": "RFC5357",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "2, pg.5",
    "orig_text": "<< first bullet >>\r\n\r\n                                                    vv\r\n|  -  The Control-Client initiates a TCP connection on TWAMP's well-\r\n      known port, and the Server (its role now established) responds\r\n      with its Greeting message, indicating the security/integrity\r\n      mode(s) it is willing to support.",
    "correct_text": "                                                    vv\r\n|  -  The Control-Client initiates a TCP connection to TWAMP's well-\r\n      known port, and the Server (its role now established) responds\r\n      with its Greeting message, indicating the security/integrity\r\n      mode(s) it is willing to support.",
    "notes": "The \"on\" is misleading or ambiguous; such verbiage commonly is used\r\nto denote the *source* port used to send a packet, but from the\r\ncontext (and in particular the first paragraph of  Section 3.1)\r\nit seems likely that you mean the *destination* port number here.\r\n\r\nThe corrected text aims to disambiguate/clarify/correct this.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1587",
    "doc-id": "RFC5357",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.5, pg.10",
    "orig_text": "<< last paragraph of 3.5 >>\r\n\r\n   When the requested Receiver Port is not available (e.g., port in\r\n   use), the Server at the Session-Reflector MAY suggest an alternate\r\n   and available port for this session in the Port field.  The Session-\r\n   Sender either accepts the alternate port, or composes a new Session-\r\n|  Request message with suitable parameters.  Otherwise, the Server at\r\n   vvvvvvvvvvvvvvvvvv                                    !!!!!!!!!!^^^\r\n|  the Control-Client uses the Accept field to convey other forms of\r\n|  session rejection or failure and MUST NOT suggest an alternate port;\r\n                               ^\r\n   in this case, the Port field MUST be set to zero.",
    "correct_text": "   When the requested Receiver Port is not available (e.g., port in\r\n   use), the Server at the Session-Reflector MAY suggest an alternate\r\n   and available port for this session in the Port field.  The Session-\r\n   Sender either accepts the alternate port, or composes a new Session-\r\n|  Request message with suitable parameters.  Otherwise, the Server uses\r\n                                                                   ^\r\n|  the Accept field to convey other forms of session rejection or\r\n|  failure to the Control-Client and MUST NOT suggest an alternate port;\r\n          ^^^^^^^^^^^^^^^^^^^^^^^\r\n   in this case, the Port field MUST be set to zero.",
    "notes": "The original description does not match the architectural model depicted\r\nin the figure in Section 1.2 (page 4), where the Server and the\r\nControl-Client are distinct entities, and the TWAMP-Control messages\r\nflow between these parties.\r\n\r\nThe proposed corrected text aims to clarify the roles.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1588",
    "doc-id": "RFC5357",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "4",
    "orig_text": "|                                 [...].  As with OWAMP-test protocol\r\n   [RFC4656], there are three modes: unauthenticated, authenticated, and\r\n   encrypted.",
    "correct_text": "|                                 [...].  As with the OWAMP-test\r\n   protocol [RFC4656], there are three modes: unauthenticated,\r\n   authenticated, and encrypted.",
    "notes": "Missing article.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1589",
    "doc-id": "RFC5357",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.2.1, pg.16",
    "orig_text": "<<  headline for figure on page 16  >>\r\n\r\n|  For authenticated and encrypted modes:",
    "correct_text": "|  Plaintext format for authenticated and encrypted modes:\r\n   ^^^^^^^^^^^^^^^^^^",
    "notes": "The original headline is misleading; it does *not* show the general\r\non-the-wire format, which is partially hidden by encryption.\r\n\r\nThus, the headline should be amended to avoid confusion.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1590",
    "doc-id": "RFC5357",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.2.1, pg.17",
    "orig_text": "<<  second paragraph on page 17  >>\r\n   Sequence Number is the sequence number of the test packet according\r\n|  to its transmit order.  It starts with zero and is incremented by one\r\n|  for each subsequent packet.  The Sequence Number generated by the\r\n   Session-Reflector is independent from the sequence number of the\r\n   arriving packets.",
    "correct_text": "   Sequence Number is the sequence number of the test packet according\r\n|  to its transmit order within the TWAMP test session.  It starts with\r\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n|  zero and is incremented by one for each subsequent packet in the\r\n   vvvvvvv                                                  ^^^^^^^^\r\n|  session.  The Sequence Number generated by the Session-Reflector is\r\n   independent from the sequence number of the arriving packets.",
    "notes": "In the original text, it remains unclear whether this sequence number\r\nis maintained per session, per Session-Sender, or per Session-Reflector.\r\n\r\nAppendix I, in the 3rd text paragraph on page 23, seems to give\r\na hint that the Session-Reflector generated sequence numbers might\r\nhave been intended to be generated independently per *session*.\r\n\r\nSince similar behavior is not present in OWAMP, it ugently needs to\r\nbe specified in RFC 5357 to further interoperable implementations.\r\n\r\nThe corrected text proposed aims at cure this deficiency via a change\r\nwith minimal footprint.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1591",
    "doc-id": "RFC5357",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "6, pg.20",
    "orig_text": "<<  second paragraph of the section  >>\r\n\r\n                                                             [...].  The\r\n   Count field provides an opportunity for a denial-of-service (DOS)\r\n   attack because it is 32 bits long.  If an attacking system set the\r\n|  maximum value in Count (2**32), [...]",
    "correct_text": "                                                             [...].  The\r\n   Count field provides an opportunity for a denial-of-service (DOS)\r\n   attack because it is 32 bits long.  If an attacking system set the\r\n|  maximum value in Count (2**32-1), [...]",
    "notes": "In the second paragraph of Section 6, near the bottom of page 20,\r\nthe maximum value given is too large.  In the OWAMP specification,\r\nI could not find any indication of a bias added to the Count value,\r\nand thus the (hypothetical) range for Count is   0 .. 2**32-1 .\r\n\r\nThus, the RFC text needs to be corrected.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1592",
    "doc-id": "RFC5357",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "8, pg. 21",
    "orig_text": "<<  near the bottom of page 21 >>\r\n\r\n   #               863-872    Unassigned",
    "correct_text": null,
    "notes": "The indicated line should be deleted; it is confusing, as it\r\ncontains information on the state of the IANA registry at the\r\ntime of publication of the RFC, which is totally uncorrelated\r\nto the matter of the RFC.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1593",
    "doc-id": "RFC5357",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "8.1 and 8.2",
    "orig_text": "<<  Section 8.1, on top of page 22 >>\r\n\r\n   IANA has created a TWAMP-Control Command Number registry.  TWAMP-\r\n|  Control commands are specified by the first octet in OWAMP-Control\r\n                                     !!!!!!!!!!!!!!!\r\n   messages as shown in Section 3.5 of [RFC4656], and modified by this\r\n|  document.  Thus, this registry may contain sixteen possible values.\r\n                                              ^^^^^^^",
    "correct_text": "   IANA has created a TWAMP-Control Command Number registry.  TWAMP-\r\n   Control commands are specified by the first octet in OWAMP-Control\r\n   messages as shown in Section 3.5 of [RFC4656], and modified by this\r\n|  document.  Thus, this registry may contain 256 possible values.\r\n                                              ^^^",
    "notes": "Dependent second instance of the issue:\r\n\r\nAccording to the quoted snippet from Section 8.1, Section 8.2 again\r\nuses \"may only contain sixteen values\", which should be corrrected\r\nin the same manner.\r\n\r\n\r\nRationale:\r\n\r\nApparently, \"the first octet\" will allow *256* possible values, not 16.\r\nTherefore, without an explanation of why only 16 values are allowed,\r\nthis restriction does not make sense.\r\n\r\nIn to the lack of an explanation for the restriction, the RFC text\r\nand the IANA registry should be changed, replacing \"sixteen\" by \"256\"\r\nthroughout.\r\n\r\nAlternatively, a clarifying note would have to be supplied, in order\r\nto justify the restriction.\r\n\r\n\r\nHint: Errata Note entered on request of the responsible AD before\r\n      resolution with the authors.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1594",
    "doc-id": "RFC5357",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "3.8,1st para",
    "orig_text": "                                vvvvvvvvvvvvvvvvv\r\n                                                        [...].  The\r\n|  message is terminated with a single block HMAC to complete the Stop-\r\n   Sessions command.  [...]",
    "correct_text": "<<  either:  >>\r\n\r\n                                                        [...].  The\r\n|  message is terminated with a single-block HMAC to complete the Stop-\r\n   Sessions command.  [...]\r\n\r\n<<  or:  >>\r\n\r\n                                       vvvvvvvvvv\r\n                                                        [...].  The\r\n|  message is terminated with a single HMAC block to complete the Stop-\r\n   Sessions command.  [...]",
    "notes": "In any way this is problematic because the term \"block\" has not been\r\nintroduced into the RFC text.  (That's also a problem for 4.2.1!)\r\n\r\nEven in the restricted context of SHA (FIPS PUB 180-2/3) and HMAC\r\n(FIPS PUB 197), the term \"block\" does not uniquely identify a\r\nspecific number of octets.\r\nFor SHA-1, SHA-224, and SHA-256, the block size is 512 bits,\r\nfor SHA-384 and SHA-512 it is 1024 bits.\r\n\r\nBut OWAMP uses a truncated version of HMAC-SHA-1 with a 128-bit MAC,\r\n(officially denoted as HMAC-SHA-1-128), and apparently that is carried\r\nover to TWAMP without mention in the RFCs.\r\n\r\nIt remains unclear from the text what precisely was intended to say.\r\n\r\n\r\nHint: Errata Note entered on request of the responsible AD before\r\n      resolution with the authors.",
    "submit_date": "2008-11-05",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "113",
    "verifier_name": "Lars Eggert",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3511",
    "doc-id": "RFC5357",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "Appendix",
    "orig_text": "              controller                              responder\r\n          +-----------------+                   +-------------------+\r\n          |     Server      |<----------------->|                   |\r\n          | Control-Client  |                   | Session-Reflector |\r\n          | Session-Sender  |<--TWAMP-Test----->|                   |\r\n          +-----------------+                   +-------------------+\r\n\r\n   This example provides a simple architecture for responders where\r\n   their role will be to simply act as light test points in the network.\r\n   The controller establishes the test session with the Server through\r\n   non-standard means.  After the session is established, the controller\r\n   transmits test packets to the responder.  The responder follows the\r\n   Session-Reflector behavior of TWAMP as described in section 4.2 with\r\n   the following exceptions.\r\n\r\n   In the case of TWAMP Light, the Session-Reflector does not\r\n   necessarily have knowledge of the session state.  IF the Session-\r\n   Reflector does not have knowledge of the session state, THEN the\r\n   Session-Reflector MUST copy the Sequence Number of the received\r\n   packet to the Sequence Number field of the reflected packet.  The\r\n   controller receives the reflected test packets and collects two-way\r\n   metrics.  This architecture allows for collection of two-way metrics.",
    "correct_text": "              controller                              responder\r\n          +-----------------+                   +-------------------+\r\n          |     Server      |                   |                   |\r\n          | Control-Client  |                   | Session-Reflector |\r\n          | Session-Sender  |<--TWAMP-Test----->|                   |\r\n          +-----------------+                   +-------------------+\r\n\r\n   This example provides a simple architecture for responders where\r\n   their role will be to simply act as light test points in the network.\r\n   The controller establishes the test session with the Server through\r\n   non-standard means.  After the session is established, the controller\r\n   transmits test packets to the responder. Other examples are also\r\n   possible. For instance, the responder may include a light Server\r\n   responsible to instantiate the test session states based on the\r\n   received test packets. The responder follows the Session-Reflector\r\n   behavior of TWAMP as described in section 4.2 with the following\r\n   exceptions.\r\n\r\n   In the case of TWAMP Light, the Session-Reflector does not\r\n   necessarily have knowledge of the session state.  IF the Session-\r\n   Reflector does not have knowledge of the session state, THEN the\r\n   Session-Reflector MUST copy the Sequence Number of the received\r\n   packet to the Sequence Number field of the reflected packet.  The\r\n   controller receives the reflected test packets and collects two-way\r\n   metrics. This architecture allows for collection of two-way metrics.\r\n   Otherwise IF the Session- Reflector has knowledge of the session\r\n   state (using inspection of the received test packets for instance),\r\n   THEN the Session-Reflector MUST generate it is own sequence number\r\n   for each reflected packet.  The controller receives the reflected\r\n   test packets and collects two-way and one-way metrics.  This\r\n   alternative allows for collection of two-way and one-way metrics with\r\n   TWAMP Light.",
    "notes": "Many readers of the appendix don't understand the meaning of informative and try to interpret the TWAMP light description as a specification. To correct this problem, it is recommended to add a few more lines explaning other TWAMP light architectures are possible. The original text describes a single TWAMP light architecture and this is misleading.\n --VERIFIER NOTES-- \nErratas are not meant to be used to expand existing text beyond textual clarifications. ",
    "submit_date": "2013-03-08",
    "submitter_name": "Steve Baillargeon",
    "verifier_id": "133",
    "verifier_name": "Martin Stiemerling",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4429",
    "doc-id": "RFC5357",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "Appendix 1",
    "orig_text": "Section Appendix says: \r\n              controller                              responder\r\n          +-----------------+                   +-------------------+\r\n          |     Server      |<----------------->|                   |\r\n          | Control-Client  |                   | Session-Reflector |\r\n          | Session-Sender  |<--TWAMP-Test----->|                   |\r\n          +-----------------+                   +-------------------+\r\n",
    "correct_text": "             controller                              responder\r\n          +-----------------+                   +-------------------+\r\n          |     Server      |                   |                   |\r\n          | Control-Client  |                   | Session-Reflector |\r\n          | Session-Sender  |<--TWAMP-Test----->|                   |\r\n          +-----------------+                   +-------------------+\r\n\r\n",
    "notes": "The top arrow is not identified and misleading. It should be removed.\r\n\r\n2015-07-29: RFC Editor changed the Type to Technical.\r\n\r\n2016-07-04 Spencer chatted about this with Al Morton.\r\n\r\nAl said - \r\n\r\n> As I'm likely the last reachable author of TWAMP:\r\n>\r\n> In http://tools.ietf.org/html/rfc5357#section-1.2\r\n> the Logical Model of TWAMP, the communications link\r\n> between the Server and the Session-Reflector is indicated,\r\n> but also undescribed. This communication is necessary for\r\n> controlling state in the Session-Reflector, to start and\r\n> stop sessions (which resets sequence renumbering in the\r\n> Session-Reflector), for example.\r\n>\r\n> Also, section 1.2 says:\r\n>  \"Unlabeled links in the figure are unspecified by\r\n>   this document and may be proprietary protocols.\"\r\n>\r\n> Like the Figure at the bottom of Page 4 in sec 1.2,\r\n> the TWAMP-Light Figure is a re-formulation of the roles\r\n> in the Logical Model, moving the Server alongside the\r\n> Control-Client. The need for Server <-> Session-Reflector\r\n> communications still exists for the case of TWAMP-Light\r\n> operating *with* session state.\r\n\r\nIn previous discussions, Brian Trammell had suggested that unlabeled arrows should be marked  \"protocol unspecified\" or \"see section 1.2\" here to clear up the confusion.\r\n\r\nSpencer will leave this for the working group to consider if the document is updated.",
    "submit_date": "2015-07-27",
    "submitter_name": "Steve Baillargeon",
    "verifier_id": "137",
    "verifier_name": "Spencer Dawkins",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5045",
    "doc-id": "RFC5357",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.2.1",
    "orig_text": "   The minimum data segment length of TWAMP-Test packets in\r\n   unauthenticated mode is 41 octets, and 104 octets in both\r\n   authenticated mode and encrypted modes.",
    "correct_text": "   The minimum data segment length of TWAMP-Test packets in\r\n   unauthenticated mode is 41 octets, and 112 octets in both\r\n   authenticated mode and encrypted modes.",
    "notes": "In authenticated/encrypted mode, the minimum data segment length should be 112 octets, instead of 104 octets.",
    "submit_date": "2017-06-21",
    "submitter_name": "Xiao Min",
    "verifier_id": "153",
    "verifier_name": "Mirja Kühlewind",
    "update_date": "2020-03-04 05:22:41"
  },
  {
    "errata_id": "5046",
    "doc-id": "RFC5357",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.1.2",
    "orig_text": "   each direction of transmission (this is usually desirable).  To\r\n   compensate for the Reflector's larger test packet format, the Sender\r\n   appends at least 27 octets of padding in unauthenticated mode, and at\r\n   least 56 octets in authenticated and encrypted modes.",
    "correct_text": "   each direction of transmission (this is usually desirable).  To\r\n   compensate for the Reflector's larger test packet format, the Sender\r\n   appends at least 27 octets of padding in unauthenticated mode, and at\r\n   least 64 octets in authenticated and encrypted modes.",
    "notes": "In authenticated/encrypted mode, the minimum data segment length of TWAMP-Test and OWAMP-Test packets is 112 octets and 48 octets respectively, so the Sender should append at least 64 octets, instead of 56 octets.",
    "submit_date": "2017-06-21",
    "submitter_name": "Xiao Min",
    "verifier_id": "153",
    "verifier_name": "Mirja Kühlewind",
    "update_date": "2019-09-10 09:09:03"
  }
]
