[
  {
    "errata_id": "7247",
    "doc-id": "RFC0565",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "GLOBAL",
    "orig_text": "Network Working Group                                         R. Housley\r\nRequest for Comments: 5652                                Vigil Security\r\nObsoletes: 3852                                           September 2009\r\nCategory: Standards Track\r\n\r\n\r\n                   Cryptographic Message Syntax (CMS)\r\n\r\nAbstract\r\n\r\n   This document describes the Cryptographic Message Syntax (CMS).  This\r\n   syntax is used to digitally sign, digest, authenticate, or encrypt\r\n   arbitrary message content.\r\n\r\nStatus of This Memo\r\n\r\n   This document specifies an Internet standards track protocol for the\r\n   Internet community, and requests discussion and suggestions for\r\n   improvements.  Please refer to the current edition of the \"Internet\r\n   Official Protocol Standards\" (STD 1) for the standardization state\r\n   and status of this protocol.  Distribution of this memo is unlimited.\r\n\r\nCopyright and License Notice\r\n\r\n   Copyright (c) 2009 IETF Trust and the persons identified as the\r\n   document authors.  All rights reserved.\r\n\r\n   This document is subject to BCP 78 and the IETF Trust's Legal\r\n   Provisions Relating to IETF Documents\r\n   (http://trustee.ietf.org/license-info) in effect on the date of\r\n   publication of this document.  Please review these documents\r\n   carefully, as they describe your rights and restrictions with respect\r\n   to this document.  Code Components extracted from this document must\r\n   include Simplified BSD License text as described in Section 4.e of\r\n   the Trust Legal Provisions and are provided without warranty as\r\n   described in the BSD License.\r\n\r\n   This document may contain material from IETF Documents or IETF\r\n   Contributions published or made publicly available before November\r\n   10, 2008.  The person(s) controlling the copyright in some of this\r\n   material may not have granted the IETF Trust the right to allow\r\n   modifications of such material outside the IETF Standards Process.\r\n   Without obtaining an adequate license from the person(s) controlling\r\n   the copyright in such materials, this document may not be modified\r\n   outside the IETF Standards Process, and derivative works of it may\r\n   not be created outside the IETF Standards Process, except to format\r\n   it for publication as an RFC or to translate it into languages other\r\n   than English.\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 1]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\nTable of Contents\r\n\r\n   1. Introduction ....................................................3\r\n      1.1. Evolution of the CMS .......................................4\r\n           1.1.1. Changes Since PKCS #7 Version 1.5 ...................4\r\n           1.1.2. Changes Since RFC 2630 ..............................4\r\n           1.1.3. Changes Since RFC 3369 ..............................5\r\n           1.1.4. Changes Since RFC 3852 ..............................5\r\n      1.2. Terminology ................................................5\r\n      1.3. Version Numbers ............................................6\r\n   2. General Overview ................................................6\r\n   3. General Syntax ..................................................7\r\n   4. Data Content Type ...............................................7\r\n   5. Signed-data Content Type ........................................8\r\n      5.1. SignedData Type ............................................9\r\n      5.2. EncapsulatedContentInfo Type ..............................11\r\n           5.2.1. Compatibility with PKCS #7 .........................12\r\n      5.3. SignerInfo Type ...........................................13\r\n      5.4. Message Digest Calculation Process ........................16\r\n      5.5. Signature Generation Process ..............................16\r\n      5.6. Signature Verification Process ............................17\r\n   6. Enveloped-Data Content Type ....................................17\r\n      6.1. EnvelopedData Type ........................................18\r\n      6.2. RecipientInfo Type ........................................21\r\n           6.2.1. KeyTransRecipientInfo Type .........................22\r\n           6.2.2. KeyAgreeRecipientInfo Type .........................23\r\n           6.2.3. KEKRecipientInfo Type ..............................25\r\n           6.2.4. PasswordRecipientInfo Type .........................26\r\n           6.2.5. OtherRecipientInfo Type ............................27\r\n      6.3. Content-encryption Process ................................27\r\n      6.4. Key-Encryption Process ....................................28\r\n   7. Digested-Data Content Type .....................................28\r\n   8. Encrypted-Data Content Type ....................................29\r\n   9. Authenticated-Data Content Type ................................30\r\n      9.1. AuthenticatedData Type ....................................31\r\n      9.2. MAC Generation ............................................33\r\n      9.3. MAC Verification ..........................................34\r\n   10. Useful Types ..................................................34\r\n      10.1. Algorithm Identifier Types ...............................35\r\n           10.1.1. DigestAlgorithmIdentifier .........................35\r\n           10.1.2. SignatureAlgorithmIdentifier ......................35\r\n           10.1.3. KeyEncryptionAlgorithmIdentifier ..................35\r\n           10.1.4. ContentEncryptionAlgorithmIdentifier ..............36\r\n           10.1.5. MessageAuthenticationCodeAlgorithm ................36\r\n           10.1.6. KeyDerivationAlgorithmIdentifier ..................36\r\n      10.2. Other Useful Types .......................................36\r\n           10.2.1. RevocationInfoChoices .............................36\r\n           10.2.2. CertificateChoices ................................37\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 2]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n           10.2.3. CertificateSet ....................................38\r\n           10.2.4. IssuerAndSerialNumber .............................38\r\n           10.2.5. CMSVersion ........................................39\r\n           10.2.6. UserKeyingMaterial ................................39\r\n           10.2.7. OtherKeyAttribute .................................39\r\n   11. Useful Attributes .............................................39\r\n      11.1. Content Type .............................................40\r\n      11.2. Message Digest ...........................................40\r\n      11.3. Signing Time .............................................41\r\n      11.4. Countersignature .........................................42\r\n   12. ASN.1 Modules .................................................43\r\n      12.1. CMS ASN.1 Module .........................................44\r\n      12.2. Version 1 Attribute Certificate ASN.1 Module .............51\r\n   13. References ....................................................52\r\n      13.1. Normative References .....................................52\r\n      13.2. Informative References ...................................53\r\n   14. Security Considerations .......................................54\r\n   15. Acknowledgments ...............................................56\r\n\r\n1.  Introduction\r\n\r\n   This document describes the Cryptographic Message Syntax (CMS).  This\r\n   syntax is used to digitally sign, digest, authenticate, or encrypt\r\n   arbitrary message content.\r\n\r\n   The CMS describes an encapsulation syntax for data protection.  It\r\n   supports digital signatures and encryption.  The syntax allows\r\n   multiple encapsulations; one encapsulation envelope can be nested\r\n   inside another.  Likewise, one party can digitally sign some\r\n   previously encapsulated data.  It also allows arbitrary attributes,\r\n   such as signing time, to be signed along with the message content,\r\n   and it provides for other attributes such as countersignatures to be\r\n   associated with a signature.\r\n\r\n   The CMS can support a variety of architectures for certificate-based\r\n   key management, such as the one defined by the PKIX (Public Key\r\n   Infrastructure using X.509) working group [PROFILE].\r\n\r\n   The CMS values are generated using ASN.1 [X.208-88], using BER-\r\n   encoding (Basic Encoding Rules) [X.209-88].  Values are typically\r\n   represented as octet strings.  While many systems are capable of\r\n   transmitting arbitrary octet strings reliably, it is well known that\r\n   many electronic mail systems are not.  This document does not address\r\n   mechanisms for encoding octet strings for reliable transmission in\r\n   such environments.\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 3]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n1.1.  Evolution of the CMS\r\n\r\n   The CMS is derived from PKCS #7 version 1.5, which is documented in\r\n   RFC 2315 [PKCS#7].  PKCS #7 version 1.5 was developed outside of the\r\n   IETF; it was originally published as an RSA Laboratories Technical\r\n   Note in November 1993.  Since that time, the IETF has taken\r\n   responsibility for the development and maintenance of the CMS.\r\n   Today, several important IETF Standards-Track protocols make use of\r\n   the CMS.\r\n\r\n   This section describes that changes that the IETF has made to the CMS\r\n   in each of the published versions.\r\n\r\n1.1.1.  Changes Since PKCS #7 Version 1.5\r\n\r\n   RFC 2630 [CMS1] was the first version of the CMS on the IETF\r\n   Standards Track.  Wherever possible, backward compatibility with PKCS\r\n   #7 version 1.5 is preserved; however, changes were made to\r\n   accommodate version 1 attribute certificate transfer and to support\r\n   algorithm-independent key management.  PKCS #7 version 1.5 included\r\n   support only for key transport.  RFC 2630 adds support for key\r\n   agreement and previously distributed symmetric key-encryption key\r\n   techniques.\r\n\r\n1.1.2.  Changes Since RFC 2630\r\n\r\n   RFC 3369 [CMS2] obsoletes RFC 2630 [CMS1] and RFC 3211 [PWRI].\r\n   Password-based key management is included in the CMS specification,\r\n   and an extension mechanism to support new key management schemes\r\n   without further changes to the CMS is specified.  Backward\r\n   compatibility with RFC 2630 and RFC 3211 is preserved; however,\r\n   version 2 attribute certificate transfer is added, and the use of\r\n   version 1 attribute certificates is deprecated.\r\n\r\n   Secure/Multipurpose Internet Mail Extensions (S/MIME) v2 signatures\r\n   [MSG2], which are based on PKCS #7 version 1.5, are compatible with\r\n   S/MIME v3 signatures [MSG3]and S/MIME v3.1 signatures [MSG3.1].\r\n   However, there are some subtle compatibility issues with signatures\r\n   based on PKCS #7 version 1.5.  These issues are discussed in Section\r\n   5.2.1.  These issues remain with the current version of the CMS.\r\n\r\n   Specific cryptographic algorithms are not discussed in this document,\r\n   but they were discussed in RFC 2630.  The discussion of specific\r\n   cryptographic algorithms has been moved to a separate document\r\n   [CMSALG].  Separation of the protocol and algorithm specifications\r\n   allows the IETF to update each document independently.  This\r\n   specification does not require the implementation of any particular\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 4]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   algorithms.  Rather, protocols that rely on the CMS are expected to\r\n   choose appropriate algorithms for their environment.  The algorithms\r\n   may be selected from [CMSALG] or elsewhere.\r\n\r\n1.1.3.  Changes Since RFC 3369\r\n\r\n   RFC 3852 [CMS3] obsoletes RFC 3369 [CMS2].  As discussed in the\r\n   previous section, RFC 3369 introduced an extension mechanism to\r\n   support new key management schemes without further changes to the\r\n   CMS.  RFC 3852 introduces a similar extension mechanism to support\r\n   additional certificate formats and revocation status information\r\n   formats without further changes to the CMS.  These extensions are\r\n   primarily documented in Sections 10.2.1 and 10.2.2.  Backward\r\n   compatibility with earlier versions of the CMS is preserved.\r\n\r\n   The use of version numbers is described in Section 1.3.\r\n\r\n   Since the publication of RFC 3369, a few errata have been noted.\r\n   These errata are posted on the RFC Editor web site.  These errors\r\n   have been corrected in this document.\r\n\r\n   The text in Section 11.4 that describes the counter signature\r\n   unsigned attribute is clarified.  Hopefully, the revised text is\r\n   clearer about the portion of the SignerInfo signature that is covered\r\n   by a countersignature.\r\n\r\n1.1.4.  Changes Since RFC 3852\r\n\r\n   This document obsoletes RFC 3852 [CMS3].  The primary reason for the\r\n   publication of this document is to advance the CMS along the\r\n   standards maturity ladder.\r\n\r\n   This document includes the clarifications that were originally\r\n   published in RFC 4853 [CMSMSIG] regarding the proper handling of the\r\n   SignedData protected content type when more than one digital\r\n   signature is present.\r\n\r\n   Since the publication of RFC 3852, a few errata have been noted.\r\n   These errata are posted on the RFC Editor web site.  These errors\r\n   have been corrected in this document.\r\n\r\n1.2.  Terminology\r\n\r\n   In this document, the key words MUST, MUST NOT, REQUIRED, SHOULD,\r\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL are to be interpreted as\r\n   described in [STDWORDS].\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 5]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n1.3.  Version Numbers\r\n\r\n   Each of the major data structures includes a version number as the\r\n   first item in the data structure.  The version numbers are intended\r\n   to avoid ASN.1 decode errors.  Some implementations do not check the\r\n   version number prior to attempting a decode, and if a decode error\r\n   occurs, then the version number is checked as part of the error\r\n   handling routine.  This is a reasonable approach; it places error\r\n   processing outside of the fast path.  This approach is also forgiving\r\n   when an incorrect version number is used by the sender.\r\n\r\n   Most of the initial version numbers were assigned in PKCS #7 version\r\n   1.5.  Others were assigned when the structure was initially created.\r\n   Whenever a structure is updated, a higher version number is assigned.\r\n   However, to ensure maximum interoperability, the higher version\r\n   number is only used when the new syntax feature is employed.  That\r\n   is, the lowest version number that supports the generated syntax is\r\n   used.\r\n\r\n2.  General Overview\r\n\r\n   The CMS is general enough to support many different content types.\r\n   This document defines one protection content, ContentInfo.\r\n   ContentInfo encapsulates a single identified content type, and the\r\n   identified type may provide further encapsulation.  This document\r\n   defines six content types: data, signed-data, enveloped-data,\r\n   digested-data, encrypted-data, and authenticated-data.  Additional\r\n   content types can be defined outside this document.\r\n\r\n   An implementation that conforms to this specification MUST implement\r\n   the protection content, ContentInfo, and MUST implement the data,\r\n   signed-data, and enveloped-data content types.  The other content\r\n   types MAY be implemented.\r\n\r\n   As a general design philosophy, each content type permits single pass\r\n   processing using indefinite-length Basic Encoding Rules (BER)\r\n   encoding.  Single-pass operation is especially helpful if content is\r\n   large, stored on tapes, or is \"piped\" from another process.  Single-\r\n   pass operation has one significant drawback: it is difficult to\r\n   perform encode operations using the Distinguished Encoding Rules\r\n   (DER) [X.509-88] encoding in a single pass since the lengths of the\r\n   various components may not be known in advance.  However, signed\r\n   attributes within the signed-data content type and authenticated\r\n   attributes within the authenticated-data content type need to be\r\n   transmitted in DER form to ensure that recipients can verify a\r\n   content that contains one or more unrecognized attributes.  Signed\r\n   attributes and authenticated attributes are the only data types used\r\n   in the CMS that require DER encoding.\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 6]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n3.  General Syntax\r\n\r\n   The following object identifier identifies the content information\r\n   type:\r\n\r\n      id-ct-contentInfo OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n         us(840) rsadsi(113549) pkcs(1) pkcs9(9) smime(16) ct(1) 6 }\r\n\r\n   The CMS associates a content type identifier with a content.  The\r\n   syntax MUST have ASN.1 type ContentInfo:\r\n\r\n      ContentInfo ::= SEQUENCE {\r\n        contentType ContentType,\r\n        content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\r\n      ContentType ::= OBJECT IDENTIFIER\r\n\r\n   The fields of ContentInfo have the following meanings:\r\n\r\n      contentType indicates the type of the associated content.  It is\r\n      an object identifier; it is a unique string of integers assigned\r\n      by an authority that defines the content type.\r\n\r\n      content is the associated content.  The type of content can be\r\n      determined uniquely by contentType.  Content types for data,\r\n      signed-data, enveloped-data, digested-data, encrypted-data, and\r\n      authenticated-data are defined in this document.  If additional\r\n      content types are defined in other documents, the ASN.1 type\r\n      defined SHOULD NOT be a CHOICE type.\r\n\r\n4.  Data Content Type\r\n\r\n   The following object identifier identifies the data content type:\r\n\r\n      id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n         us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }\r\n\r\n   The data content type is intended to refer to arbitrary octet\r\n   strings, such as ASCII text files; the interpretation is left to the\r\n   application.  Such strings need not have any internal structure\r\n   (although they could have their own ASN.1 definition or other\r\n   structure).\r\n\r\n   S/MIME uses id-data to identify MIME-encoded content.  The use of\r\n   this content identifier is specified in RFC 2311 for S/MIME v2\r\n   [MSG2], RFC 2633 for S/MIME v3 [MSG3], and RFC 3851 for S/MIME v3.1\r\n   [MSG3.1].\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 7]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The data content type is generally encapsulated in the signed-data,\r\n   enveloped-data, digested-data, encrypted-data, or authenticated-data\r\n   content type.\r\n\r\n5.  Signed-data Content Type\r\n\r\n   The signed-data content type consists of a content of any type and\r\n   zero or more signature values.  Any number of signers in parallel can\r\n   sign any type of content.\r\n\r\n   The typical application of the signed-data content type represents\r\n   one signer's digital signature on content of the data content type.\r\n   Another typical application disseminates certificates and certificate\r\n   revocation lists (CRLs).\r\n\r\n   The process by which signed-data is constructed involves the\r\n   following steps:\r\n\r\n   1.  For each signer, a message digest, or hash value, is computed on\r\n       the content with a signer-specific message-digest algorithm.  If\r\n       the signer is signing any information other than the content, the\r\n       message digest of the content and the other information are\r\n       digested with the signer's message digest algorithm (see Section\r\n       5.4), and the result becomes the \"message digest.\"\r\n\r\n   2.  For each signer, the message digest is digitally signed using the\r\n       signer's private key.\r\n\r\n   3.  For each signer, the signature value and other signer-specific\r\n       information are collected into a SignerInfo value, as defined in\r\n       Section 5.3.  Certificates and CRLs for each signer, and those\r\n       not corresponding to any signer, are collected in this step.\r\n\r\n   4.  The message digest algorithms for all the signers and the\r\n       SignerInfo values for all the signers are collected together with\r\n       the content into a SignedData value, as defined in Section 5.1.\r\n\r\n   A recipient independently computes the message digest.  This message\r\n   digest and the signer's public key are used to verify the signature\r\n   value.  The signer's public key is referenced in one of two ways.  It\r\n   can be referenced by an issuer distinguished name along with an\r\n   issuer-specific serial number to uniquely identify the certificate\r\n   that contains the public key.  Alternatively, it can be referenced by\r\n   a subject key identifier, which accommodates both certified and\r\n   uncertified public keys.  While not required, the signer's\r\n   certificate can be included in the SignedData certificates field.\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 8]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   When more than one signature is present, the successful validation of\r\n   one signature associated with a given signer is usually treated as a\r\n   successful signature by that signer.  However, there are some\r\n   application environments where other rules are needed.  An\r\n   application that employs a rule other than one valid signature for\r\n   each signer must specify those rules.  Also, where simple matching of\r\n   the signer identifier is not sufficient to determine whether the\r\n   signatures were generated by the same signer, the application\r\n   specification must describe how to determine which signatures were\r\n   generated by the same signer.  Support of different communities of\r\n   recipients is the primary reason that signers choose to include more\r\n   than one signature.  For example, the signed-data content type might\r\n   include signatures generated with the RSA signature algorithm and\r\n   with the Elliptic Curve Digital Signature Algorithm (ECDSA) signature\r\n   algorithm.  This allows recipients to verify the signature associated\r\n   with one algorithm or the other.\r\n\r\n   This section is divided into six parts.  The first part describes the\r\n   top-level type SignedData, the second part describes\r\n   EncapsulatedContentInfo, the third part describes the per-signer\r\n   information type SignerInfo, and the fourth, fifth, and sixth parts\r\n   describe the message digest calculation, signature generation, and\r\n   signature verification processes, respectively.\r\n\r\n5.1.  SignedData Type\r\n\r\n   The following object identifier identifies the signed-data content\r\n   type:\r\n\r\n      id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n         us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\r\n\r\n   The signed-data content type shall have ASN.1 type SignedData:\r\n\r\n      SignedData ::= SEQUENCE {\r\n        version CMSVersion,\r\n        digestAlgorithms DigestAlgorithmIdentifiers,\r\n        encapContentInfo EncapsulatedContentInfo,\r\n        certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n        crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n        signerInfos SignerInfos }\r\n\r\n      DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier\r\n\r\n      SignerInfos ::= SET OF SignerInfo\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                     [Page 9]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The fields of type SignedData have the following meanings:\r\n\r\n      version is the syntax version number.  The appropriate value\r\n      depends on certificates, eContentType, and SignerInfo.  The\r\n      version MUST be assigned as follows:\r\n\r\n         IF ((certificates is present) AND\r\n            (any certificates with a type of other are present)) OR\r\n            ((crls is present) AND\r\n            (any crls with a type of other are present))\r\n         THEN version MUST be 5\r\n         ELSE\r\n            IF (certificates is present) AND\r\n               (any version 2 attribute certificates are present)\r\n            THEN version MUST be 4\r\n            ELSE\r\n               IF ((certificates is present) AND\r\n                  (any version 1 attribute certificates are present)) OR\r\n                  (any SignerInfo structures are version 3) OR\r\n                  (encapContentInfo eContentType is other than id-data)\r\n               THEN version MUST be 3\r\n               ELSE version MUST be 1\r\n\r\n      digestAlgorithms is a collection of message digest algorithm\r\n      identifiers.  There MAY be any number of elements in the\r\n      collection, including zero.  Each element identifies the message\r\n      digest algorithm, along with any associated parameters, used by\r\n      one or more signer.  The collection is intended to list the\r\n      message digest algorithms employed by all of the signers, in any\r\n      order, to facilitate one-pass signature verification.\r\n      Implementations MAY fail to validate signatures that use a digest\r\n      algorithm that is not included in this set.  The message digesting\r\n      process is described in Section 5.4.\r\n\r\n      encapContentInfo is the signed content, consisting of a content\r\n      type identifier and the content itself.  Details of the\r\n      EncapsulatedContentInfo type are discussed in Section 5.2.\r\n\r\n      certificates is a collection of certificates.  It is intended that\r\n      the set of certificates be sufficient to contain certification\r\n      paths from a recognized \"root\" or \"top-level certification\r\n      authority\" to all of the signers in the signerInfos field.  There\r\n      may be more certificates than necessary, and there may be\r\n      certificates sufficient to contain certification paths from two or\r\n      more independent top-level certification authorities.  There may\r\n      also be fewer certificates than necessary, if it is expected that\r\n      recipients have an alternate means of obtaining necessary\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 10]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n      certificates (e.g., from a previous set of certificates).  The\r\n      signer's certificate MAY be included.  The use of version 1\r\n      attribute certificates is strongly discouraged.\r\n\r\n      crls is a collection of revocation status information.  It is\r\n      intended that the collection contain information sufficient to\r\n      determine whether the certificates in the certificates field are\r\n      valid, but such correspondence is not necessary.  Certificate\r\n      revocation lists (CRLs) are the primary source of revocation\r\n      status information.  There MAY be more CRLs than necessary, and\r\n      there MAY also be fewer CRLs than necessary.\r\n\r\n      signerInfos is a collection of per-signer information.  There MAY\r\n      be any number of elements in the collection, including zero.  When\r\n      the collection represents more than one signature, the successful\r\n      validation of one of signature from a given signer ought to be\r\n      treated as a successful signature by that signer.  However, there\r\n      are some application environments where other rules are needed.\r\n      The details of the SignerInfo type are discussed in Section 5.3.\r\n      Since each signer can employ a different digital signature\r\n      technique, and future specifications could update the syntax, all\r\n      implementations MUST gracefully handle unimplemented versions of\r\n      SignerInfo.  Further, since all implementations will not support\r\n      every possible signature algorithm, all implementations MUST\r\n      gracefully handle unimplemented signature algorithms when they are\r\n      encountered.\r\n\r\n5.2.  EncapsulatedContentInfo Type\r\n\r\n   The content is represented in the type EncapsulatedContentInfo:\r\n\r\n      EncapsulatedContentInfo ::= SEQUENCE {\r\n        eContentType ContentType,\r\n        eContent [0] EXPLICIT OCTET STRING OPTIONAL }\r\n\r\n      ContentType ::= OBJECT IDENTIFIER\r\n\r\n   The fields of type EncapsulatedContentInfo have the following\r\n   meanings:\r\n\r\n      eContentType is an object identifier.  The object identifier\r\n      uniquely specifies the content type.\r\n\r\n      eContent is the content itself, carried as an octet string.  The\r\n      eContent need not be DER encoded.\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 11]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The optional omission of the eContent within the\r\n   EncapsulatedContentInfo field makes it possible to construct\r\n   \"external signatures\".  In the case of external signatures, the\r\n   content being signed is absent from the EncapsulatedContentInfo value\r\n   included in the signed-data content type.  If the eContent value\r\n   within EncapsulatedContentInfo is absent, then the signatureValue is\r\n   calculated and the eContentType is assigned as though the eContent\r\n   value was present.\r\n\r\n   In the degenerate case where there are no signers, the\r\n   EncapsulatedContentInfo value being \"signed\" is irrelevant.  In this\r\n   case, the content type within the EncapsulatedContentInfo value being\r\n   \"signed\" MUST be id-data (as defined in Section 4), and the content\r\n   field of the EncapsulatedContentInfo value MUST be omitted.\r\n\r\n5.2.1.  Compatibility with PKCS #7\r\n\r\n   This section contains a word of warning to implementers that wish to\r\n   support both the CMS and PKCS #7 [PKCS#7] SignedData content types.\r\n   Both the CMS and PKCS #7 identify the type of the encapsulated\r\n   content with an object identifier, but the ASN.1 type of the content\r\n   itself is variable in PKCS #7 SignedData content type.\r\n\r\n   PKCS #7 defines content as:\r\n\r\n      content [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL\r\n\r\n   The CMS defines eContent as:\r\n\r\n      eContent [0] EXPLICIT OCTET STRING OPTIONAL\r\n\r\n   The CMS definition is much easier to use in most applications, and it\r\n   is compatible with both S/MIME v2 and S/MIME v3.  S/MIME signed\r\n   messages using the CMS and PKCS #7 are compatible because identical\r\n   signed message formats are specified in RFC 2311 for S/MIME v2\r\n   [MSG2], RFC 2633 for S/MIME v3 [MSG3], and RFC 3851 for S/MIME v3.1\r\n   [MSG3.1].  S/MIME v2 encapsulates the MIME content in a Data type\r\n   (that is, an OCTET STRING) carried in the SignedData contentInfo\r\n   content ANY field, and S/MIME v3 carries the MIME content in the\r\n   SignedData encapContentInfo eContent OCTET STRING.  Therefore, in\r\n   S/MIME v2, S/MIME v3, and S/MIME v3.1, the MIME content is placed in\r\n   an OCTET STRING and the message digest is computed over the identical\r\n   portions of the content.  That is, the message digest is computed\r\n   over the octets comprising the value of the OCTET STRING, neither the\r\n   tag nor length octets are included.\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 12]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   There are incompatibilities between the CMS and PKCS #7 SignedData\r\n   types when the encapsulated content is not formatted using the Data\r\n   type.  For example, when an RFC 2634 signed receipt [ESS] is\r\n   encapsulated in the CMS SignedData type, then the Receipt SEQUENCE is\r\n   encoded in the SignedData encapContentInfo eContent OCTET STRING and\r\n   the message digest is computed using the entire Receipt SEQUENCE\r\n   encoding (including tag, length and value octets).  However, if an\r\n   RFC 2634 signed receipt is encapsulated in the PKCS #7 SignedData\r\n   type, then the Receipt SEQUENCE is DER encoded [X.509-88] in the\r\n   SignedData contentInfo content ANY field (a SEQUENCE, not an OCTET\r\n   STRING).  Therefore, the message digest is computed using only the\r\n   value octets of the Receipt SEQUENCE encoding.\r\n\r\n   The following strategy can be used to achieve backward compatibility\r\n   with PKCS #7 when processing SignedData content types.  If the\r\n   implementation is unable to ASN.1 decode the SignedData type using\r\n   the CMS SignedData encapContentInfo eContent OCTET STRING syntax,\r\n   then the implementation MAY attempt to decode the SignedData type\r\n   using the PKCS #7 SignedData contentInfo content ANY syntax and\r\n   compute the message digest accordingly.\r\n\r\n   The following strategy can be used to achieve backward compatibility\r\n   with PKCS #7 when creating a SignedData content type in which the\r\n   encapsulated content is not formatted using the Data type.\r\n   Implementations MAY examine the value of the eContentType, and then\r\n   adjust the expected DER encoding of eContent based on the object\r\n   identifier value.  For example, to support Microsoft Authenticode\r\n   [MSAC], the following information MAY be included:\r\n\r\n      eContentType Object Identifier is set to { 1 3 6 1 4 1 311 2 1 4 }\r\n\r\n      eContent contains DER-encoded Authenticode signing information\r\n\r\n5.3.  SignerInfo Type\r\n\r\n   Per-signer information is represented in the type SignerInfo:\r\n\r\n      SignerInfo ::= SEQUENCE {\r\n        version CMSVersion,\r\n        sid SignerIdentifier,\r\n        digestAlgorithm DigestAlgorithmIdentifier,\r\n        signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n        signatureAlgorithm SignatureAlgorithmIdentifier,\r\n        signature SignatureValue,\r\n        unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 13]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n      SignerIdentifier ::= CHOICE {\r\n        issuerAndSerialNumber IssuerAndSerialNumber,\r\n        subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\r\n      SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n      UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n      Attribute ::= SEQUENCE {\r\n        attrType OBJECT IDENTIFIER,\r\n        attrValues SET OF AttributeValue }\r\n\r\n      AttributeValue ::= ANY\r\n\r\n      SignatureValue ::= OCTET STRING\r\n\r\n   The fields of type SignerInfo have the following meanings:\r\n\r\n      version is the syntax version number.  If the SignerIdentifier is\r\n      the CHOICE issuerAndSerialNumber, then the version MUST be 1.  If\r\n      the SignerIdentifier is subjectKeyIdentifier, then the version\r\n      MUST be 3.\r\n\r\n      sid specifies the signer's certificate (and thereby the signer's\r\n      public key).  The signer's public key is needed by the recipient\r\n      to verify the signature.  SignerIdentifier provides two\r\n      alternatives for specifying the signer's public key.  The\r\n      issuerAndSerialNumber alternative identifies the signer's\r\n      certificate by the issuer's distinguished name and the certificate\r\n      serial number; the subjectKeyIdentifier identifies the signer's\r\n      certificate by a key identifier.  When an X.509 certificate is\r\n      referenced, the key identifier matches the X.509\r\n      subjectKeyIdentifier extension value.  When other certificate\r\n      formats are referenced, the documents that specify the certificate\r\n      format and their use with the CMS must include details on matching\r\n      the key identifier to the appropriate certificate field.\r\n      Implementations MUST support the reception of the\r\n      issuerAndSerialNumber and subjectKeyIdentifier forms of\r\n      SignerIdentifier.  When generating a SignerIdentifier,\r\n      implementations MAY support one of the forms (either\r\n      issuerAndSerialNumber or subjectKeyIdentifier) and always use it,\r\n      or implementations MAY arbitrarily mix the two forms.  However,\r\n      subjectKeyIdentifier MUST be used to refer to a public key\r\n      contained in a non-X.509 certificate.\r\n\r\n      digestAlgorithm identifies the message digest algorithm, and any\r\n      associated parameters, used by the signer.  The message digest is\r\n      computed on either the content being signed or the content\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 14]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n      together with the signed attributes using the process described in\r\n      Section 5.4.  The message digest algorithm SHOULD be among those\r\n      listed in the digestAlgorithms field of the associated SignerData.\r\n      Implementations MAY fail to validate signatures that use a digest\r\n      algorithm that is not included in the SignedData digestAlgorithms\r\n      set.\r\n\r\n      signedAttrs is a collection of attributes that are signed.  The\r\n      field is optional, but it MUST be present if the content type of\r\n      the EncapsulatedContentInfo value being signed is not id-data.\r\n      SignedAttributes MUST be DER encoded, even if the rest of the\r\n      structure is BER encoded.  Useful attribute types, such as signing\r\n      time, are defined in Section 11.  If the field is present, it MUST\r\n      contain, at a minimum, the following two attributes:\r\n\r\n         A content-type attribute having as its value the content type\r\n         of the EncapsulatedContentInfo value being signed.  Section\r\n         11.1 defines the content-type attribute.  However, the\r\n         content-type attribute MUST NOT be used as part of a\r\n         countersignature unsigned attribute as defined in Section 11.4.\r\n\r\n         A message-digest attribute, having as its value the message\r\n         digest of the content.  Section 11.2 defines the message-digest\r\n         attribute.\r\n\r\n      signatureAlgorithm identifies the signature algorithm, and any\r\n      associated parameters, used by the signer to generate the digital\r\n      signature.\r\n\r\n      signature is the result of digital signature generation, using the\r\n      message digest and the signer's private key.  The details of the\r\n      signature depend on the signature algorithm employed.\r\n\r\n      unsignedAttrs is a collection of attributes that are not signed.\r\n      The field is optional.  Useful attribute types, such as\r\n      countersignatures, are defined in Section 11.\r\n\r\n   The fields of type SignedAttribute and UnsignedAttribute have the\r\n   following meanings:\r\n\r\n      attrType indicates the type of attribute.  It is an object\r\n      identifier.\r\n\r\n      attrValues is a set of values that comprise the attribute.  The\r\n      type of each value in the set can be determined uniquely by\r\n      attrType.  The attrType can impose restrictions on the number of\r\n      items in the set.\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 15]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n5.4.  Message Digest Calculation Process\r\n\r\n   The message digest calculation process computes a message digest on\r\n   either the content being signed or the content together with the\r\n   signed attributes.  In either case, the initial input to the message\r\n   digest calculation process is the \"value\" of the encapsulated content\r\n   being signed.  Specifically, the initial input is the\r\n   encapContentInfo eContent OCTET STRING to which the signing process\r\n   is applied.  Only the octets comprising the value of the eContent\r\n   OCTET STRING are input to the message digest algorithm, not the tag\r\n   or the length octets.\r\n\r\n   The result of the message digest calculation process depends on\r\n   whether the signedAttrs field is present.  When the field is absent,\r\n   the result is just the message digest of the content as described\r\n   above.  When the field is present, however, the result is the message\r\n   digest of the complete DER encoding of the SignedAttrs value\r\n   contained in the signedAttrs field.  Since the SignedAttrs value,\r\n   when present, must contain the content-type and the message-digest\r\n   attributes, those values are indirectly included in the result.  The\r\n   content-type attribute MUST NOT be included in a countersignature\r\n   unsigned attribute as defined in Section 11.4.  A separate encoding\r\n   of the signedAttrs field is performed for message digest calculation.\r\n   The IMPLICIT [0] tag in the signedAttrs is not used for the DER\r\n   encoding, rather an EXPLICIT SET OF tag is used.  That is, the DER\r\n   encoding of the EXPLICIT SET OF tag, rather than of the IMPLICIT [0]\r\n   tag, MUST be included in the message digest calculation along with\r\n   the length and content octets of the SignedAttributes value.\r\n\r\n   When the signedAttrs field is absent, only the octets comprising the\r\n   value of the SignedData encapContentInfo eContent OCTET STRING (e.g.,\r\n   the contents of a file) are input to the message digest calculation.\r\n   This has the advantage that the length of the content being signed\r\n   need not be known in advance of the signature generation process.\r\n\r\n   Although the encapContentInfo eContent OCTET STRING tag and length\r\n   octets are not included in the message digest calculation, they are\r\n   protected by other means.  The length octets are protected by the\r\n   nature of the message digest algorithm since it is computationally\r\n   infeasible to find any two distinct message contents of any length\r\n   that have the same message digest.\r\n\r\n5.5.  Signature Generation Process\r\n\r\n   The input to the signature generation process includes the result of\r\n   the message digest calculation process and the signer's private key.\r\n   The details of the signature generation depend on the signature\r\n   algorithm employed.  The object identifier, along with any\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 16]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   parameters, that specifies the signature algorithm employed by the\r\n   signer is carried in the signatureAlgorithm field.  The signature\r\n   value generated by the signer MUST be encoded as an OCTET STRING and\r\n   carried in the signature field.\r\n\r\n5.6.  Signature Verification Process\r\n\r\n   The input to the signature verification process includes the result\r\n   of the message digest calculation process and the signer's public\r\n   key.  The recipient MAY obtain the correct public key for the signer\r\n   by any means, but the preferred method is from a certificate obtained\r\n   from the SignedData certificates field.  The selection and validation\r\n   of the signer's public key MAY be based on certification path\r\n   validation (see [PROFILE]) as well as other external context, but is\r\n   beyond the scope of this document.  The details of the signature\r\n   verification depend on the signature algorithm employed.\r\n\r\n   The recipient MUST NOT rely on any message digest values computed by\r\n   the originator.  If the SignedData signerInfo includes\r\n   signedAttributes, then the content message digest MUST be calculated\r\n   as described in Section 5.4.  For the signature to be valid, the\r\n   message digest value calculated by the recipient MUST be the same as\r\n   the value of the messageDigest attribute included in the\r\n   signedAttributes of the SignedData signerInfo.\r\n\r\n   If the SignedData signerInfo includes signedAttributes, then the\r\n   content-type attribute value MUST match the SignedData\r\n   encapContentInfo eContentType value.\r\n\r\n6.  Enveloped-data Content Type\r\n\r\n   The enveloped-data content type consists of an encrypted content of\r\n   any type and encrypted content-encryption keys for one or more\r\n   recipients.  The combination of the encrypted content and one\r\n   encrypted content-encryption key for a recipient is a \"digital\r\n   envelope\" for that recipient.  Any type of content can be enveloped\r\n   for an arbitrary number of recipients using any of the supported key\r\n   management techniques for each recipient.\r\n\r\n   The typical application of the enveloped-data content type will\r\n   represent one or more recipients' digital envelopes on content of the\r\n   data or signed-data content types.\r\n\r\n   Enveloped-data is constructed by the following steps:\r\n\r\n   1.  A content-encryption key for a particular content-encryption\r\n       algorithm is generated at random.\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 17]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   2.  The content-encryption key is encrypted for each recipient.  The\r\n       details of this encryption depend on the key management algorithm\r\n       used, but four general techniques are supported:\r\n\r\n         key transport:  the content-encryption key is encrypted in the\r\n         recipient's public key;\r\n\r\n         key agreement:  the recipient's public key and the sender's\r\n         private key are used to generate a pairwise symmetric key, then\r\n         the content-encryption key is encrypted in the pairwise\r\n         symmetric key;\r\n\r\n         symmetric key-encryption keys:  the content-encryption key is\r\n         encrypted in a previously distributed symmetric key-encryption\r\n         key; and\r\n\r\n         passwords: the content-encryption key is encrypted in a key-\r\n         encryption key that is derived from a password or other shared\r\n         secret value.\r\n\r\n   3.  For each recipient, the encrypted content-encryption key and\r\n       other recipient-specific information are collected into a\r\n       RecipientInfo value, defined in Section 6.2.\r\n\r\n   4.  The content is encrypted with the content-encryption key.\r\n       Content encryption may require that the content be padded to a\r\n       multiple of some block size; see Section 6.3.\r\n\r\n   5.  The RecipientInfo values for all the recipients are collected\r\n       together with the encrypted content to form an EnvelopedData\r\n       value as defined in Section 6.1.\r\n\r\n   A recipient opens the digital envelope by decrypting one of the\r\n   encrypted content-encryption keys and then decrypting the encrypted\r\n   content with the recovered content-encryption key.\r\n\r\n   This section is divided into four parts.  The first part describes\r\n   the top-level type EnvelopedData, the second part describes the per-\r\n   recipient information type RecipientInfo, and the third and fourth\r\n   parts describe the content-encryption and key-encryption processes.\r\n\r\n6.1.  EnvelopedData Type\r\n\r\n   The following object identifier identifies the enveloped-data content\r\n   type:\r\n\r\n      id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 18]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The enveloped-data content type shall have ASN.1 type EnvelopedData:\r\n\r\n      EnvelopedData ::= SEQUENCE {\r\n        version CMSVersion,\r\n        originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n        recipientInfos RecipientInfos,\r\n        encryptedContentInfo EncryptedContentInfo,\r\n        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\r\n      OriginatorInfo ::= SEQUENCE {\r\n        certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n        crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n\r\n      RecipientInfos ::= SET SIZE (1..MAX) OF RecipientInfo\r\n\r\n      EncryptedContentInfo ::= SEQUENCE {\r\n        contentType ContentType,\r\n        contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n        encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\r\n      EncryptedContent ::= OCTET STRING\r\n\r\n      UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n   The fields of type EnvelopedData have the following meanings:\r\n\r\n      version is the syntax version number.  The appropriate value\r\n      depends on originatorInfo, RecipientInfo, and unprotectedAttrs.\r\n      The version MUST be assigned as follows:\r\n\r\n         IF (originatorInfo is present) AND\r\n            ((any certificates with a type of other are present) OR\r\n            (any crls with a type of other are present))\r\n         THEN version is 4\r\n         ELSE\r\n            IF ((originatorInfo is present) AND\r\n               (any version 2 attribute certificates are present)) OR\r\n               (any RecipientInfo structures include pwri) OR\r\n               (any RecipientInfo structures include ori)\r\n            THEN version is 3\r\n            ELSE\r\n               IF (originatorInfo is absent) AND\r\n                  (unprotectedAttrs is absent) AND\r\n                  (all RecipientInfo structures are version 0)\r\n               THEN version is 0\r\n               ELSE version is 2\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 19]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n      originatorInfo optionally provides information about the\r\n      originator.  It is present only if required by the key management\r\n      algorithm.  It may contain certificates and CRLs:\r\n\r\n         certs is a collection of certificates.  certs may contain\r\n         originator certificates associated with several different key\r\n         management algorithms.  certs may also contain attribute\r\n         certificates associated with the originator.  The certificates\r\n         contained in certs are intended to be sufficient for all\r\n         recipients to build certification paths from a recognized\r\n         \"root\" or \"top-level certification authority\".  However, certs\r\n         may contain more certificates than necessary, and there may be\r\n         certificates sufficient to make certification paths from two or\r\n         more independent top-level certification authorities.\r\n         Alternatively, certs may contain fewer certificates than\r\n         necessary, if it is expected that recipients have an alternate\r\n         means of obtaining necessary certificates (e.g., from a\r\n         previous set of certificates).\r\n\r\n         crls is a collection of CRLs.  It is intended that the set\r\n         contain information sufficient to determine whether or not the\r\n         certificates in the certs field are valid, but such\r\n         correspondence is not necessary.  There MAY be more CRLs than\r\n         necessary, and there MAY also be fewer CRLs than necessary.\r\n\r\n      recipientInfos is a collection of per-recipient information.\r\n      There MUST be at least one element in the collection.\r\n\r\n      encryptedContentInfo is the encrypted content information.\r\n\r\n      unprotectedAttrs is a collection of attributes that are not\r\n      encrypted.  The field is optional.  Useful attribute types are\r\n      defined in Section 11.\r\n\r\n   The fields of type EncryptedContentInfo have the following meanings:\r\n\r\n      contentType indicates the type of content.\r\n\r\n      contentEncryptionAlgorithm identifies the content-encryption\r\n      algorithm, and any associated parameters, used to encrypt the\r\n      content.  The content-encryption process is described in Section\r\n      6.3.  The same content-encryption algorithm and content-encryption\r\n      key are used for all recipients.\r\n\r\n      encryptedContent is the result of encrypting the content.  The\r\n      field is optional, and if the field is not present, its intended\r\n      value must be supplied by other means.\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 20]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The recipientInfos field comes before the encryptedContentInfo field\r\n   so that an EnvelopedData value may be processed in a single pass.\r\n\r\n6.2.  RecipientInfo Type\r\n\r\n   Per-recipient information is represented in the type RecipientInfo.\r\n   RecipientInfo has a different format for each of the supported key\r\n   management techniques.  Any of the key management techniques can be\r\n   used for each recipient of the same encrypted content.  In all cases,\r\n   the encrypted content-encryption key is transferred to one or more\r\n   recipients.\r\n\r\n   Since all implementations will not support every possible key\r\n   management algorithm, all implementations MUST gracefully handle\r\n   unimplemented algorithms when they are encountered.  For example, if\r\n   a recipient receives a content-encryption key encrypted in their RSA\r\n   public key using RSA-OAEP (Optimal Asymmetric Encryption Padding) and\r\n   the implementation only supports RSA PKCS #1 v1.5, then a graceful\r\n   failure must be implemented.\r\n\r\n   Implementations MUST support key transport, key agreement, and\r\n   previously distributed symmetric key-encryption keys, as represented\r\n   by ktri, kari, and kekri, respectively.  Implementations MAY support\r\n   the password-based key management as represented by pwri.\r\n   Implementations MAY support any other key management technique as\r\n   represented by ori.  Since each recipient can employ a different key\r\n   management technique and future specifications could define\r\n   additional key management techniques, all implementations MUST\r\n   gracefully handle unimplemented alternatives within the RecipientInfo\r\n   CHOICE, all implementations MUST gracefully handle unimplemented\r\n   versions of otherwise supported alternatives within the RecipientInfo\r\n   CHOICE, and all implementations MUST gracefully handle unimplemented\r\n   or unknown ori alternatives.\r\n\r\n      RecipientInfo ::= CHOICE {\r\n        ktri KeyTransRecipientInfo,\r\n        kari [1] KeyAgreeRecipientInfo,\r\n        kekri [2] KEKRecipientInfo,\r\n        pwri [3] PasswordRecipientinfo,\r\n        ori [4] OtherRecipientInfo }\r\n\r\n      EncryptedKey ::= OCTET STRING\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 21]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n6.2.1.  KeyTransRecipientInfo Type\r\n\r\n   Per-recipient information using key transport is represented in the\r\n   type KeyTransRecipientInfo.  Each instance of KeyTransRecipientInfo\r\n   transfers the content-encryption key to one recipient.\r\n\r\n      KeyTransRecipientInfo ::= SEQUENCE {\r\n        version CMSVersion,  -- always set to 0 or 2\r\n        rid RecipientIdentifier,\r\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n        encryptedKey EncryptedKey }\r\n\r\n      RecipientIdentifier ::= CHOICE {\r\n        issuerAndSerialNumber IssuerAndSerialNumber,\r\n        subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\r\n   The fields of type KeyTransRecipientInfo have the following meanings:\r\n\r\n      version is the syntax version number.  If the RecipientIdentifier\r\n      is the CHOICE issuerAndSerialNumber, then the version MUST be 0.\r\n      If the RecipientIdentifier is subjectKeyIdentifier, then the\r\n      version MUST be 2.\r\n\r\n      rid specifies the recipient's certificate or key that was used by\r\n      the sender to protect the content-encryption key.  The content-\r\n      encryption key is encrypted with the recipient's public key.  The\r\n      RecipientIdentifier provides two alternatives for specifying the\r\n      recipient's certificate, and thereby the recipient's public key.\r\n      The recipient's certificate must contain a key transport public\r\n      key.  Therefore, a recipient X.509 version 3 certificate that\r\n      contains a key usage extension MUST assert the keyEncipherment\r\n      bit.  The issuerAndSerialNumber alternative identifies the\r\n      recipient's certificate by the issuer's distinguished name and the\r\n      certificate serial number; the subjectKeyIdentifier identifies the\r\n      recipient's certificate by a key identifier.  When an X.509\r\n      certificate is referenced, the key identifier matches the X.509\r\n      subjectKeyIdentifier extension value.  When other certificate\r\n      formats are referenced, the documents that specify the certificate\r\n      format and their use with the CMS must include details on matching\r\n      the key identifier to the appropriate certificate field.  For\r\n      recipient processing, implementations MUST support both of these\r\n      alternatives for specifying the recipient's certificate.  For\r\n      sender processing, implementations MUST support at least one of\r\n      these alternatives.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 22]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n      keyEncryptionAlgorithm identifies the key-encryption algorithm,\r\n      and any associated parameters, used to encrypt the content-\r\n      encryption key for the recipient.  The key-encryption process is\r\n      described in Section 6.4.\r\n\r\n      encryptedKey is the result of encrypting the content-encryption\r\n      key for the recipient.\r\n\r\n6.2.2.  KeyAgreeRecipientInfo Type\r\n\r\n   Recipient information using key agreement is represented in the type\r\n   KeyAgreeRecipientInfo.  Each instance of KeyAgreeRecipientInfo will\r\n   transfer the content-encryption key to one or more recipients that\r\n   use the same key agreement algorithm and domain parameters for that\r\n   algorithm.\r\n\r\n      KeyAgreeRecipientInfo ::= SEQUENCE {\r\n        version CMSVersion,  -- always set to 3\r\n        originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n        ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n        recipientEncryptedKeys RecipientEncryptedKeys }\r\n\r\n      OriginatorIdentifierOrKey ::= CHOICE {\r\n        issuerAndSerialNumber IssuerAndSerialNumber,\r\n        subjectKeyIdentifier [0] SubjectKeyIdentifier,\r\n        originatorKey [1] OriginatorPublicKey }\r\n\r\n      OriginatorPublicKey ::= SEQUENCE {\r\n        algorithm AlgorithmIdentifier,\r\n        publicKey BIT STRING }\r\n\r\n      RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey\r\n\r\n      RecipientEncryptedKey ::= SEQUENCE {\r\n        rid KeyAgreeRecipientIdentifier,\r\n        encryptedKey EncryptedKey }\r\n\r\n      KeyAgreeRecipientIdentifier ::= CHOICE {\r\n        issuerAndSerialNumber IssuerAndSerialNumber,\r\n        rKeyId [0] IMPLICIT RecipientKeyIdentifier }\r\n\r\n      RecipientKeyIdentifier ::= SEQUENCE {\r\n        subjectKeyIdentifier SubjectKeyIdentifier,\r\n        date GeneralizedTime OPTIONAL,\r\n        other OtherKeyAttribute OPTIONAL }\r\n\r\n      SubjectKeyIdentifier ::= OCTET STRING\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 23]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The fields of type KeyAgreeRecipientInfo have the following meanings:\r\n\r\n      version is the syntax version number.  It MUST always be 3.\r\n\r\n      originator is a CHOICE with three alternatives specifying the\r\n      sender's key agreement public key.  The sender uses the\r\n      corresponding private key and the recipient's public key to\r\n      generate a pairwise key.  The content-encryption key is encrypted\r\n      in the pairwise key.  The issuerAndSerialNumber alternative\r\n      identifies the sender's certificate, and thereby the sender's\r\n      public key, by the issuer's distinguished name and the certificate\r\n      serial number.  The subjectKeyIdentifier alternative identifies\r\n      the sender's certificate, and thereby the sender's public key, by\r\n      a key identifier.  When an X.509 certificate is referenced, the\r\n      key identifier matches the X.509 subjectKeyIdentifier extension\r\n      value.  When other certificate formats are referenced, the\r\n      documents that specify the certificate format and their use with\r\n      the CMS must include details on matching the key identifier to the\r\n      appropriate certificate field.  The originatorKey alternative\r\n      includes the algorithm identifier and sender's key agreement\r\n      public key.  This alternative permits originator anonymity since\r\n      the public key is not certified.  Implementations MUST support all\r\n      three alternatives for specifying the sender's public key.\r\n\r\n      ukm is optional.  With some key agreement algorithms, the sender\r\n      provides a User Keying Material (UKM) to ensure that a different\r\n      key is generated each time the same two parties generate a\r\n      pairwise key.  Implementations MUST accept a KeyAgreeRecipientInfo\r\n      SEQUENCE that includes a ukm field.  Implementations that do not\r\n      support key agreement algorithms that make use of UKMs MUST\r\n      gracefully handle the presence of UKMs.\r\n\r\n      keyEncryptionAlgorithm identifies the key-encryption algorithm,\r\n      and any associated parameters, used to encrypt the content-\r\n      encryption key with the key-encryption key.  The key-encryption\r\n      process is described in Section 6.4.\r\n\r\n      recipientEncryptedKeys includes a recipient identifier and\r\n      encrypted key for one or more recipients.  The\r\n      KeyAgreeRecipientIdentifier is a CHOICE with two alternatives\r\n      specifying the recipient's certificate, and thereby the\r\n      recipient's public key, that was used by the sender to generate a\r\n      pairwise key-encryption key.  The recipient's certificate must\r\n      contain a key agreement public key.  Therefore, a recipient X.509\r\n      version 3 certificate that contains a key usage extension MUST\r\n      assert the keyAgreement bit.  The content-encryption key is\r\n      encrypted in the pairwise key-encryption key.  The\r\n      issuerAndSerialNumber alternative identifies the recipient's\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 24]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n      certificate by the issuer's distinguished name and the certificate\r\n      serial number; the RecipientKeyIdentifier is described below.  The\r\n      encryptedKey is the result of encrypting the content-encryption\r\n      key in the pairwise key-encryption key generated using the key\r\n      agreement algorithm.  Implementations MUST support both\r\n      alternatives for specifying the recipient's certificate.\r\n\r\n   The fields of type RecipientKeyIdentifier have the following\r\n   meanings:\r\n\r\n      subjectKeyIdentifier identifies the recipient's certificate by a\r\n      key identifier.  When an X.509 certificate is referenced, the key\r\n      identifier matches the X.509 subjectKeyIdentifier extension value.\r\n      When other certificate formats are referenced, the documents that\r\n      specify the certificate format and their use with the CMS must\r\n      include details on matching the key identifier to the appropriate\r\n      certificate field.\r\n\r\n      date is optional.  When present, the date specifies which of the\r\n      recipient's previously distributed UKMs was used by the sender.\r\n\r\n      other is optional.  When present, this field contains additional\r\n      information used by the recipient to locate the public keying\r\n      material used by the sender.\r\n\r\n6.2.3.  KEKRecipientInfo Type\r\n\r\n   Recipient information using previously distributed symmetric keys is\r\n   represented in the type KEKRecipientInfo.  Each instance of\r\n   KEKRecipientInfo will transfer the content-encryption key to one or\r\n   more recipients who have the previously distributed key-encryption\r\n   key.\r\n\r\n      KEKRecipientInfo ::= SEQUENCE {\r\n        version CMSVersion,  -- always set to 4\r\n        kekid KEKIdentifier,\r\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n        encryptedKey EncryptedKey }\r\n\r\n      KEKIdentifier ::= SEQUENCE {\r\n        keyIdentifier OCTET STRING,\r\n        date GeneralizedTime OPTIONAL,\r\n        other OtherKeyAttribute OPTIONAL }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHousley                     Standards Track                    [Page 25]\r\n\f\r\nRFC 5652              Cryptographic Message Syntax        September 2009\r\n\r\n\r\n   The fields of type KEKRecipientInfo have the following meanings:\r\n\r\n      version is the syntax version number.  It MUST always be 4.\r\n\r\n      kekid specifies a symmetric key-encryption key that was previously\r\n      distributed to the sender and one or more recipients.\r\n\r\n      keyEncryptionAlgorithm identifies the key-encryption algorithm,\r\n      and any associated parameters, used to encrypt the content-\r\n      encryption key with the key-encryption key.  The key-encryption\r\n      process is described in Section 6.4.\r\n\r\n      encryptedKey is the result of encrypting the content-encryption\r\n      key in the key-encryption key.\r\n\r\n   The fields of type KEKIdentifier have the following meanings:\r\n\r\n      keyIdentifier identifies the key-encryption key that was\r\n      previously distributed to the sender and one or more recipients.\r\n\r\n      date is optional.  When present, the date specifies a single key-\r\n      encryption key from a set that was previously distributed.\r\n\r\n      other is optional.  When present, this field contains additional\r\n      information used by the recipient to determine the key-encryption\r\n      key used by the sender.\r\n\r\n6.2.4.  PasswordRecipientInfo Type\r\n\r\n   Recipient information using a password or shared secret value is\r\n   represented in the type PasswordRecipientInfo.  Each instance of\r\n   PasswordRecipientInfo will transfer the content-encryption key to one\r\n   or more recipients who possess the password or shared secret value.\r\n\r\n   The PasswordRecipientInfo Type is specified in RFC 3211 [PWRI].  The\r\n   PasswordRecipientInfo structure is repeated here for completeness.\r\n\r\n      PasswordRecipientInfo ::= SEQUENCE {\r\n        version CMSVersion,   -- Always set to 0\r\n        keyD",
    "correct_text": "Network Working Group                                         S. Bradner\r\nRequest for Comments: 2026                            Harvard University\r\nBCP: 9                                                      October 1996\r\nObsoletes: 1602\r\nCategory: Best Current Practice\r\n\r\n\r\n              The Internet Standards Process -- Revision 3\r\n\r\n\r\nStatus of this Memo\r\n\r\n   This document specifies an Internet Best Current Practices for the\r\n   Internet Community, and requests discussion and suggestions for\r\n   improvements.  Distribution of this memo is unlimited.\r\n\r\nAbstract\r\n\r\n   This memo documents the process used by the Internet community for\r\n   the standardization of protocols and procedures.  It defines the\r\n   stages in the standardization process, the requirements for moving a\r\n   document between stages and the types of documents used during this\r\n   process.  It also addresses the intellectual property rights and\r\n   copyright issues associated with the standards process.\r\n\r\nTable of Contents\r\n\r\n   1.  INTRODUCTION....................................................2\r\n     1.1  Internet Standards...........................................3\r\n     1.2  The Internet Standards Process...............................3\r\n     1.3  Organization of This Document................................5\r\n   2.  INTERNET STANDARDS-RELATED PUBLICATIONS.........................5\r\n     2.1  Requests for Comments (RFCs).................................5\r\n     2.2  Internet-Drafts..............................................7\r\n   3.  INTERNET STANDARD SPECIFICATIONS................................8\r\n     3.1  Technical Specification (TS).................................8\r\n     3.2  Applicability Statement (AS).................................8\r\n     3.3  Requirement Levels...........................................9\r\n   4.  THE INTERNET STANDARDS TRACK...................................10\r\n     4.1  Standards Track Maturity Levels.............................11\r\n       4.1.1  Proposed Standard.......................................11\r\n       4.1.2  Draft Standard..........................................12\r\n       4.1.3  Internet Standard.......................................13\r\n     4.2  Non-Standards Track Maturity Levels.........................13\r\n       4.2.1  Experimental............................................13\r\n       4.2.2  Informational...........................................14\r\n       4.2.3  Procedures for Experimental and Informational RFCs......14\r\n       4.2.4  Historic................................................15\r\n\r\n   5.  Best Current Practice (BCP) RFCs...............................15\r\n     5.1  BCP Review Process..........................................16\r\n   6.  THE INTERNET STANDARDS PROCESS.................................17\r\n     6.1  Standards Actions...........................................17\r\n       6.1.1  Initiation of Action....................................17\r\n       6.1.2  IESG Review and Approval................................17\r\n       6.1.3  Publication.............................................18\r\n     6.2  Advancing in the Standards Track............................19\r\n     6.3  Revising a Standard.........................................20\r\n     6.4  Retiring a Standard.........................................20\r\n     6.5  Conflict Resolution and Appeals.............................21\r\n       6.5.1 Working Group Disputes...................................21\r\n       6.5.2 Process Failures.........................................22\r\n       6.5.3 Questions of Applicable Procedure........................22\r\n       6.5.4 Appeals Procedure........................................23\r\n   7.  EXTERNAL STANDARDS AND SPECIFICATIONS..........................23\r\n     7.1  Use of External Specifications..............................24\r\n       7.1.1  Incorporation of an Open Standard.......................24\r\n       7.1.2  Incorporation of a Other Specifications.................24\r\n       7.1.3  Assumption..............................................25\r\n   8. NOTICES AND RECORD KEEPING......................................25\r\n   9. VARYING THE PROCESS.............................................26\r\n     9.1 The Variance Procedure.......................................26\r\n     9.2 Exclusions...................................................27\r\n   10.  INTELLECTUAL PROPERTY RIGHTS..................................27\r\n     10.1.  General Policy............................................27\r\n     10.2   Confidentiality Obligations...............................28\r\n     10.3.  Rights and Permissions....................................28\r\n       10.3.1. All Contributions......................................28\r\n       10.3.2. Standards Track Documents..............................29\r\n       10.3.3  Determination of Reasonable and\r\n              Non-discriminatory Terms................................30\r\n     10.4.  Notices...................................................30\r\n   11. ACKNOWLEDGMENTS................................................32\r\n   12. SECURITY CONSIDERATIONS........................................32\r\n   13. REFERENCES.....................................................33\r\n   14. DEFINITIONS OF TERMS...........................................33\r\n   15. AUTHOR'S ADDRESS...............................................34\r\n   APPENDIX A: GLOSSARY OF ACRONYMS...................................35\r\n\r\n1.  INTRODUCTION\r\n\r\n   This memo documents the process currently used by the Internet\r\n   community for the standardization of protocols and procedures.  The\r\n   Internet Standards process is an activity of the Internet Society\r\n   that is organized and managed on behalf of the Internet community by\r\n   the Internet Architecture Board (IAB) and the Internet Engineering\r\n   Steering Group (IESG).\r\n\r\n1.1  Internet Standards\r\n\r\n   The Internet, a loosely-organized international collaboration of\r\n   autonomous, interconnected networks, supports host-to-host\r\n   communication through voluntary adherence to open protocols and\r\n   procedures defined by Internet Standards.  There are also many\r\n   isolated interconnected networks, which are not connected to the\r\n   global Internet but use the Internet Standards.\r\n\r\n   The Internet Standards Process described in this document is\r\n   concerned with all protocols, procedures, and conventions that are\r\n   used in or by the Internet, whether or not they are part of the\r\n   TCP/IP protocol suite.  In the case of protocols developed and/or\r\n   standardized by non-Internet organizations, however, the Internet\r\n   Standards Process normally applies to the application of the protocol\r\n   or procedure in the Internet context, not to the specification of the\r\n   protocol itself.\r\n\r\n   In general, an Internet Standard is a specification that is stable\r\n   and well-understood, is technically competent, has multiple,\r\n   independent, and interoperable implementations with substantial\r\n   operational experience, enjoys significant public support, and is\r\n   recognizably useful in some or all parts of the Internet.\r\n\r\n1.2  The Internet Standards Process\r\n\r\n   In outline, the process of creating an Internet Standard is\r\n   straightforward:  a specification undergoes a period of development\r\n   and several iterations of review by the Internet community and\r\n   revision based upon experience, is adopted as a Standard by the\r\n   appropriate body (see below), and is published.  In practice, the\r\n   process is more complicated, due to (1) the difficulty of creating\r\n   specifications of high technical quality;  (2) the need to consider\r\n   the interests of all of the affected parties;  (3) the importance of\r\n   establishing widespread community consensus;  and (4) the difficulty\r\n   of evaluating the utility of a particular specification for the\r\n   Internet community.\r\n\r\n   The goals of the Internet Standards Process are:\r\n   o  technical excellence;\r\n   o  prior implementation and testing;\r\n   o  clear, concise, and easily understood documentation;\r\n   o  openness and fairness;  and\r\n   o  timeliness.\r\n\r\n   The procedures described in this document are designed to be fair,\r\n   open, and objective;  to reflect existing (proven) practice;  and to\r\n   be flexible.\r\n\r\n   o  These procedures are intended to provide a fair, open, and\r\n      objective basis for developing, evaluating, and adopting Internet\r\n      Standards.  They provide ample opportunity for participation and\r\n      comment by all interested parties.  At each stage of the\r\n      standardization process, a specification is repeatedly discussed\r\n      and its merits debated in open meetings and/or public electronic\r\n      mailing lists, and it is made available for review via world-wide\r\n      on-line directories.\r\n\r\n   o  These procedures are explicitly aimed at recognizing and adopting\r\n      generally-accepted practices.  Thus, a candidate specification\r\n      must be implemented and tested for correct operation and\r\n      interoperability by multiple independent parties and utilized in\r\n      increasingly demanding environments, before it can be adopted as\r\n      an Internet Standard.\r\n\r\n   o  These procedures provide a great deal of flexibility to adapt to\r\n      the wide variety of circumstances that occur in the\r\n      standardization process.  Experience has shown this flexibility to\r\n      be vital in achieving the goals listed above.\r\n\r\n   The goal of technical competence, the requirement for prior\r\n   implementation and testing, and the need to allow all interested\r\n   parties to comment all require significant time and effort.  On the\r\n   other hand, today's rapid development of networking technology\r\n   demands timely development of standards.  The Internet Standards\r\n   Process is intended to balance these conflicting goals.  The process\r\n   is believed to be as short and simple as possible without sacrificing\r\n   technical excellence, thorough testing before adoption of a standard,\r\n   or openness and fairness.\r\n\r\n   From its inception, the Internet has been, and is expected to remain,\r\n   an evolving system whose participants regularly factor new\r\n   requirements and technology into its design and implementation. Users\r\n   of the Internet and providers of the equipment, software, and\r\n   services that support it should anticipate and embrace this evolution\r\n   as a major tenet of Internet philosophy.\r\n\r\n   The procedures described in this document are the result of a number\r\n   of years of evolution, driven both by the needs of the growing and\r\n   increasingly diverse Internet community, and by experience.\r\n\r\n1.3  Organization of This Document\r\n\r\n   Section 2 describes the publications and archives of the Internet\r\n   Standards Process.  Section 3 describes the types of Internet\r\n   standard specifications.  Section 4 describes the Internet standards\r\n   specifications track.  Section 5 describes Best Current Practice\r\n   RFCs.  Section 6 describes the process and rules for Internet\r\n   standardization.  Section 7 specifies the way in which externally-\r\n   sponsored specifications and practices, developed and controlled by\r\n   other standards bodies or by others, are handled within the Internet\r\n   Standards Process.  Section 8 describes the requirements for notices\r\n   and record keeping  Section 9 defines a variance process to allow\r\n   one-time exceptions to some of the requirements in this document\r\n   Section 10 presents the rules that are required to protect\r\n   intellectual property rights in the context of the development and\r\n   use of Internet Standards.  Section 11 includes acknowledgments of\r\n   some of the people involved in creation of this document.  Section 12\r\n   notes that security issues are not dealt with by this document.\r\n   Section 13 contains a list of numbered references.  Section 14\r\n   contains definitions of some of the terms used in this document.\r\n   Section 15 lists the author's email and postal addresses.  Appendix A\r\n   contains a list of frequently-used acronyms.\r\n\r\n2.  INTERNET STANDARDS-RELATED PUBLICATIONS\r\n\r\n2.1  Requests for Comments (RFCs)\r\n\r\n   Each distinct version of an Internet standards-related specification\r\n   is published as part of the \"Request for Comments\" (RFC) document\r\n   series.  This archival series is the official publication channel for\r\n   Internet standards documents and other publications of the IESG, IAB,\r\n   and Internet community.  RFCs can be obtained from a number of\r\n   Internet hosts using anonymous FTP, gopher, World Wide Web, and other\r\n   Internet document-retrieval systems.\r\n\r\n   The RFC series of documents on networking began in 1969 as part of\r\n   the original ARPA wide-area networking (ARPANET) project (see\r\n   Appendix A for glossary of acronyms).  RFCs cover a wide range of\r\n   topics in addition to Internet Standards, from early discussion of\r\n   new research concepts to status memos about the Internet.  RFC\r\n   publication is the direct responsibility of the RFC Editor, under the\r\n   general direction of the IAB.\r\n\r\n   The rules for formatting and submitting an RFC are defined in [5].\r\n   Every RFC is available in ASCII text.  Some RFCs are also available\r\n   in other formats.  The other versions of an RFC may contain material\r\n   (such as diagrams and figures) that is not present in the ASCII\r\n   version, and it may be formatted differently.\r\n\r\n      *********************************************************\r\n      *                                                       *\r\n      *  A stricter requirement applies to standards-track    *\r\n      *  specifications:  the ASCII text version is the       *\r\n      *  definitive reference, and therefore it must be a     *\r\n      *  complete and accurate specification of the standard, *\r\n      *  including all necessary diagrams and illustrations.  *\r\n      *                                                       *\r\n      *********************************************************\r\n\r\n   The status of Internet protocol and service specifications is\r\n   summarized periodically in an RFC entitled \"Internet Official\r\n   Protocol Standards\" [1].  This RFC shows the level of maturity and\r\n   other helpful information for each Internet protocol or service\r\n   specification (see section 3).\r\n\r\n   Some RFCs document Internet Standards.  These RFCs form the 'STD'\r\n   subseries of the RFC series [4].  When a specification has been\r\n   adopted as an Internet Standard, it is given the additional label\r\n   \"STDxxx\", but it keeps its RFC number and its place in the RFC\r\n   series. (see section 4.1.3)\r\n\r\n      Some RFCs standardize the results of community deliberations about Expand\r\n   statements of principle or conclusions about what is the best way\r\n   to perform some operations or IETF process function.  These RFCs\r\n   form the 'BCP' (Best Current Practice) subseries of the RFC\r\n   series.  When a specification has been adopted as a BCP, it is\r\n   given the additional label \"BCPxxx\", but it keeps its RFC number\r\n   and its place in the RFC series. (see section 5)\r\n\r\nEID 524 (Verified) is as follows:\r\n\r\nSection: 2.1\r\n\r\nOriginal Text:\r\n\r\n   Some RFCs standardize the results of community deliberations about\r\n   statements of principle or conclusions about what is the best way to\r\n   perform some operations or IETF process function.  These RFCs form\r\n   the specification has been adopted as a BCP, it is given the\r\n   additional label \"BCPxxx\", but it keeps its RFC number and its place\r\n   in the RFC series. (see section 5)\r\n\r\nCorrected Text:\r\n\r\n   Some RFCs standardize the results of community deliberations about\r\n   statements of principle or conclusions about what is the best way\r\n   to perform some operations or IETF process function.  These RFCs\r\n   form the 'BCP' (Best Current Practice) subseries of the RFC\r\n   series.  When a specification has been adopted as a BCP, it is\r\n   given the additional label \"BCPxxx\", but it keeps its RFC number\r\n   and its place in the RFC series. (see section 5)\r\n\r\nNotes:\r\n\r\nThe reference to BCP-11 should be to BCP-9 (RFC 2026 itself).\r\n\r\n\r\n   Not all specifications of protocols or services for the Internet\r\n   should or will become Internet Standards or BCPs.  Such non-standards\r\n   track specifications are not subject to the rules for Internet\r\n   standardization.  Non-standards track specifications may be published\r\n   directly as \"Experimental\" or \"Informational\" RFCs at the discretion\r\n   of the RFC Editor in consultation with the IESG (see section 4.2).\r\n\r\n      ********************************************************\r\n      *                                                      *\r\n      *   It is important to remember that not all RFCs      *\r\n      *   are standards track documents, and that not all    *\r\n      *   standards track documents reach the level of       *\r\n      *   Internet Standard. In the same way, not all RFCs   *\r\n      *   which describe current practices have been given   *\r\n      *   the review and approval to become BCPs. See        *\r\n      *   RFC-1796 [6] for further information.              *\r\n      *                                                      *\r\n      ********************************************************\r\n\r\n2.2  Internet-Drafts\r\n\r\n   During the development of a specification, draft versions of the\r\n   document are made available for informal review and comment by\r\n   placing them in the IETF's \"Internet-Drafts\" directory, which is\r\n   replicated on a number of Internet hosts.  This makes an evolving\r\n   working document readily available to a wide audience, facilitating\r\n   the process of review and revision.\r\n\r\n   An Internet-Draft that is published as an RFC, or that has remained\r\n   unchanged in the Internet-Drafts directory for more than six months\r\n   without being recommended by the IESG for publication as an RFC, is\r\n   simply removed from the Internet-Drafts directory.  At any time, an\r\n   Internet-Draft may be replaced by a more recent version of the same\r\n   specification, restarting the six-month timeout period.\r\n\r\n   An Internet-Draft is NOT a means of \"publishing\" a specification;\r\n   specifications are published through the RFC mechanism described in\r\n   the previous section.  Internet-Drafts have no formal status, and are\r\n   subject to change or removal at any time.\r\n\r\n      ********************************************************\r\n      *                                                      *\r\n      *   Under no circumstances should an Internet-Draft    *\r\n      *   be referenced by any paper, report, or Request-    *\r\n      *   for-Proposal, nor should a vendor claim compliance *\r\n      *   with an Internet-Draft.                            *\r\n      *                                                      *\r\n      ********************************************************\r\n\r\n   Note: It is acceptable to reference a standards-track specification\r\n   that may reasonably be expected to be published as an RFC using the\r\n   phrase \"Work in Progress\"  without referencing an Internet-Draft.\r\n   This may also be done in a standards track document itself  as long\r\n   as the specification in which the reference is made would stand as a\r\n   complete and understandable document with or without the reference to\r\n   the \"Work in Progress\".\r\n\r\n3.  INTERNET STANDARD SPECIFICATIONS\r\n\r\n   Specifications subject to the Internet Standards Process fall into\r\n   one of two categories:  Technical Specification (TS) and\r\n   Applicability Statement (AS).\r\n\r\n3.1  Technical Specification (TS)\r\n\r\n   A Technical Specification is any description of a protocol, service,\r\n   procedure, convention, or format.  It may completely describe all of\r\n   the relevant aspects of its subject, or it may leave one or more\r\n   parameters or options unspecified.  A TS may be completely self-\r\n   contained, or it may incorporate material from other specifications\r\n   by reference to other documents (which might or might not be Internet\r\n   Standards).\r\n\r\n   A TS shall include a statement of its scope and the general intent\r\n   for its use (domain of applicability).  Thus, a TS that is inherently\r\n   specific to a particular context shall contain a statement to that\r\n   effect.  However, a TS does not specify requirements for its use\r\n   within the Internet;  these requirements, which depend on the\r\n   particular context in which the TS is incorporated by different\r\n   system configurations, are defined by an Applicability Statement.\r\n\r\n3.2  Applicability Statement (AS)\r\n\r\n   An Applicability Statement specifies how, and under what\r\n   circumstances, one or more TSs may be applied to support a particular\r\n   Internet capability.  An AS may specify uses for TSs that are not\r\n   Internet Standards, as discussed in Section 7.\r\n\r\n   An AS identifies the relevant TSs and the specific way in which they\r\n   are to be combined, and may also specify particular values or ranges\r\n   of TS parameters or subfunctions of a TS protocol that must be\r\n   implemented.  An AS also specifies the circumstances in which the use\r\n   of a particular TS is required, recommended, or elective (see section\r\n   3.3).\r\n\r\n   An AS may describe particular methods of using a TS in a restricted\r\n   \"domain of applicability\", such as Internet routers, terminal\r\n   servers, Internet systems that interface to Ethernets, or datagram-\r\n   based database servers.\r\n\r\n   The broadest type of AS is a comprehensive conformance specification,\r\n   commonly called a \"requirements document\", for a particular class of\r\n   Internet systems, such as Internet routers or Internet hosts.\r\n\r\n   An AS may not have a higher maturity level in the standards track\r\n   than any standards-track TS on which the AS relies (see section 4.1).\r\n   For example, a TS at Draft Standard level may be referenced by an AS\r\n   at the Proposed Standard or Draft Standard level, but not by an AS at\r\n   the Standard level.\r\n\r\n3.3  Requirement Levels\r\n\r\n   An AS shall apply one of the following \"requirement levels\" to each\r\n   of the TSs to which it refers:\r\n\r\n   (a)  Required:  Implementation of the referenced TS, as specified by\r\n      the AS, is required to achieve minimal conformance.  For example,\r\n      IP and ICMP must be implemented by all Internet systems using the\r\n      TCP/IP Protocol Suite.\r\n\r\n   (b)  Recommended:  Implementation of the referenced TS is not\r\n      required for minimal conformance, but experience and/or generally\r\n      accepted technical wisdom suggest its desirability in the domain\r\n      of applicability of the AS.  Vendors are strongly encouraged to\r\n      include the functions, features, and protocols of Recommended TSs\r\n      in their products, and should omit them only if the omission is\r\n      justified by some special circumstance. For example, the TELNET\r\n      protocol should be implemented by all systems that would benefit\r\n      from remote access.\r\n\r\n   (c)  Elective:  Implementation of the referenced TS is optional\r\n      within the domain of applicability of the AS;  that is, the AS\r\n      creates no explicit necessity to apply the TS.  However, a\r\n      particular vendor may decide to implement it, or a particular user\r\n      may decide that it is a necessity in a specific environment.  For\r\n      example, the DECNET MIB could be seen as valuable in an\r\n      environment where the DECNET protocol is used.\r\n\r\n      As noted in section 4.1, there are TSs that are not in the\r\n      standards track or that have been retired from the standards\r\n      track, and are therefore not required, recommended, or elective.\r\n      Two additional \"requirement level\" designations are available for\r\n      these TSs:\r\n\r\n   (d)  Limited Use:  The TS is considered to be appropriate for use\r\n      only in limited or unique circumstances.  For example, the usage\r\n      of a protocol with the \"Experimental\" designation should generally\r\n      be limited to those actively involved with the experiment.\r\n\r\n   (e)  Not Recommended:  A TS that is considered to be inappropriate\r\n      for general use is labeled \"Not Recommended\". This may be because\r\n      of its limited functionality, specialized nature, or historic\r\n      status.\r\n\r\n   Although TSs and ASs are conceptually separate, in practice a\r\n   standards-track document may combine an AS and one or more related\r\n   TSs.  For example, Technical Specifications that are developed\r\n   specifically and exclusively for some particular domain of\r\n   applicability, e.g., for mail server hosts, often contain within a\r\n   single specification all of the relevant AS and TS information. In\r\n   such cases, no useful purpose would be served by deliberately\r\n   distributing the information among several documents just to preserve\r\n   the formal AS/TS distinction.  However, a TS that is likely to apply\r\n   to more than one domain of applicability should be developed in a\r\n   modular fashion, to facilitate its incorporation by multiple ASs.\r\n\r\n   The \"Official Protocol Standards\" RFC (STD1) lists a general\r\n   requirement level for each TS, using the nomenclature defined in this\r\n   section. This RFC is updated periodically.  In many cases, more\r\n   detailed descriptions of the requirement levels of particular\r\n   protocols and of individual features of the protocols will be found\r\n   in appropriate ASs.\r\n\r\n4.  THE INTERNET STANDARDS TRACK\r\n\r\n   Specifications that are intended to become Internet Standards evolve\r\n   through a set of maturity levels known as the \"standards track\".\r\n   These maturity levels -- \"Proposed Standard\", \"Draft Standard\", and\r\n   \"Standard\" -- are defined and discussed in section 4.1.  The way in\r\n   which specifications move along the standards track is described in\r\n   section 6.\r\n\r\n   Even after a specification has been adopted as an Internet Standard,\r\n   further evolution often occurs based on experience and the\r\n   recognition of new requirements.  The nomenclature and procedures of\r\n   Internet standardization provide for the replacement of old Internet\r\n\r\n   Standards with new ones, and the assignment of descriptive labels to\r\n   indicate the status of \"retired\" Internet Standards.  A set of\r\n   maturity levels is defined in section 4.2 to cover these and other\r\n   specifications that are not considered to be on the standards track.\r\n\r\n4.1  Standards Track Maturity Levels\r\n\r\n   Internet specifications go through stages of development, testing,\r\n   and acceptance.  Within the Internet Standards Process, these stages\r\n   are formally labeled \"maturity levels\".\r\n\r\n   This section describes the maturity levels and the expected\r\n   characteristics of specifications at each level.\r\n\r\n4.1.1  Proposed Standard\r\n\r\n   The entry-level maturity for the standards track is \"Proposed\r\n   Standard\".  A specific action by the IESG is required to move a\r\n   specification onto the standards track at the \"Proposed Standard\"\r\n   level.\r\n\r\n   A Proposed Standard specification is generally stable, has resolved\r\n   known design choices, is believed to be well-understood, has received\r\n   significant community review, and appears to enjoy enough community\r\n   interest to be considered valuable.  However, further experience\r\n   might result in a change or even retraction of the specification\r\n   before it advances.\r\n\r\n   Usually, neither implementation nor operational experience is\r\n   required for the designation of a specification as a Proposed\r\n   Standard.  However, such experience is highly desirable, and will\r\n   usually represent a strong argument in favor of a Proposed Standard\r\n   designation.\r\n\r\n   The IESG may require implementation and/or operational experience\r\n   prior to granting Proposed Standard status to a specification that\r\n   materially affects the core Internet protocols or that specifies\r\n   behavior that may have significant operational impact on the\r\n   Internet.\r\n\r\n   A Proposed Standard should have no known technical omissions with\r\n   respect to the requirements placed upon it.  However, the IESG may\r\n   waive this requirement in order to allow a specification to advance\r\n   to the Proposed Standard state when it is considered to be useful and\r\n   necessary (and timely) even with known technical omissions.\r\n\r\n   Implementors should treat Proposed Standards as immature\r\n   specifications.  It is desirable to implement them in order to gain\r\n   experience and to validate, test, and clarify the specification.\r\n   However, since the content of Proposed Standards may be changed if\r\n   problems are found or better solutions are identified, deploying\r\n   implementations of such standards into a disruption-sensitive\r\n   environment is not recommended.\r\n\r\n4.1.2  Draft Standard\r\n\r\n   A specification from which at least two independent and interoperable\r\n   implementations from different code bases have been developed, and\r\n   for which sufficient successful operational experience has been\r\n   obtained, may be elevated to the \"Draft Standard\" level.  For the\r\n   purposes of this section, \"interoperable\" means to be functionally\r\n   equivalent or interchangeable components of the system or process in\r\n   which they are used.  If patented or otherwise controlled technology\r\n   is required for implementation, the separate implementations must\r\n   also have resulted from separate exercise of the licensing process.\r\n   Elevation to Draft Standard is a major advance in status, indicating\r\n   a strong belief that the specification is mature and will be useful.\r\n\r\n   The requirement for at least two independent and interoperable\r\n   implementations applies to all of the options and features of the\r\n   specification.  In cases in which one or more options or features\r\n   have not been demonstrated in at least two interoperable\r\n   implementations, the specification may advance to the Draft Standard\r\n   level only if those options or features are removed.\r\n\r\n   The Working Group chair is responsible for documenting the specific\r\n   implementations which qualify the specification for Draft or Internet\r\n   Standard status along with documentation about testing of the\r\n   interoperation of these implementations.  The documentation must\r\n   include information about the support of each of the individual\r\n   options and features.  This documentation should be submitted to the\r\n   Area Director with the protocol action request. (see Section 6)\r\n\r\n   A Draft Standard must be well-understood and known to be quite\r\n   stable, both in its semantics and as a basis for developing an\r\n   implementation.  A Draft Standard may still require additional or\r\n   more widespread field experience, since it is possible for\r\n   implementations based on Draft Standard specifications to demonstrate\r\n   unforeseen behavior when subjected to large-scale use in production\r\n   environments.\r\n\r\n   A Draft Standard is normally considered to be a final specification,\r\n   and changes are likely to be made only to solve specific problems\r\n   encountered.  In most circumstances, it is reasonable for vendors to\r\n   deploy implementations of Draft Standards into a disruption sensitive\r\n   environment.\r\n\r\n4.1.3  Internet Standard\r\n\r\n   A specification for which significant implementation and successful\r\n   operational experience has been obtained may be elevated to the\r\n   Internet Standard level.  An Internet Standard (which may simply be\r\n   referred to as a Standard) is characterized by a high degree of\r\n   technical maturity and by a generally held belief that the specified\r\n   protocol or service provides significant benefit to the Internet\r\n   community.\r\n\r\n   A specification that reaches the status of Standard is assigned a\r\n   number in the STD series while retaining its RFC number.\r\n\r\n4.2  Non-Standards Track Maturity Levels\r\n\r\n   Not every specification is on the standards track.  A specification\r\n   may not be intended to be an Internet Standard, or it may be intended\r\n   for eventual standardization but not yet ready to enter the standards\r\n   track.  A specification may have been superseded by a more recent\r\n   Internet Standard, or have otherwise fallen into disuse or disfavor.\r\n\r\n   Specifications that are not on the standards track are labeled with\r\n   one of three \"off-track\" maturity levels:  \"Experimental\",\r\n   \"Informational\", or \"Historic\".  The documents bearing these labels\r\n   are not Internet Standards in any sense.\r\n\r\n4.2.1  Experimental\r\n\r\n   The \"Experimental\" designation typically denotes a specification that\r\n   is part of some research or development effort.  Such a specification\r\n   is published for the general information of the Internet technical\r\n   community and as an archival record of the work, subject only to\r\n   editorial considerations and to verification that there has been\r\n   adequate coordination with the standards process (see below).  An\r\n   Experimental specification may be the output of an organized Internet\r\n   research effort (e.g., a Research Group of the IRTF), an IETF Working\r\n   Group, or it may be an individual contribution.\r\n\r\n4.2.2  Informational\r\n\r\n   An \"Informational\" specification is published for the general\r\n   information of the Internet community, and does not represent an\r\n   Internet community consensus or recommendation.  The Informational\r\n   designation is intended to provide for the timely publication of a\r\n   very broad range of responsible informational documents from many\r\n   sources, subject only to editorial considerations and to verification\r\n   that there has been adequate coordination with the standards process\r\n   (see section 4.2.3).\r\n\r\n   Specifications that have been prepared outside of the Internet\r\n   community and are not incorporated into the Internet Standards\r\n   Process by any of the provisions of section 10 may be published as\r\n   Informational RFCs, with the permission of the owner and the\r\n   concurrence of the RFC Editor.\r\n\r\n4.2.3  Procedures for Experimental and Informational RFCs\r\n\r\n   Unless they are the result of IETF Working Group action, documents\r\n   intended to be published with Experimental or Informational status\r\n   should be submitted directly to the RFC Editor.  The RFC Editor will\r\n   publish any such documents as Internet-Drafts which have not already\r\n   been so published.  In order to differentiate these Internet-Drafts\r\n   they will be labeled or grouped in the I-D directory so they are\r\n   easily recognizable.  The RFC Editor will wait two weeks after this\r\n   publication for comments before proceeding further.  The RFC Editor\r\n   is expected to exercise his or her judgment concerning the editorial\r\n   suitability of a document for publication with Experimental or\r\n   Informational status, and may refuse to publish a document which, in\r\n   the expert opinion of the RFC Editor, is unrelated to Internet\r\n   activity or falls below the technical and/or editorial standard for\r\n   RFCs.\r\n\r\n   To ensure that the non-standards track Experimental and Informational\r\n   designations are not misused to circumvent the Internet Standards\r\n   Process, the IESG and the RFC Editor have agreed that the RFC Editor\r\n   will refer to the IESG any document submitted for Experimental or\r\n   Informational publication which, in the opinion of the RFC Editor,\r\n   may be related to work being done, or expected to be done, within the\r\n   IETF community.  The IESG shall review such a referred document\r\n   within a reasonable period of time, and recommend either that it be\r\n   published as originally submitted or referred to the IETF as a\r\n   contribution to the Internet Standards Process.\r\n\r\n   If (a) the IESG recommends that the document be brought within the\r\n   IETF and progressed within the IETF context, but the author declines\r\n   to do so, or (b) the IESG considers that the document proposes\r\n\r\n   something that conflicts with, or is actually inimical to, an\r\n   established IETF effort, the document may still be published as an\r\n   Experimental or Informational RFC.  In these cases, however, the IESG\r\n   may insert appropriate \"disclaimer\" text into the RFC either in or\r\n   immediately following the \"Status of this Memo\" section in order to\r\n   make the circumstances of its publication clear to readers.\r\n\r\n   Documents proposed for Experimental and Informational RFCs by IETF\r\n   Working Groups go through IESG review.  The review is initiated using\r\n   the process described in section 6.1.1.\r\n\r\n4.2.4  Historic\r\n\r\n   A specification that has been superseded by a more recent\r\n   specification or is for any other reason considered to be obsolete is\r\n   assigned to the \"Historic\" level.  (Purists have suggested that the\r\n   word should be \"Historical\"; however, at this point the use of\r\n   \"Historic\" is historical.)\r\n\r\n   Note: Standards track specifications normally must not depend on\r\n   other standards track specifications which are at a lower maturity\r\n   level or on non standards track specifications other than referenced\r\n   specifications from other standards bodies.  (See Section 7.)\r\n\r\n5.  BEST CURRENT PRACTICE (BCP) RFCs\r\n\r\n   The BCP subseries of the RFC series is designed to be a way to\r\n   standardize practices and the results of community deliberations.  A\r\n   BCP document is subject to the same basic set of procedures as\r\n   standards track documents and thus is a vehicle by which the IETF\r\n   community can define and ratify the community's best current thinking\r\n   on a statement of principle or on what is believed to be the best way\r\n   to perform some operations or IETF process function.\r\n\r\n   Historically Internet standards have generally been concerned with\r\n   the technical specifications for hardware and software required for\r\n   computer communication across interconnected networks.  However,\r\n   since the Internet itself is composed of networks operated by a great\r\n   variety of organizations, with diverse goals and rules, good user\r\n   service requires that the operators and administrators of the\r\n   Internet follow some common guidelines for policies and operations.\r\n   While these guidelines are generally different in scope and style\r\n   from protocol standards, their establishment needs a similar process\r\n   for consensus building.\r\n\r\n   While it is recognized that entities such as the IAB and IESG are\r\n   composed of individuals who may participate, as individuals, in the\r\n   technical work of the IETF, it is also recognized that the entities\r\n\r\n   themselves have an existence as leaders in the community.  As leaders\r\n   in the Internet technical community, these entities should have an\r\n   outlet to propose ideas to stimulate work in a particular area, to\r\n   raise the community's sensitivity to a certain issue, to make a\r\n   statement of architectural principle, or to communicate their\r\n   thoughts on other matters.  The BCP subseries creates a smoothly\r\n   structured way for these management entities to insert proposals into\r\n   the consensus-building machinery of the IETF while gauging the\r\n   community's view of that issue.\r\n\r\n   Finally, the BCP series may be used to document the operation of the\r\n   IETF itself.  For example, this document defines the IETF Standards\r\n   Process and is published as a BCP.\r\n\r\n5.1 BCP Review Process\r\n\r\n   Unlike standards-track documents, the mechanisms described in BCPs\r\n   are not well suited to the phased roll-in nature of the three stage\r\n   standards track and instead generally only make sense for full and\r\n   immediate instantiation.\r\n\r\n   The BCP process is similar to that for proposed standards.  The BCP\r\n   is submitted to the IESG for review, (see section 6.1.1) and the\r\n   existing review process applies, including a Last-Call on the IETF\r\n   Announce mailing list.  However, once the IESG has approved the\r\n   document, the process ends and the document is published.  The\r\n   resulting document is viewed as having the technical approval of the\r\n   IETF.\r\n\r\n   Specifically, a document to be considered for the status of BCP must\r\n   undergo the procedures outlined in sections 6.1, and 6.4 of this\r\n   document. The BCP process may be appealed according to the procedures\r\n   in section 6.5.\r\n\r\n   Because BCPs are meant to express community consensus but are arrived\r\n   at more quickly than standards, BCPs require particular care.\r\n   Specifically, BCPs should not be viewed simply as stronger\r\n   Informational RFCs, but rather should be viewed as documents suitable\r\n   for a content different from Informational RFCs.\r\n\r\n   A specification, or group of specifications, that has, or have been\r\n   approved as a BCP is assigned a number in the BCP series while\r\n   retaining its RFC number(s).\r\n\r\n6.  THE INTERNET STANDARDS PROCESS\r\n\r\n   The mechanics of the Internet Standards Process involve decisions of\r\n   the IESG concerning the elevation of a specification onto the\r\n   standards track or the movement of a standards-track specification\r\n   from one maturity level to another.  Although a number of reasonably\r\n   objective criteria (described below and in section 4) are available\r\n   to guide the IESG in making a decision to move a specification onto,\r\n   along, or off the standards track, there is no algorithmic guarantee\r\n   of elevation to or progression along the standards track for any\r\n   specification.  The experienced collective judgment of the IESG\r\n   concerning the technical quality of a specification proposed for\r\n   elevation to or advancement in the standards track is an essential\r\n   component of the decision-making process.\r\n\r\n6.1  Standards Actions\r\n\r\n   A \"standards action\" -- entering a particular specification into,\r\n   advancing it within, or removing it from, the standards track -- must\r\n   be approved by the IESG.\r\n\r\n6.1.1  Initiation of Action\r\n\r\n   A specification that is intended to enter or advance in the Internet\r\n   standards track shall first be posted as an Internet-Draft (see\r\n   section 2.2) unless it has not changed since publication as an RFC.\r\n   It shall remain as an Internet-Draft for a period of time, not less\r\n   than two weeks, that permits useful community review, after which a\r\n   recommendation for action may be initiated.\r\n\r\n   A standards action is initiated by a recommendation by the IETF\r\n   Working group responsible for a specification to its Area Director,\r\n   copied to the IETF Secretariat or, in the case of a specification not\r\n   associated with a Working Group, a recommendation by an individual to\r\n   the IESG.\r\n\r\n6.1.2  IESG Review and Approval\r\n\r\n   The IESG shall determine whether or not a specification submitted to\r\n   it according to section 6.1.1 satisfies the applicable criteria for\r\n   the recommended action (see sections 4.1 and 4.2), and shall in\r\n   addition determine whether or not the technical quality and clarity\r\n   of the specification is consistent with that expected for the\r\n   maturity level to which the specification is recommended.\r\n\r\n   In order to obtain all of the information necessary to make these\r\n   determinations, particularly when the specification is considered by\r\n   the IESG to be extremely important in terms of its potential impact\r\n\r\n   on the Internet or on the suite of Internet protocols, the IESG may,\r\n   at its discretion, commission an independent technical review of the\r\n   specification.\r\n\r\n   The IESG will send notice to the IETF of the pending IESG\r\n   consideration of the document(s) to permit a final review by the\r\n   general Internet community.  This \"Last-Call\" notification shall be\r\n   via electronic mail to the IETF Announce mailing list.  Comments on a\r\n   Last-Call shall be accepted from anyone, and should be sent as\r\n   directed in the Last-Call announcement.\r\n\r\n   The Last-Call period shall be no shorter than two weeks except in\r\n   those cases where the proposed standards action was not initiated by\r\n   an IETF Working Group, in which case the Last-Call period shall be no\r\n   shorter than four weeks.  If the IESG believes that the community\r\n   interest would be served by allowing more time for comment, it may\r\n   decide on a longer Last-Call period or to explicitly lengthen a\r\n   current Last-Call period.\r\n\r\n   The IESG is not bound by the action recommended when the\r\n   specification was submitted.  For example, the IESG may decide to\r\n   consider the specification for publication in a different category\r\n   than that requested.  If the IESG determines this before the Last-\r\n   Call is issued then the Last-Call should reflect the IESG's view.\r\n   The IESG could also decide to change the publication category based\r\n   on the response to a Last-Call. If this decision would result in a\r\n   specification being published at a \"higher\" level than the original\r\n   Last-Call was for, a new Last-Call should be issued indicating the\r\n   IESG recommendation. In addition, the IESG may decide to recommend\r\n   the formation of a new Working Group in the case of significant\r\n   controversy in response to a Last-Call for specification not\r\n   originating from an IETF Working Group.\r\n\r\n   In a timely fashion after the expiration of the Last-Call period, the\r\n   IESG shall make its final determination of whether or not to approve\r\n   the standards action, and shall notify the IETF of its decision via\r\n   electronic mail to the IETF Announce mailing list.\r\n\r\n6.1.3  Publication\r\n\r\n   If a standards action is approved, notification is sent to the RFC\r\n   Editor and copied to the IETF with instructions to publish the\r\n   specification as an RFC.  The specification shall at that point be\r\n   removed from the Internet-Drafts directory.\r\n\r\n   An official summary of standards actions completed and pending shall\r\n   appear in each issue of the Internet Society's newsletter.  This\r\n   shall constitute the \"publication of record\" for Internet standards\r\n   actions.\r\n\r\n   The RFC Editor shall publish periodically an \"Internet Official\r\n   Protocol Standards\" RFC [1], summarizing the status of all Internet\r\n   protocol and service specifications.\r\n\r\n6.2  Advancing in the Standards Track\r\n\r\n   The procedure described in section 6.1 is followed for each action\r\n   that attends the advancement of a specification along the standards\r\n   track.\r\n\r\n   A specification shall remain at the Proposed Standard level for at\r\n   least six (6) months.\r\n\r\n   A specification shall remain at the Draft Standard level for at least\r\n   four (4) months, or until at least one IETF meeting has occurred,\r\n   whichever comes later.\r\n\r\n   These minimum periods are intended to ensure adequate opportunity for\r\n   community review without severely impacting timeliness.  These\r\n   intervals shall be measured from the date of publication of the\r\n   corresponding RFC(s), or, if the action does not result in RFC\r\n   publication, the date of the announcement of the IESG approval of the\r\n   action.\r\n\r\n   A specification may be (indeed, is likely to be) revised as it\r\n   advances through the standards track.  At each stage, the IESG shall\r\n   determine the scope and significance of the revision to the\r\n   specification, and, if necessary and appropriate, modify the\r\n   recommended action.  Minor revisions are expected, but a significant\r\n   revision may require that the specification accumulate more\r\n   experience at its current maturity level before progressing. Finally,\r\n   if the specification has been changed very significantly, the IESG\r\n   may recommend that the revision be treated as a new document, re-\r\n   entering the standards track at the beginning.\r\n\r\n   Change of status shall result in republication of the specification\r\n   as an RFC, except in the rare case that there have been no changes at\r\n   all in the specification since the last publication.  Generally,\r\n   desired changes will be \"batched\" for incorporation at the next level\r\n   in the standards track.  However, deferral of changes to the next\r\n   standards action on the specification will not always be possible or\r\n   desirable; for example, an important typographical error, or a\r\n   technical error that does not represent a change in overall function\r\n\r\n   of the specification, may need to be corrected immediately.  In such\r\n   cases, the IESG or RFC Editor may be asked to republish the RFC (with\r\n   a new number) with corrections, and this will not reset the minimum\r\n   time-at-level clock.\r\n\r\n   When a standards-track specification has not reached the Internet\r\n   Standard level but has remained at the same maturity level for\r\n   twenty-four (24) months, and every twelve (12) months thereafter\r\n   until the status is changed, the IESG shall review the viability of\r\n   the standardization effort responsible for that specification and the\r\n   usefulness of the technology. Following each such review, the IESG\r\n   shall approve termination or continuation of the development effort,\r\n   at the same time the IESG shall decide to maintain the specification\r\n   at the same maturity level or to move it to Historic status.  This\r\n   decision shall be communicated to the IETF by electronic mail to the\r\n   IETF Announce mailing list to allow the Internet community an\r\n   opportunity to comment. This provision is not intended to threaten a\r\n   legitimate and active Working Group effort, but rather to provide an\r\n   administrative mechanism for terminating a moribund effort.\r\n\r\n6.3  Revising a Standard\r\n\r\n   A new version of an established Internet Standard must progress\r\n   through the full Internet standardization process as if it were a\r\n   completely new specification.  Once the new version has reached the\r\n   Standard level, it will usually replace the previous version, which\r\n   will be moved to Historic status.  However, in some cases both\r\n   versions may remain as Internet Standards to honor the requirements\r\n   of an installed base.  In this situation, the relationship between\r\n   the previous and the new versions must be explicitly stated in the\r\n   text of the new version or in another appropriate document (e.g., an\r\n   Applicability Statement; see section 3.2).\r\n\r\n6.4  Retiring a Standard\r\n\r\n   As the technology changes and matures, it is possible for a new\r\n   Standard specification to be so clearly superior technically that one\r\n   or more existing standards track specifications for the same function\r\n   should be retired.  In this case, or when it is felt for some other\r\n   reason that an existing standards track specification should be\r\n   retired, the IESG shall approve a change of status of the old\r\n   specification(s) to Historic.  This recommendation shall be issued\r\n   with the same Last-Call and notification procedures used for any\r\n   other standards action.  A request to retire an existing standard can\r\n   originate from a Working Group, an Area Director or some other\r\n   interested party.\r\n\r\n6.5  Conflict Resolution and Appeals\r\n\r\n   Disputes are possible at various stages during the IETF process. As\r\n   much as possible the process is designed so that compromises can be\r\n   made, and genuine consensus achieved, however there are times when\r\n   even the most reasonable and knowledgeable people are unable to\r\n   agree. To achieve the goals of openness and fairness, such conflicts\r\n   must be resolved by a process of open review and discussion. This\r\n   section specifies the procedures that shall be followed to deal with\r\n   Internet standards issues that cannot be resolved through the normal\r\n   processes whereby IETF Working Groups and other Internet Standards\r\n   Process participants ordinarily reach consensus.\r\n\r\n6.5.1 Working Group Disputes\r\n\r\n   An individual (whether a participant in the relevant Working Group or\r\n   not) may disagree with a Working Group recommendation based on his or\r\n   her belief that either (a) his or her own views have not been\r\n   adequately considered by the Working Group, or (b) the Working Group\r\n   has made an incorrect technical choice which places the quality\r\n   and/or integrity of the Working Group's product(s) in significant\r\n   jeopardy.  The first issue is a difficulty with Working Group\r\n   process;  the latter is an assertion of technical error.  These two\r\n   types of disagreement are quite different, but both are handled by\r\n   the same process of review.\r\n\r\n   A person who disagrees with a Working Group recommendation shall\r\n   always first discuss the matter with the Working Group's chair(s),\r\n   who may involve other members of the Working Group (or the Working\r\n   Group as a whole) in the discussion.\r\n\r\n   If the disagreement cannot be resolved in this way, any of the\r\n   parties involved may bring it to the attention of the Area\r\n   Director(s) for the area in which the Working Group is chartered.\r\n   The Area Director(s) shall attempt to resolve the dispute.\r\n\r\n   If the disagreement cannot be resolved by the Area Director(s) any of\r\n   the parties involved may then appeal to the IESG as a whole.  The\r\n   IESG shall then review the situation and attempt to resolve it in a\r\n   manner of its own choosing.\r\n\r\n   If the disagreement is not resolved to the satisfaction of the\r\n   parties at the IESG level, any of the parties involved may appeal the\r\n   decision to the IAB.  The IAB shall then review the situation and\r\n   attempt to resolve it in a manner of its own choosing.\r\n\r\n   The IAB decision is final with respect to the question of whether or\r\n   not the Internet standards procedures have been followed and with\r\n   respect to all questions of technical merit.\r\n\r\n6.5.2 Process Failures\r\n\r\n   This document sets forward procedures required to be followed to\r\n   ensure openness and fairness of the Internet Standards Process, and\r\n   the technical viability of the standards created. The IESG is the\r\n   principal agent of the IETF for this purpose, and it is the IESG that\r\n   is charged with ensuring that the required procedures have been\r\n   followed, and that any necessary prerequisites to a standards action\r\n   have been met.\r\n\r\n   If an individual should disagree with an action taken by the IESG in\r\n   this process, that person should first discuss the issue with the\r\n   IESG Chair Expand\r\n. If the IESG Chair is unable to satisfy the complainant\r\n   then the IESG as a whole should re-examine the action taken, along\r\n   with input from the complainant, and determine whether any further\r\n   action is needed.  The IESG shall issue a report on its review of the\r\n   complaint to the IETF.\r\n\r\n   Should the complainant not be satisfied with the outcome of the IESG\r\n   review, an appeal may be lodged to the IAB. The IAB shall then review\r\n   the situation and attempt to resolve it in a manner of its own\r\n   choosing and report to the IETF on the outcome of its review.\r\n\r\n   If circumstances warrant, the IAB may direct that an IESG decision be\r\n   annulled, and the situation shall then be as it was before the IESG\r\n   decision was taken. The IAB may also recommend an action to the IESG,\r\n   or make such other recommendations as it deems fit. The IAB may not,\r\n   however, pre-empt the role of the IESG by issuing a decision which\r\n   only the IESG is empowered to make.\r\n\r\n   The IAB decision is final with respect to the question of whether or\r\n   not the Internet standards procedures have been followed.\r\n\r\n6.5.3 Questions of Applicable Procedure\r\n\r\n   Further recourse is available only in cases in which the procedures\r\n   themselves (i.e., the procedures described in this document) are\r\n   claimed to be inadequate or insufficient to the protection of the\r\n   rights of all parties in a fair and open Internet Standards Process.\r\n   Claims on this basis may be made to the Internet Society Board of\r\n   Trustees.  The President of the Internet Society shall acknowledge\r\n   such an appeal within two weeks, and shall at the time of\r\n   acknowledgment advise the petitioner of the expected duration of the\r\n   Trustees' review of the appeal.  The Trustees shall review the\r\n\r\n   situation in a manner of its own choosing and report to the IETF on\r\n   the outcome of its review.\r\n\r\n   The Trustees' decision upon completion of their review shall be final\r\n   with respect to all aspects of the dispute.\r\n\r\n6.5.4 Appeals Procedure\r\n\r\n   All appeals must include a detailed and specific description of the\r\n   facts of the dispute.\r\n\r\n   All appeals must be initiated within two months of the public\r\n   knowledge of the action or decision to be challenged.\r\n\r\n   At all stages of the appeals process, the individuals or bodies\r\n   responsible for making the decisions have the discretion to define\r\n   the specific procedures they will follow in the process of making\r\n   their decision.\r\n\r\n   In all cases a decision concerning the disposition of the dispute,\r\n   and the communication of that decision to the parties involved, must\r\n   be accomplished within a reasonable period of time.\r\n\r\n      [NOTE:  These procedures intentionally and explicitly do not Expand\r\n   establish a fixed maximum time period that shall be considered\r\n   \"reasonable\" in all cases.  The Internet Standards Process places a\r\n   premium on consensus and efforts to achieve it, and deliberately\r\n   forgoes deterministically swift execution of procedures in favor of\r\n   a latitude within which more genuine technical agreements may be\r\n   reached.]\r\n\r\n\r\n7.  EXTERNAL STANDARDS AND SPECIFICATIONS\r\n\r\n   Many standards groups other than the IETF create and publish\r\n   standards documents for network protocols and services.  When these\r\n   external specifications play an important role in the Internet, it is\r\n   desirable to reach common agreements on their usage -- i.e., to\r\n   establish Internet Standards relating to these external\r\n   specifications.\r\n\r\n   There are two categories of external specifications:\r\n\r\n   (1)  Open Standards\r\n\r\n      Various national and international standards bodies, such as ANSI,\r\n      ISO, IEEE, and ITU-T, develop a variety of protocol and service\r\n      specifications that are similar to Technical Specifications\r\n      defined here.  National and international groups also publish\r\n\r\n      \"implementors' agreements\" that are analogous to Applicability\r\n      Statements, capturing a body of implementation-specific detail\r\n      concerned with the practical application of their standards.  All\r\n      of these are considered to be \"open external standards\" for the\r\n      purposes of the Internet Standards Process.\r\n\r\n   (2)  Other Specifications\r\n\r\n      Other proprietary specifications that have come to be widely used\r\n      in the Internet may be treated by the Internet community as if\r\n      they were a \"standards\".  Such a specification is not generally\r\n      developed in an open fashion, is typically proprietary, and is\r\n      controlled by the vendor, vendors, or organization that produced\r\n      it.\r\n\r\n7.1  Use of External Specifications\r\n\r\n   To avoid conflict between competing versions of a specification, the\r\n   Internet community will not standardize a specification that is\r\n   simply an \"Internet version\" of an existing external specification\r\n   unless an explicit cooperative arrangement to do so has been made.\r\n   However, there are several ways in which an external specification\r\n   that is important for the operation and/or evolution of the Internet\r\n   may be adopted for Internet use.\r\n\r\n7.1.1  Incorporation of an Open Standard\r\n\r\n   An Internet Standard TS or AS may incorporate an open external\r\n   standard by reference.  For example, many Internet Standards\r\n   incorporate by reference the ANSI standard character set \"ASCII\" [2].\r\n   Whenever possible, the referenced specification shall be available\r\n   online.\r\n\r\n7.1.2  Incorporation of Other Specifications\r\n\r\n   Other proprietary specifications may be incorporated by reference to\r\n   a version of the specification as long as the proprietor meets the\r\n   requirements of section 10.  If the other proprietary specification\r\n   is not widely and readily available, the IESG may request that it be\r\n   published as an Informational RFC.\r\n\r\n   The IESG generally should not favor a particular proprietary\r\n   specification over technically equivalent and competing\r\n   specification(s) by making any incorporated vendor specification\r\n   \"required\" or \"recommended\".\r\n\r\n7.1.3  Assumption\r\n\r\n   An IETF Working Group may start from an external specification and\r\n   develop it into an Internet specification.  This is acceptable if (1)\r\n   the specification is provided to the Working Group in compliance with\r\n   the requirements of section 10, and (2) change control has been\r\n   conveyed to IETF by the original developer of the specification for\r\n   the specification or for specifications derived from the original\r\n   specification.\r\n\r\n8.  NOTICES AND RECORD KEEPING\r\n\r\n   Each of the organizations involved in the development and approval of\r\n   Internet Standards shall publicly announce, and shall maintain a\r\n   publicly accessible record of, every activity in which it engages, to\r\n   the extent that the activity represents the prosecution of any part\r\n   of the Internet Standards Process.  For purposes of this section, the\r\n   organizations involved in the development and approval of Internet\r\n   Standards includes the IETF, the IESG, the IAB, all IETF Working\r\n   Groups, and the Internet Society Board of Trustees.\r\n\r\n   For IETF and Working Group meetings announcements shall be made by\r\n   electronic mail to the IETF Announce mailing list and shall be made\r\n   sufficiently far in advance of the activity to permit all interested\r\n   parties to effectively participate.  The announcement shall contain\r\n   (or provide pointers to) all of the information that is necessary to\r\n   support the participation of any interested individual.  In the case Expand\r\nof a meeting, for example, the announcement shall include an agenda\r\nthat specifies the standards-related issues that will be discussed.\r\n\r\nEID 6661 (Verified) is as follows:\r\n\r\nSection: 8\r\n\r\nOriginal Text:\r\n\r\nIn the case\r\nof a meeting, for example, the announcement shall include an agenda\r\nthat specifies the standards- related issues that will be discussed.\r\n\r\nCorrected Text:\r\n\r\nIn the case\r\nof a meeting, for example, the announcement shall include an agenda\r\nthat specifies the standards-related issues that will be discussed.\r\n\r\nNotes:\r\n\r\nEither the hyphen or the space could be removed. I removed the space since the next sentence says “standards-related”.\r\n\r\n\r\n   The formal record of an organization's standards-related activity\r\n   shall include at least the following:\r\n\r\n   o  the charter of the organization (or a defining document equivalent\r\n      to a charter);\r\n   o  complete and accurate minutes of meetings;\r\n   o  the archives of Working Group electronic mail mailing lists;  and\r\n   o  all written contributions from participants that pertain to the\r\n      organization's standards-related activity.\r\n\r\n   As a practical matter, the formal record of all Internet Standards\r\n   Process activities is maintained by the IETF Secretariat, and is the\r\n   responsibility of the IETF Secretariat except that each IETF Working\r\n   Group is expected to maintain their own email list archive and must\r\n   make a best effort to ensure that all traffic is captured and\r\n   included in the archives.  Also, the Working Group chair is\r\n   responsible for providing the IETF Secretariat with complete and\r\n   accurate minutes of all Working Group meetings.  Internet-Drafts that\r\n\r\n   have been removed (for any reason) from the Internet-Drafts\r\n   directories shall be archived by the IETF Secretariat for the sole\r\n   purpose of preserving an historical record of Internet standards\r\n   activity and thus are not retrievable except in special\r\n   circumstances.\r\n\r\n9.  VARYING THE PROCESS\r\n\r\n   This document, which sets out the rules and procedures by which\r\n   Internet Standards and related documents are made is itself a product\r\n   of the Internet Standards Process (as a BCP, as described in section\r\n   5). It replaces a previous version, and in time, is likely itself to\r\n   be replaced.\r\n\r\n   While, when published, this document represents the community's view\r\n   of the proper and correct process to follow, and requirements to be\r\n   met, to allow for the best possible Internet Standards and BCPs, it\r\n   cannot be assumed that this will always remain the case. From time to\r\n   time there may be a desire to update it, by replacing it with a new\r\n   version.  Updating this document uses the same open procedures as are\r\n   used for any other BCP.\r\n\r\n   In addition, there may be situations where following the procedures\r\n   leads to a deadlock about a specific specification, or there may be\r\n   situations where the procedures provide no guidance.  In these cases\r\n   it may be appropriate to invoke the variance procedure described\r\n   below.\r\n\r\n9.1 The Variance Procedure\r\n\r\n   Upon the recommendation of the responsible IETF Working Group (or, if\r\n   no Working Group is constituted, upon the recommendation of an ad hoc\r\n   committee), the IESG may enter a particular specification into, or\r\n   advance it within, the standards track even though some of the\r\n   requirements of this document have not or will not be met. The IESG\r\n   may approve such a variance, however, only if it first determines\r\n   that the likely benefits to the Internet community are likely to\r\n   outweigh any costs to the Internet community that result from\r\n   noncompliance with the requirements in this document.  In exercising\r\n   this discretion, the IESG shall at least consider (a) the technical\r",
    "notes": "mpn publisher entrs",
    "submit_date": "2022-11-13",
    "submitter_name": "William",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
