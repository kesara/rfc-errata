[
  {
    "errata_id": "2621",
    "doc-id": "RFC6030",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "10.2",
    "orig_text": "The <Usage> element MAY be present, but no attribute of the \r\n<Usage> element is required.",
    "correct_text": "The <AlgorithmParameters> element MAY be present, but no attribute \r\nof the <AlgorithmParameters> element is required.",
    "notes": "The <Usage> field was renamed between draft -02 and -03 but this section was not updated.",
    "submit_date": "2010-11-10",
    "submitter_name": "Simon Josefsson",
    "verifier_id": "2",
    "verifier_name": "Tim Polk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2759",
    "doc-id": "RFC6030",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "11",
    "orig_text": "     <xs:complexType name=\"AlgorithmParametersType\">\r\n          <xs:choice>\r\n\r\n\r\n\r\nHoyer, et al.                Standards Track                   [Page 42]\r\n\f\r\nRFC 6030         Portable Symmetric Key Container (PSKC)    October 2010\r\n\r\n\r\n               <xs:element name=\"Suite\" type=\"xs:string\" minOccurs=\"0\"/>\r\n               <xs:element name=\"ChallengeFormat\" minOccurs=\"0\">\r\n                    <xs:complexType>\r\n                         <xs:attribute name=\"Encoding\"\r\n                              type=\"pskc:ValueFormatType\"\r\n                                                      use=\"required\"/>\r\n                         <xs:attribute name=\"Min\"\r\n                              type=\"xs:unsignedInt\" use=\"required\"/>\r\n                         <xs:attribute name=\"Max\"\r\n                              type=\"xs:unsignedInt\" use=\"required\"/>\r\n                         <xs:attribute name=\"CheckDigits\"\r\n                              type=\"xs:boolean\" default=\"false\"/>\r\n                    </xs:complexType>\r\n               </xs:element>\r\n               <xs:element name=\"ResponseFormat\" minOccurs=\"0\">\r\n                    <xs:complexType>\r\n                         <xs:attribute name=\"Encoding\"\r\n                              type=\"pskc:ValueFormatType\"\r\n                                                      use=\"required\"/>\r\n                         <xs:attribute name=\"Length\"\r\n                              type=\"xs:unsignedInt\" use=\"required\"/>\r\n                         <xs:attribute name=\"CheckDigits\"\r\n                              type=\"xs:boolean\" default=\"false\"/>\r\n                    </xs:complexType>\r\n               </xs:element>\r\n               <xs:element name=\"Extensions\"\r\n                    type=\"pskc:ExtensionsType\" minOccurs=\"0\"\r\n                    maxOccurs=\"unbounded\"/>\r\n          </xs:choice>\r\n     </xs:complexType>",
    "correct_text": "     <xs:complexType name=\"AlgorithmParametersType\">\r\n          <xs:sequence>\r\n\r\n\r\n\r\nHoyer, et al.                Standards Track                   [Page 42]\r\n\f\r\nRFC 6030         Portable Symmetric Key Container (PSKC)    October 2010\r\n\r\n\r\n               <xs:element name=\"Suite\" type=\"xs:string\" minOccurs=\"0\"/>\r\n               <xs:element name=\"ChallengeFormat\" minOccurs=\"0\">\r\n                    <xs:complexType>\r\n                         <xs:attribute name=\"Encoding\"\r\n                              type=\"pskc:ValueFormatType\"\r\n                                                      use=\"required\"/>\r\n                         <xs:attribute name=\"Min\"\r\n                              type=\"xs:unsignedInt\" use=\"required\"/>\r\n                         <xs:attribute name=\"Max\"\r\n                              type=\"xs:unsignedInt\" use=\"required\"/>\r\n                         <xs:attribute name=\"CheckDigits\"\r\n                              type=\"xs:boolean\" default=\"false\"/>\r\n                    </xs:complexType>\r\n               </xs:element>\r\n               <xs:element name=\"ResponseFormat\" minOccurs=\"0\">\r\n                    <xs:complexType>\r\n                         <xs:attribute name=\"Encoding\"\r\n                              type=\"pskc:ValueFormatType\"\r\n                                                      use=\"required\"/>\r\n                         <xs:attribute name=\"Length\"\r\n                              type=\"xs:unsignedInt\" use=\"required\"/>\r\n                         <xs:attribute name=\"CheckDigits\"\r\n                              type=\"xs:boolean\" default=\"false\"/>\r\n                    </xs:complexType>\r\n               </xs:element>\r\n               <xs:element name=\"Extensions\"\r\n                    type=\"pskc:ExtensionsType\" minOccurs=\"0\"\r\n                    maxOccurs=\"unbounded\"/>\r\n          </xs:sequence>\r\n     </xs:complexType>",
    "notes": "The AlgorithmParameter should have a sequqnce of subelements not a choice as for Challenge/Response algorithms it MUST be possible to define both the ChallengeFormat and the Response Format at the same time. Currently the schema uses <xs:choice> which allows either <ChallengeFormat> or <ResponseFormat> but not both.\r\nThis correction will bring it in line with intended description in Section 4.3.4",
    "submit_date": "2011-03-30",
    "submitter_name": "Philip Hoyer",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3364",
    "doc-id": "RFC6030",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "3",
    "orig_text": "      ----------------        ----------------\r\n      | KeyPackage   |    0..1| DeviceInfo   |\r\n      |--------------|--------|--------------|\r\n      |              |--      | SerialNumber |\r\n      ----------------  |     | Manufacturer |\r\n              |         |     | ....         |\r\n              |         |     ----------------\r\n ",
    "correct_text": "      ----------------        ----------------\r\n      | KeyPackage   |    0..1| DeviceInfo   |\r\n      |--------------|--------|--------------|\r\n      |              |--      | SerialNo     |\r\n      ----------------  |     | Manufacturer |\r\n              |         |     | ....         |\r\n              |         |     ----------------\r\n ",
    "notes": "Figure 1 mentions a DeviceInfo field called \"SerialNumber\" however it should be \"SerialNo\".",
    "submit_date": "2012-09-25",
    "submitter_name": "Simon Josefsson",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3369",
    "doc-id": "RFC6030",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "   <Manufacturer>:  This element indicates the manufacturer of the\r\n      device.  Values for the <Manufacturer> element MUST be taken from\r\n      either [OATHMAN] prefixes (i.e., the left column) or from the IANA\r\n      Private Enterprise Number Registry [IANAPENREG], using the\r\n      Organization value.  When the value is taken from [OATHMAN],\r\n      \"oath.\"  MUST be prepended to the value (e.g., \"oath.<prefix value\r\n      from [OATHMAN]>\").  When the value is taken from [IANAPENREG],\r\n      \"iana.\"  MUST be prepended to the value (e.g., \"iana.<Organization\r\n      value from [IANAPENREG]>\").\r\n",
    "correct_text": "   <Manufacturer>:  This element indicates the manufacturer of the\r\n      device.  Values for the <Manufacturer> element MAY be taken from\r\n      either [OATHMAN] prefixes (i.e., the left column) or from the IANA\r\n      Private Enterprise Number Registry [IANAPENREG], using the\r\n      Organization value.  When the value is taken from [OATHMAN],\r\n      \"oath.\"  MUST be prepended to the value (e.g., \"oath.<prefix value\r\n      from [OATHMAN]>\").  When the value is taken from [IANAPENREG],\r\n      \"iana.\"  MUST be prepended to the value (e.g., \"iana.<Organization\r\n      value from [IANAPENREG]>\").\r\n",
    "notes": "The only thing changed is relaxing MUST to MAY.\r\n\r\nThe requirement that manufacturer strings begin with \"oath.\" and \"iana.\" is often ignored by implementations/deployments.  Further, none of the examples throughout the document conform to the syntax.  While we could regard these as implementation/deployment and editorial document bugs, I would argue that we could just as well relax the technical requirement because there appears to be no harm in allowing free-form text.  This is what people appear to be using out there already.\r\n\r\nExamples of non-conforming <Manufacturer> fields out there:\r\nhttp://tools.ietf.org/html/draft-hoyer-keyprov-pskc-algorithm-profiles-01\r\nhttp://download.gooze.eu/otp/seeds/20120919-test001-4282.xml\n --VERIFIER NOTES-- \nChanging the requirement from MUST to MAY is not appropriate to do in an errata.  Please produce a draft and we can see whether your change is acceptable to the rest of the IETF.   ",
    "submit_date": "2012-10-03",
    "submitter_name": "Simon Josefsson",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3370",
    "doc-id": "RFC6030",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "6.3",
    "orig_text": "       id=\"KC0001\"\r\n",
    "correct_text": "       Id=\"KC0001\"\r\n",
    "notes": "The PSKC data in figure 8 does not pass a XML Schema validation -- the reason is a typo in the Id attribute name.",
    "submit_date": "2012-10-03",
    "submitter_name": "Simon Josefsson",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3418",
    "doc-id": "RFC6030",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7 and 11",
    "orig_text": "Section 7:\r\n       <Signature>\r\n\r\nSection 11:\r\n               <xs:element name=\"Signature\"\r\n                    type=\"ds:SignatureType\" minOccurs=\"0\"/>\r\n",
    "correct_text": "Section 7:\r\n       <ds:Signature>\r\n\r\nSection 11:\r\n               <xs:element ref=\"ds:Signature\" minOccurs=\"0\"/>\r\n",
    "notes": "It seems the Signature element is in the wrong namespace, making PSKC incompatible with the XMLDsig specification.\r\n\r\nThere is a thread on this on the XMLSec mailing list:\r\n\r\nhttp://thread.gmane.org/gmane.text.xml.xmlsec/4178\r\n\r\nBoth Aleksey Sanin (author of the XMLSec library) and G. Ken Holman (XML\r\nexpert) appear to believe this is an error in the XML schema for PSKC:\r\n\r\nhttp://thread.gmane.org/gmane.text.xml.xmlsec/4178/focus=4181\r\nhttp://thread.gmane.org/gmane.text.xml.xmlsec/4178/focus=4185\r\n\r\nThis was brought up on the keyprov mailing list:\r\n\r\nhttp://thread.gmane.org/gmane.ietf.keyprov/1011\r\n\r\n/Simon",
    "submit_date": "2012-11-26",
    "submitter_name": "Simon Josefsson",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3811",
    "doc-id": "RFC6030",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.1.",
    "orig_text": "All the elements listed above (and those defined in the future)\r\n      obey a simple structure in that they MUST support child elements\r\n      to convey the data value in either plaintext or encrypted format:\r\n\r\n      Plaintext:  The <PlainValue> element carries a plaintext value\r\n         that is typed, for example, to xs:integer.\r\n\r\n      Encrypted:  The <EncryptedValue> element carries an encrypted\r\n         value.",
    "correct_text": null,
    "notes": "In case that <Counter>, <Time>, <TimeInterval> or <TimeDrift> are encrypted in the PSKC file, the standard doesn't say anything about how to interpret this encrypted data.\r\nAfter decrypting those values we have byte array. \r\n\r\nExample: \r\n   Counter plain text value: 10000 decimal\r\n\r\n   In the case that this value is encrypted and later decrypted what should we expect?\r\n   Byte content 0x27 0x10 or 0x01 0x00 0x00 or something else?\r\n\r\n   1. Byte content 0x27 0x10 is interpreted as 10000 decimal if this bytes are interpreted as binary data (Big endian). \r\n   2. Byte content 0x01 0x00 0x00 is interpreted as 10000 decimal if this bytes are interpreted as hex data (Big endian).\r\n      Each hex digit will be mapped to a resulting decimal digit. From my point of view this way is a bit confusing.\r\n       \r\nMy proposal to solve this issue is described in 1.",
    "submit_date": "2013-11-25",
    "submitter_name": "Ivan Micanovic",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "4643",
    "doc-id": "RFC6030",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.3.4",
    "orig_text": "...\r\n      'CheckDigit':  This attribute indicates whether a device needs to\r\n         check the appended Luhn check digit, as defined in\r\n         [ISOIEC7812], contained in a challenge.\r\n...\r\n      'CheckDigit':  This attribute indicates whether the device needs\r\n         to append a Luhn check digit, as defined in [ISOIEC7812], to\r\n         the response.\r\n...",
    "correct_text": "...\r\n      'CheckDigits':  This attribute indicates whether a device needs to\r\n         check the appended Luhn check digit, as defined in\r\n         [ISOIEC7812], contained in a challenge.\r\n...\r\n      'CheckDigits':  This attribute indicates whether the device needs\r\n         to append a Luhn check digit, as defined in [ISOIEC7812], to\r\n         the response.\r\n...",
    "notes": "The text notes the singular CheckDigit while the schema specifies the plural CheckDigits. Either the text or the schema should be changed. Some implementations in the while seem to use the plural form.",
    "submit_date": "2016-03-19",
    "submitter_name": "Arthur de Jong",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5034",
    "doc-id": "RFC6030",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "6.1",
    "orig_text": " Camellia128    | http://www.w3.org/2001/04/xmldsig-more#camellia128\r\n Camellia192    | http://www.w3.org/2001/04/xmldsig-more#camellia192\r\n Camellia256    | http://www.w3.org/2001/04/xmldsig-more#camellia256",
    "correct_text": " Camellia128-CBC| http://www.w3.org/2001/04/xmldsig-more#camellia128-cbc\r\n Camellia192-CBC| http://www.w3.org/2001/04/xmldsig-more#camellia192-cbc\r\n Camellia256-CBC| http://www.w3.org/2001/04/xmldsig-more#camellia256-cbc",
    "notes": "The original URIs are not defined in RFC 4051 but the URIs with -cbc appended are which and those are what was probably meant.",
    "submit_date": "2017-06-08",
    "submitter_name": "Arthur de Jong",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "7006",
    "doc-id": "RFC6030",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "4.1",
    "orig_text": "      ValueMAC:  The <ValueMAC> element is populated with a Message\r\n         Authentication Code (MAC) generated from the encrypted value in\r\n         case the encryption algorithm does not support integrity\r\n         checks.  The example shown in Figure 2 illustrates the usage of\r\n         the <Data> element with two child elements, namely <Secret> and\r\n         <Counter>.  Both elements carry a plaintext value within the\r\n         <PlainValue> child element.\r\n",
    "correct_text": "      ValueMAC:  The <ValueMAC> element is populated with a Message\r\n         Authentication Code (MAC) generated from the encrypted value in\r\n         case the encryption algorithm does not support integrity\r\n         checks.\r\n\r\n      The example shown in Figure 2 illustrates the usage of the <Data>\r\n      element with one child element <Secret>.  This element carries a\r\n      plaintext value within the <PlainValue> child element.\r\n",
    "notes": "There are two issues:\r\n- the comment about the example should be in a standalone paragraph and not as a continuation of the explanation for ValueMAC\r\n-  the example in Figure 2 does *not* include <Counter>. The correction might be done to Figure 2, adding an XML fragment for <Counter> inside <Data>.",
    "submit_date": "2022-06-26",
    "submitter_name": "Flavio Poletti",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
