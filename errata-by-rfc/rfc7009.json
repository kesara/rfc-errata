[
  {
    "errata_id": "6663",
    "doc-id": "RFC7009",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "2.1",
    "orig_text": "The client constructs the request by including the following\r\n   parameters using the \"application/x-www-form-urlencoded\" format in\r\n   the HTTP request entity-body:\r\n\r\n   token   REQUIRED.  The token that the client wants to get revoked.\r\n\r\n   token_type_hint  OPTIONAL.  A hint about the type of the token\r\n           submitted for revocation.  Clients MAY pass this parameter in\r\n           order to help the authorization server to optimize the token\r\n           lookup.  If the server is unable to locate the token using\r\n           the given hint, it MUST extend its search across all of its\r\n           supported token types.  An authorization server MAY ignore\r\n           this parameter, particularly if it is able to detect the\r\n           token type automatically.  This specification defines two\r\n           such values:\r\n\r\n           * access_token: An access token as defined in [RFC6749],\r\n             Section 1.4\r\n\r\n           * refresh_token: A refresh token as defined in [RFC6749],\r\n             Section 1.5\r\n\r\n           Specific implementations, profiles, and extensions of this\r\n           specification MAY define other values for this parameter\r\n           using the registry defined in Section 4.1.2.\r\n\r\n   The client also includes its authentication credentials as described\r\n   in Section 2.3. of [RFC6749].\r\n\r\n   For example, a client may request the revocation of a refresh token\r\n   with the following request:\r\n\r\n     POST /revoke HTTP/1.1\r\n     Host: server.example.com\r\n     Content-Type: application/x-www-form-urlencoded\r\n     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\r\n\r\n     token=45ghiukldjahdnhzdauz&token_type_hint=refresh_token\r\n\r\n   The authorization server first validates the client credentials (in\r\n   case of a confidential client) and then verifies whether the token\r\n   was issued to the client making the revocation request.  If this\r\n   validation fails, the request is refused and the client is informed\r\n   of the error by the authorization server as described below.",
    "correct_text": "The client calls the revocation endpoint using an HTTP\r\n   POST [RFC7231] request with the following parameters sent as\r\n   \"application/x-www-form-urlencoded\" data in the request body:\r\n\r\n   token   REQUIRED.  The token that the client wants to get revoked.\r\n\r\n   token_type_hint  OPTIONAL.  A hint about the type of the token\r\n           submitted for revocation.  Clients MAY pass this parameter in\r\n           order to help the authorization server to optimize the token\r\n           lookup.  If the server is unable to locate the token using\r\n           the given hint, it MUST extend its search across all of its\r\n           supported token types.  An authorization server MAY ignore\r\n           this parameter, particularly if it is able to detect the\r\n           token type automatically.  This specification defines two\r\n           such values:\r\n\r\n           * access_token: An access token as defined in [RFC6749],\r\n             Section 1.4\r\n\r\n           * refresh_token: A refresh token as defined in [RFC6749],\r\n             Section 1.5\r\n\r\n           Specific implementations, profiles, and extensions of this\r\n           specification MAY define other values for this parameter\r\n           using the registry defined in Section 4.1.2.\r\n\r\n   The client MUST also include in the request, the access token it received \r\n   from the authorization server. It must do so in the same way as it  would  \r\n   when accessing a protected resource, as describe in [RFC6749], Section 7.\r\n\r\n   The following is a non-normative example request in which the client uses \r\n   its access token to revoke the associated refresh token:\r\n\r\n     POST /revoke HTTP/1.1\r\n     Host: server.example.com\r\n     Content-Type: application/x-www-form-urlencoded\r\n     Authorization: Bearer czZCaGRSa3F0MzpnWDFmQmF0M2JW\r\n\r\n     token=45ghiukldjahdnhzdauz&token_type_hint=refresh_token\r\n\r\n   The following is a non-normative example request in which the client uses \r\n   its access token to revoke the same access token:\r\n\r\n     POST /revoke HTTP/1.1\r\n     Host: server.example.com\r\n     Content-Type: application/x-www-form-urlencoded\r\n     Authorization: Bearer czZCaGRSa3F0MzpnWDFmQmF0M2JW\r\n\r\n     token=czZCaGRSa3F0MzpnWDFmQmF0M2JW&token_type_hint=access_token\r\n\r\n   The authorization server MUST validate the access token used by the        \r\n   client to authorize its call to the revocation endpoint, including \r\n   ensuring that it is not expired or revoked. \r\n   Additionally, the authorization server MUST also validate whether the\r\n   access token used for authorization is part of the same grant  as the \r\n   token being revoked. If validation fails, the request is  refused and \r\n   the client is informed of the error by the authorization server. \r\n   In the case of a bearer token, the authorization server SHOULD respond  \r\n   with an HTTP 401 code as described in OAuth 2.0 Bearer Token Usage \r\n   [RFC6750], Section 3. \r\n   Errors based on other types of tokens are beyond the scope of this \r\n   specification.\r\n    ",
    "notes": "It appears as though the authors of RFC7009 have failed to consider that requests to revoke are likely to come from non-confidential clients and such, would lack authentication credentials. Regardless of the type of client however, authentication should not be required. The OAuth 2.0 specification (RFC6749) does not specify verifying that the access token belongs to the client accessing protected resources, of which revocation is one. It is the role of the access token alone to signify authorization required to make requests to protected resources. If this is an issue for revocation, then it is an issue for all protected resources and counter measures may be proposed in a separate RFC rather than broadening the scope of this particular RFC. As per the original text itself, \"This specification in general does not intend to provide countermeasures against token theft and abuse.\" Additionally, \"If an attacker is able to successfully guess a public client's client_id and one of their tokens, or a private client's credentials and one of their tokens, they could do much worse damage by using the token elsewhere than by revoking it.  If they chose to revoke the token, the legitimate client will lose its authorization grant and will need to prompt the user again.  No further damage is done and the guessed token is now worthless.\"\r\nNote that the client_id is not meant to be private information to begin with, so relying on an attacker \"guessing\" it should not be seen as a security countermeasure. This section of RFC7009 will be referenced in a subsequent errata.",
    "submit_date": "2021-08-22",
    "submitter_name": "Ashvin Narayanan",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
