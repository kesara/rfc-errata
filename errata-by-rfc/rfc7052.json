[
  {
    "errata_id": 4235,
    "doc-id": "RFC7052",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 7,
    "orig_text": "       Example 3: As an example where LCAF is used, suppose\r\n       that the IPv4 EID-Prefix stored is 192.0.2.0/24 and it\r\n       is part of LISP Instance ID 101.  In this case, the values\r\n       within lispMapCacheEntry would be:\r\n\r\n          lispMapCacheEidLength  = 11\r\n          lispMapCacheEid = 16387, 7, 2, 101, 1, 192.0.2.0, 24\r\n          ... [skip] ...\r\n\r\n       where 11 is the total length in octets of the next object\r\n       (lispMapCacheEID of type LispAddressType).  Then, the value\r\n       16387 indicates the LCAF AF (see the\r\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB), the value 7 indicates that\r\n       the LCAF AF is 7 octets in length in this case, 2 indicates\r\n       that LCAF Type 2 encoding is used (see the LCAF document), 101\r\n       gives the Instance ID, 1 gives the AFI (per the\r\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB) for an IPv4 address, 192.0.2.0\r\n       is the IPv4 address, and 24 is the mask-length in bits.  Note\r\n       that the lispMapCacheEidLength value of 11 octets is used to\r\n       compute the length of the last field in lispMapCacheEid to be 1\r\n       octet -- as computed by 11 - (2 + 1 + 1 + 1 + 1 + 4) = 1.\r\n",
    "correct_text": "       Example 3: As an example where LCAF is used, suppose\r\n       that the IPv4 EID-Prefix stored is 192.0.2.0/24 and it\r\n       is part of LISP Instance ID 101.  In this case, the values\r\n       within lispMapCacheEntry would be:\r\n\r\n          lispMapCacheEidLength  = 14\r\n          lispMapCacheEid = 16387, 10, 2, 101, 1, 192.0.2.0, 24\r\n          ... [skip] ...\r\n\r\n       where 14 is the total length in octets of the next object\r\n       (lispMapCacheEID of type LispAddressType).  Then, the value\r\n       16387 indicates the LCAF AF (see the\r\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB), the value 10 indicates that\r\n       the LCAF AF is 10 octets in length in this case, 2 indicates\r\n       that LCAF Type 2 encoding is used (see the LCAF document), 101\r\n       gives the Instance ID, 1 gives the AFI (per the\r\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB) for an IPv4 address, 192.0.2.0\r\n       is the IPv4 address, and 24 is the mask-length in bits.  Note\r\n       that the lispMapCacheEidLength value of 14 octets is used to\r\n       compute the length of the last field in lispMapCacheEid to be 1\r\n       octet -- as computed by 14 - (2 + 1 + 1 + 3 + 2 + 4) = 1.\r\n",
    "notes": "The Instance ID within the type 2 LCAF is 24 bits and requires 3 octets (incorrectly calculated as 1)\r\nThe AFI within the LCAF type 2 requires 2 octets (incorrectly calculated as 1)",
    "submit_date": "2015-01-17",
    "submitter_name": "Isidor Kouvelas",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4256,
    "doc-id": "RFC7052",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 7,
    "orig_text": "    REFERENCE\r\n        \"RFC 6830, Section 14.2 and\r\n         LISP Canonical Address Format (LCAF), Work in Progress,\r\n         March 2013.\"\r\n    SYNTAX OCTET STRING (SIZE (5..39))\r\n",
    "correct_text": "    REFERENCE\r\n        \"RFC 6830, Section 14.2 and\r\n         LISP Canonical Address Format (LCAF), Work in Progress,\r\n         March 2013.\"\r\n    SYNTAX OCTET STRING (SIZE (0..39))\r\n",
    "notes": "The minimum octet string length of 5 specified for the LispAddressType is incorrect. The smallest non-empty address is an IPv4 address that is not using the LCAF format to include an instance ID. This requires 8 octets (see example 1 above keeping in mind that the AFI requires 2 octets). However, in many places in the MIB definition the LispAddressType is used as the type for attributes where “unspecified” is a valid return. For example in lispEidRegistrationLastRegisterSender, an EID prefix that is configured on a Map-Server may not have any active registrations. To encode the absence of an address the minimum length of zero should be allowed.",
    "submit_date": "2015-02-04",
    "submitter_name": "Isidor Kouvelas",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 4304,
    "doc-id": "RFC7052",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 7,
    "orig_text": "   lispEidRegistrationLastRegisterSenderLength OBJECT-TYPE\r\n       SYNTAX     Integer32 (5..39)\r\n       MAX-ACCESS read-only\r\n",
    "correct_text": "   lispEidRegistrationLastRegisterSenderLength OBJECT-TYPE\r\n       SYNTAX     Integer32 (0..39)\r\n       MAX-ACCESS read-only\r\n",
    "notes": "The lispEidRegistrationLastRegisterSender is the only use of the LispAddressType in a readable attribute. In order to be able to encode an unspecified address, the minimum length must be lowered to zero. For more information see errata 4256.",
    "submit_date": "2015-03-17",
    "submitter_name": "Isidor Kouvelas",
    "verifier_id": 131,
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  }
]
