[
  {
    "errata_id": 6197,
    "doc-id": "RFC7836",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": 3,
    "orig_text": "When a point on an elliptic curve is given to an input of a hash\r\nfunction, affine coordinates for short Weierstrass form are used (see\r\nSection 5): an x coordinate value is fed first, a y coordinate value\r\nis fed second, both in little-endian format.",
    "correct_text": "When a point on an elliptic curve is given to an input of a hash\r\nfunction, affine coordinates for short Weierstrass form are used (see\r\nSection 5): an x coordinate value is fed first, a y coordinate value\r\nis fed second, both in little-endian format. If the point to be fed\r\nto the hash function is zero point, the calculation MUST NOT be performed\r\nand an error SHOULD be reported on a protocol level.",
    "notes": "A new sentence added at the end of the paragraph explicitly defines the processing in case when the zero point is fed to the hash function.",
    "submit_date": "2020-06-03",
    "submitter_name": "Billy Brumley",
    "verifier_id": 157,
    "verifier_name": "Adrian Farrel",
    "update_date": "2020-07-01 03:41:39"
  },
  {
    "errata_id": 6198,
    "doc-id": "RFC7836",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "KEK_VKO (x, y, UKM) is calculated using the formulas:\r\n\r\n    KEK_VKO (x, y, UKM) = H_256 (K (x, y, UKM)),\r\n\r\n    K (x, y, UKM) = (m/q*UKM*x mod q)*(y*P),",
    "correct_text": "KEK_VKO (x, y, UKM) is calculated using the formulas:\r\n\r\n    KEK_VKO (x, y, UKM) = H_256 (K (x, y, UKM)),\r\n\r\n    K (x, y, UKM) = (m/q*(UKM*x mod q))*(y*P),",
    "notes": "For now the original text may be interpreted in the wrong way that both multiplications inside the brackets should be performed modulo q. However, multiplication by m/q must be a simple integer multiplication, without reduction modulo q, to eliminate small subgroup component of the input elliptic curve point. The proposed text modification clarifies the correct types and order of multiplication.",
    "submit_date": "2020-06-03",
    "submitter_name": "Billy Brumley",
    "verifier_id": 157,
    "verifier_name": "Adrian Farrel",
    "update_date": "2020-07-01 03:43:24"
  },
  {
    "errata_id": 6199,
    "doc-id": "RFC7836",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.3.2",
    "orig_text": "KEK_VKO (x, y, UKM) is calculated using the formulas:\r\n\r\n    KEK_VKO (x, y, UKM) = H_512 (K (x, y, UKM)),\r\n\r\n    K (x, y, UKM) = (m/q*UKM*x mod q)*(y*P),",
    "correct_text": "KEK_VKO (x, y, UKM) is calculated using the formulas:\r\n\r\n    KEK_VKO (x, y, UKM) = H_512 (K (x, y, UKM)),\r\n\r\n    K (x, y, UKM) = (m/q*(UKM*x mod q))*(y*P),",
    "notes": "For now the original text may be interpreted in the wrong way that both multiplications inside the brackets should be performed modulo q. However, multiplication by m/q must be a simple integer multiplication, without reduction modulo q, to eliminate small subgroup component of the input elliptic curve point. The proposed text modification clarifies the correct types and order of multiplication.",
    "submit_date": "2020-06-03",
    "submitter_name": "Billy Brumley",
    "verifier_id": 157,
    "verifier_name": "Adrian Farrel",
    "update_date": "2020-07-01 03:44:20"
  },
  {
    "errata_id": 6200,
    "doc-id": "RFC7836",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "where m and q are the parameters of an elliptic curve defined in the\r\nGOST R 34.10-2012 [GOST3411-2012] standard (m is an elliptic curve\r\npoints group order, q is an order of a cyclic subgroup), P is a non-\r\nzero point of the subgroup; P is defined by a protocol.",
    "correct_text": "where m and q are the parameters of an elliptic curve defined in the\r\nGOST R 34.10-2012 [GOST3411-2012] standard (m is an elliptic curve\r\npoints group order, q is an order of a cyclic subgroup), P is a non-\r\nzero point of the subgroup; P is defined by a specification of an elliptic\r\ncurve or by a protocol. Note that in most practical cases the private key\r\ny is unknown so the point (y*P) is just a pair of coordinates, which\r\nMUST be checked for satisfying the curve equation before calculating\r\nthe K value.",
    "notes": "The proposed text clarifies the P point specification ways and the need to check the public key of one side for belonging to the elliptic curve used by the opposite side.",
    "submit_date": "2020-06-03",
    "submitter_name": "Billy Brumley",
    "verifier_id": 157,
    "verifier_name": "Adrian Farrel",
    "update_date": "2020-07-01 03:45:16"
  },
  {
    "errata_id": 6201,
    "doc-id": "RFC7836",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.3.2",
    "orig_text": "where m and q are the parameters of an elliptic curve defined in the\r\nGOST R 34.10-2012 [GOST3411-2012] standard (m is an elliptic curve\r\npoints group order, q is an order of a cyclic subgroup), P is a non-\r\nzero point of the subgroup; P is defined by a protocol.",
    "correct_text": "where m and q are the parameters of an elliptic curve defined in the\r\nGOST R 34.10-2012 [GOST3411-2012] standard (m is an elliptic curve\r\npoints group order, q is an order of a cyclic subgroup), P is a non-\r\nzero point of the subgroup; P is defined by a specification of an elliptic\r\ncurve or by a protocol. Note that in most practical cases the private key\r\ny is unknown so the point (y*P) is just a pair of coordinates, which\r\nMUST be checked for satisfying the curve equation before calculating\r\nthe K value.",
    "notes": "The proposed text clarifies the P point specification ways and the need to check the public key of one side for belonging to the elliptic curve used by the opposite side.",
    "submit_date": "2020-06-03",
    "submitter_name": "Billy Brumley",
    "verifier_id": 157,
    "verifier_name": "Adrian Farrel",
    "update_date": "2020-07-01 03:46:18"
  }
]
