[
  {
    "errata_id": 928,
    "doc-id": "RFC4872",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 14.1,
    "orig_text": "[[Within the explanations for the PROTECTION Object, on mid-page 32]]\r\n\r\nReserved: 5 bits",
    "correct_text": "Reserved: 6 bits",
    "notes": "See the artwork of the object on page 31 and count the bits.\r\n\r\nfrom pending",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 929,
    "doc-id": "RFC4872",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 15.1,
    "orig_text": "   The primary path route is specified via the PRIMARY_PATH_ROUTE object\r\n   (PPRO).  The Primary Path Route Class Number (Class-Num) of form\r\n   0bbbbbbb 38.",
    "correct_text": "   The primary path route is specified via the PRIMARY_PATH_ROUTE object\r\n   (PPRO).  The Primary Path Route Class Number (Class-Num) of form\r\n   0bbbbbbb is 38.\r\n       \r\nor even:\r\n\r\n   The primary path route is specified via the PRIMARY_PATH_ROUTE object\r\n   (PPRO).  The Primary Path Route Class Number (Class-Num) of form\r\n   0bbbbbbb assigned by IANA is 38.",
    "notes": "Missing verb.\r\n\r\nfrom pending",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 2,
    "verifier_name": "RFC Editor",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 930,
    "doc-id": "RFC4872",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 15.1,
    "orig_text": "   The contents of a PRIMARY_PATH_ROUTE object are a series of\r\n   variable-length data items called subobjects (see Section 15.3).",
    "correct_text": "   The contents of a PRIMARY_PATH_ROUTE object are a series of\r\n   variable-length data items called subobjects (see Section 15.2).",
    "notes": "Referred to wrong section.  15.3 --> 15.2\r\n\r\nfrom pending",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 2,
    "verifier_name": "RFC Editor",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 931,
    "doc-id": "RFC4872",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 15.2,
    "orig_text": "   An empty PPRO with no subobjects is considered illegal.  If there is\r\n   no first subobject, the corresponding Path message is also in error,\r\n   and the receiving node SHOULD return a PathErr message with the new\r\n   error code/sub-code \"Routing Problem/Bad PRIMARY_PATH_ROUTE object\".",
    "correct_text": "   An empty PPRO has no subobjects and is considered illegal.  A node\r\n   receiving a Path message containing an empty PPRO SHOULD return a\r\n   PathErr message with the new error code/sub-code \"Routing Problem/\r\n   Bad PRIMARY_PATH_ROUTE object\".",
    "notes": "The original problem report said...\r\n\r\n   According to the text, PPROs are only admitted in Path messages.\r\n   PPROs \"with no first subobject\" carry no subobjects at all.\r\n   It is unclear why the text tries to distinguish these 'too cases'\r\n   and uses the word, \"also\", in the second sentence.\r\n\r\n   Something significant might have been lost in the text,\r\n   which cannot be concluded from the context.\r\n   In this case, please supply the missing clues.\r\n   Otherwise, the RFC should read unambiguously as supplied above.\r\n\r\n...and proposed the text...\r\n\r\n   An empty PPRO with no subobjects is considered illegal.  A node\r\n   receiving an empty PPRO SHOULD return a PathErr message with the new\r\n   error code/sub-code \"Routing Problem/Bad PRIMARY_PATH_ROUTE object\".\r\n\r\nThis proposal is rejected in favor of the corrected text because it lost some of the meaning.",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 932,
    "doc-id": "RFC4872",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 16,
    "orig_text": "   The ASSOCIATION object is used to associate LSPs with each other.",
    "correct_text": "[not submitted]",
    "notes": "The second paragraph of Section 16 is a literal restatement of the\r\nfirst sentence of the same section, on the same page (37).\r\nTherefore, the last text line of Section 16 (above), should be deleted.",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 933,
    "doc-id": "RFC4872",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 16.2,
    "orig_text": "   Similarly, terminating nodes receiving a Path message with a\r\n   PROTECTION object requiring association between working and recovery\r\n   LSPs MUST include an ASSOCIATION object.  Otherwise, such nodes MUST\r\n   return a PathErr message with the new error code/sub-code \"Routing\r\n   Problem/PROTECTION object not Applicable\".\r\n",
    "correct_text": "   Similarly, a Path message with a PROTECTION object requiring\r\n   association between working and recovery LSPs MUST include an\r\n   ASSOCIATION object.  Terminating nodes receiving such Path message\r\n   without an ASSOCIATION object MUST return a PathErr message with the\r\n   new error code/sub-code \"Routing Problem/PROTECTION object not\r\n   Applicable\".",
    "notes": "",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 934,
    "doc-id": "RFC4872",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": 17,
    "orig_text": "   This section presents the RSVP message-related formats as modified by\r\n   this document.  Unmodified RSVP message formats are not listed.",
    "correct_text": "   This section presents the RSVP-TE message-related formats as modified\r\n   by this document.  Unmodified RSVP-TE message formats are not listed.",
    "notes": "The first paragraph of Section 17 does not confine the scope of the\r\nspecification as it would be appropriate.\r\n\r\n'Classic' RSVP (RFC 2205) is neither covered nor affected by the subsequently specified message formats.\r\n\r\nfrom pending\n --VERIFIER NOTES-- \nCompare with Erratum 945.\r\n\r\nSame reason for rejection...\r\n\r\nAlthough it is true that there is some common distinction between \"classic\" RSVP and RSVP-TE, the IP protocol number is the same, and the message numbers (and registry) are the same. In essence, there is just one protocol with two uses. ",
    "submit_date": "2007-05-07",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 1935,
    "doc-id": "RFC4872",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": 15.3,
    "orig_text": "   - PRROs SHOULD be present in the Path message for the pre-\r\n     provisioning of the secondary protecting LSP to enable recovery\r\n     resource sharing between one or more secondary protecting LSPs (see\r\n     Section 15.4).",
    "correct_text": "   - PPROs SHOULD be present in the Path message for the pre-\r\n     provisioning of the secondary protecting LSP to enable recovery\r\n     resource sharing between one or more secondary protecting LSPs (see\r\n     Section 15.4).",
    "notes": "Second bullet point in the section.\r\ns/PRRO/PPRO/",
    "submit_date": "2009-10-29",
    "submitter_name": "Vishwas Manral",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3304,
    "doc-id": "RFC4872",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "11 & 12",
    "orig_text": "Section 11 says:\r\n\r\n\r\n   (Full) LSP rerouting will be initiated by the head-end node that has\r\n   either detected the LSP failure or received a Notify message and/or a\r\n   PathErr message with the new error code/sub-code \"Notify Error/LSP\r\n   Locally Failed\" for this LSP.  The new LSP resources can be\r\n   established using the make-before-break mechanism, where the new LSP\r\n   is set up before the old LSP is torn down.  This is done by using the\r\n   mechanisms of the SESSION_ATTRIBUTE object and the Shared-Explicit\r\n   (SE) reservation style (see [RFC3209]).  Both the new and old LSPs\r\n   can share resources at common nodes.\r\n\r\nSection 12 says:\r\n\r\n   [No text on reversion for (full) LSP Rerouting.]",
    "correct_text": "Section 11 should say:\r\n\r\n\r\n   (Full) LSP rerouting will be initiated by the head-end node that has\r\n   either detected the LSP failure or received a Notify message and/or a\r\n   PathErr message with the new error code/sub-code \"Notify Error/LSP\r\n   Locally Failed\" for this LSP.  The new LSP resources can be\r\n   established using the make-before-break mechanism, where the new LSP\r\n   is set up before the old LSP is torn down.  This is done by using the\r\n   mechanisms of the SESSION_ATTRIBUTE object and the Shared-Explicit\r\n   (SE) reservation style (see [RFC3209]).  Both the new and old LSPs\r\n   can share resources at common nodes.  The new LSP can be established\r\n   without tearing down the old LSP in case of reversion (see section 12).\r\n\r\nSection 12 should say:\r\n\r\n   For \"(full) LSP Rerouting\", reversion implies that the old LSP is not \r\n   torn down by the head-end node after the new LSP is established. For\r\n   reversion, the head-end node re-activates the old LSP after this has\r\n   recovered.\r\n\r\n",
    "notes": "Current text in RFC 4872 describes reversion in the cases of 1+1 bidirectional Protection, 1:N Protection with Extra Traffic and Rerouting Without Extra Traffic, however it has no description of reversion with (Full) LSP Rerouting.\r\nFor (full) LSP Rerouting, the description in Section 11 instead implies that the old LSP is torn down. This has led to some confusion as to whether reversion with (full) LSP Rerouting is allowed or not allowed by the RFC. We believe this was not intentional. The additions would make it clear that reversion can be supported with (Full) LSP Rerouting.\n --VERIFIER NOTES-- \nAfter discussions on the CCAMP mailing list it is the general opinion of the CCAMP WG that there is no technical issue and that if any WG participants wish to document how the current mechanisms can be used to support a particular usage/application that they are free to do so in a new informational draft.\r\n",
    "submit_date": "2012-07-31",
    "submitter_name": "Lyndon Ong",
    "verifier_id": 119,
    "verifier_name": "Adrian Farrel",
    "update_date": "2019-09-10 09:09:03"
  }
]
