[
  {
    "errata_id": 4908,
    "doc-id": "RFC7919",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": 4,
    "orig_text": "   If a compatible TLS server receives a Supported Groups extension from\r\n   a client that includes any FFDHE group (i.e., any codepoint between\r\n   256 and 511, inclusive, even if unknown to the server), and if none\r\n   of the client-proposed FFDHE groups are known and acceptable to the\r\n   server, then the server MUST NOT select an FFDHE cipher suite.  In\r\n   this case, the server SHOULD select an acceptable non-FFDHE cipher\r\n   suite from the client's offered list.  If the extension is present\r\n   with FFDHE groups, none of the client's offered groups are acceptable\r\n   by the server, and none of the client's proposed non-FFDHE cipher\r\n   suites are acceptable to the server, the server MUST end the\r\n   connection with a fatal TLS alert of type insufficient_security(71).",
    "correct_text": "   If a compatible TLS server receives a Supported Groups extension from\r\n   a client that includes any FFDHE group (i.e., any codepoint between\r\n   256 and 511, inclusive, even if unknown to the server), and if none\r\n   of the client-proposed FFDHE groups are known and acceptable to the\r\n   server, then the server MUST NOT select an FFDHE cipher suite.  In\r\n   this case, the server SHOULD select an acceptable non-FFDHE cipher\r\n   suite from the client's offered list.",
    "notes": "The text is overly prescriptive about the alert code that needs to used if there are no acceptable cipher suites available.  If the server is unable to pick a cipher suite, it can send a handshake_failure(40) alert, which this text would prohibit.  handshake_failure is at least equally valid in practice.\r\n\r\nThis eliminates the prescriptive text about the alert type.\r\n\r\nServers eliminate cipher suites from considerations in numerous ways.  Being able to definitively identify the reason as a (perceived) shortcoming in the strength of the offered security is actually quite challenging in practice.\r\n\r\nIt's true that insufficient_security is perhaps a more desirable code to use in this case, but it's not generically possible to determine that the server configuration is \"more secure\" than the combinations on offer by the client.  Consider also the possibility that it's the server that is insecure because it doesn't some of the options offered by the client.  That's a general criticism of the value of insufficient_security, but it should at least motivate why insufficient_security should never be mandated in this way.",
    "submit_date": "2017-01-16",
    "submitter_name": "Martin Thomson",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  }
]
