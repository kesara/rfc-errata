[
  {
    "errata_id": 2773,
    "doc-id": "RFC6090",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 2.2,
    "orig_text": "Sometimes an alternative called additive notation is used, \r\nin which a * b is denoted as a + b, and a^N is denoted as N * a. ",
    "correct_text": "Sometimes an alternative called additive notation is used, \r\nin which a * b is denoted as a + b, and a^N is denoted as Na. ",
    "notes": "The original text refers to Appendix E some sentences later: \r\n\"Appendix E elucidates the correspondence between the two notations.\"\r\n\r\nIn the Appendix E the notation \"Na\" is used, whereas the original text uses the notation \"N*a\".",
    "submit_date": "2011-04-11",
    "submitter_name": "Annie Yousar",
    "verifier_id": 2,
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 2774,
    "doc-id": "RFC6090",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 2.2,
    "orig_text": "By convention, a^0 is equal to the identity element for any a in G.\r\n",
    "correct_text": "By convention, a^0 is equal to the identity element and a^1 is equal to a itself for any a in G.\r\n",
    "notes": "Without this convention the explanation on the next page: \"... for any integers X and Y: a^(X+Y) = (a^X)*(a^Y) ...\" would be incomplete, as being undefined for the integers X=1 and/or Y=1.",
    "submit_date": "2011-04-11",
    "submitter_name": "Annie Yousar",
    "verifier_id": 124,
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 2775,
    "doc-id": "RFC6090",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 2.2,
    "orig_text": "Note that a^M is equal to g^(M modulo R) for any non-negative integer M.\r\n",
    "correct_text": "Note that a^M is equal to a^(M mod R) for any non-negative integer M.",
    "notes": "g is a typo. The result of the modulo operation is always denoted in the text by \"mod\". The notation \"modulo\" identifies the operation and not the result.",
    "submit_date": "2011-04-11",
    "submitter_name": "Annie Yousar",
    "verifier_id": 124,
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 2776,
    "doc-id": "RFC6090",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": 6.2,
    "orig_text": "The integer x shall be converted to an octet string S of length k as follows.  The string S shall satisfy\r\n                      k\r\n                y =  SUM  2^(8(k-i)) Si .\r\n                    i = 1\r\n",
    "correct_text": "The integer y shall be converted to an octet string S of length k as follows.  The string S shall satisfy\r\n                      k\r\n                y =  SUM  2^(8(k-i)) Si .\r\n                    i = 1\r\n\r\nNote that the conversion fails if y >= 2^(8*k).\r\n",
    "notes": "Typo corrected. The integer y can not be converted, if the octet string is to short.",
    "submit_date": "2011-04-11",
    "submitter_name": "Annie Yousar",
    "verifier_id": 124,
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 2777,
    "doc-id": "RFC6090",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": 7.2,
    "orig_text": "KT-I is mathematically and functionally equivalent to ECDSA, and can interoperate\r\nwith the IEEE [P1363] and ANSI [X9.62] standards for Elliptic Curve DSA (ECDSA)\r\nbased on fields of characteristic greater than three.  KT-I signatures can be\r\nverified using the ECDSA verification algorithm, and ECDSA signatures can be\r\nverified using the KT-I verification algorithm.\r\n",
    "correct_text": "For many hash functions KT-I is mathematically and functionally equivalent to\r\nECDSA, and can interoperate with the IEEE [P1363] and ANSI [X9.62] standards for\r\nElliptic Curve DSA (ECDSA) based on fields of characteristic greater than three.\r\nKT-I signatures can be verified using the ECDSA verification algorithm, and ECDSA\r\nsignatures can be verified using the KT-I verification algorithm (refer to\r\nSection 10.4).\r\n",
    "notes": "If the hash function h generates a bit string that has a bit length greater than the bit length of the elliptic curve group order, ECDSA as specified in P1363 uses a truncation of the hash value to the left-most bits. The KT-I algorithm does not use this truncation but reduces modulo q. Therefore ECDSA and KT-I with SHA-384 on the P-256 curve result in different signature values. Add a corresponding note in 10.4: The output of the hash used in KT signatures should truncated to the left-most bits if its bit-length is longer than the bit-length of the group order.",
    "submit_date": "2011-04-11",
    "submitter_name": "Annie Yousar",
    "verifier_id": 124,
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 3920,
    "doc-id": "RFC6090",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "Appendix F",
    "orig_text": "Then, the product P3=(X3,Y3,Z3) = P1 * P2 is given by:\r\n\r\n     if P1 is the point at infinity,\r\n        P3 = P2\r\n     else if P2 is the point at infinity,\r\n        P3 = P1\r\n     else if u is not equal to 0 but v is equal to 0,\r\n        P3 = (0,1,0)\r\n     else if both u and v are not equal to 0,\r\n        X3 = v * (Z2 * (Z1 * u^2 - 2 * X1 * v^2) - v^3)\r\n        Y3 = Z2 * (3 * X1 * u * v^2 - Y1 * v^3 - Z1 * u^3) + u * v^3\r\n        Z3 = v^3 * Z1 * Z2\r\n     else    // P2 equals P1, P3 = P1 * P1\r\n         w = 3 * X1^2 + a * Z1^2\r\n        X3 = 2 * Y1 * Z1 * (w^2 - 8 * X1 * Y1^2 * Z1)\r\n        Y3 = 4 * Y1^2 * Z1 * (3 * w * X1 - 2 * Y1^2 * Z1) - w^3\r\n        Z3 = 8 * (Y1 * Z1)^3",
    "correct_text": "Then, the product P3=(X3,Y3,Z3) = P1 * P2 is given by:\r\n\r\n     if P1 is the point at infinity,\r\n        P3 = P2\r\n     else if P2 is the point at infinity,\r\n        P3 = P1\r\n     else if P1=-P2 as projective points\r\n        P3 = (0,1,0)\r\n     else if P1 does not equal P2\r\n        X3 = v * (Z2 * (Z1 * u^2 - 2 * X1 * v^2) - v^3)\r\n        Y3 = Z2 * (3 * X1 * u * v^2 - Y1 * v^3 - Z1 * u^3) + u * v^3\r\n        Z3 = v^3 * Z1 * Z2\r\n     else    // P2 equals P1, P3 = P1 * P1\r\n         w = 3 * X1^2 + a * Z1^2\r\n        X3 = 2 * Y1 * Z1 * (w^2 - 8 * X1 * Y1^2 * Z1)\r\n        Y3 = 4 * Y1^2 * Z1 * (3 * w * X1 - 2 * Y1^2 * Z1) - w^3\r\n        Z3 = 8 * (Y1 * Z1)^3",
    "notes": "The original algorithm was wrong and produces incorrect answers. There are several fixes that could take place.",
    "submit_date": "2014-03-15",
    "submitter_name": "Watson Ladd",
    "verifier_id": 141,
    "verifier_name": "Kathleen Moriarty",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": 6329,
    "doc-id": "RFC6090",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "F.1.",
    "orig_text": "     if P is (@,@),\r\n        R = Q\r\n     else if Q is (@,@),\r\n        R = P\r\n     else if P is not equal to Q and x1 is equal to x2,\r\n        R = (@,@)\r\n     else if P is not equal to Q and x1 is not equal to x2,\r\n        x3 = ((y2-y1)/(x2-x1))^2 - x1 - x2 mod p and\r\n        y3 = (x1-x3)*(y2-y1)/(x2-x1) - y1 mod p\r\n     else if P is equal to Q and y1 is equal to 0,\r\n        R = (@,@)\r\n     else    // P is equal to Q and y1 is not equal to 0\r\n        x3 = ((3*x1^2 + a)/(2*y1))^2 - 2*x1 mod p and\r\n        y3 = (x1-x3)*(3*x1^2 + a)/(2*y1) - y mod p.\r\n",
    "correct_text": "     if P is (@,@),\r\n        R = Q\r\n     else if Q is (@,@),\r\n        R = P\r\n     else if P is not equal to Q and x1 is equal to x2,\r\n        R = (@,@)\r\n     else if P is not equal to Q and x1 is not equal to x2,\r\n        x3 = ((y2-y1)/(x2-x1))^2 - x1 - x2 mod p and\r\n        y3 = (x1-x3)*(y2-y1)/(x2-x1) - y1 mod p\r\n     else if P is equal to Q and y1 is equal to 0,\r\n        R = (@,@)\r\n     else    // P is equal to Q and y1 is not equal to 0\r\n        x3 = ((3*x1^2 + a)/(2*y1))^2 - 2*x1 mod p and\r\n        y3 = (x1-x3)*(3*x1^2 + a)/(2*y1) - y1 mod p.\r\n",
    "notes": "In the last case in the pseudocode, there's a typo. It should be \"y1\" mod p instead of \"y mod p\".",
    "submit_date": "2020-11-06",
    "submitter_name": "Yannik Klubertanz",
    "verifier_id": 99,
    "verifier_name": null,
    "update_date": null
  }
]
