[
  {
    "errata_id": "4888",
    "doc-id": "RFC5137",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "1.1",
    "orig_text": "So, even for the fairly simple cases of ASCII and standard built by\r\nextending ASCII, such as the ISO 8859 family, we have been living",
    "correct_text": "So, even for the fairly simple cases of ASCII and standards built by\r\nextending ASCII, such as the ISO 8859 family, we have been living",
    "notes": "Should be plural \"standards\"",
    "submit_date": "2016-12-14",
    "submitter_name": "Matthew Kerwin",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "5138",
    "doc-id": "RFC5137",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "A.3",
    "orig_text": "   EmbeddedUnicodeChar =   %x5C.7A 4HEXDIG ; starts with \"\\u\"",
    "correct_text": "   EmbeddedUnicodeChar =   %x5C.75 4HEXDIG ; starts with \"\\u\"",
    "notes": "Hex 7A is the character 'z', which doesn't match the comment.  \r\nAs far as I can tell, the Java language defines unicode characters to be \\u, like the comment says, and therefore the ABNF should be %x5C.75",
    "submit_date": "2017-10-04",
    "submitter_name": "Peter Smith",
    "verifier_id": "116",
    "verifier_name": "Alexey Melnikov",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "7234",
    "doc-id": "RFC5137",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "2",
    "orig_text": "      or more decoding steps to determine a Unicode code point that can\r\n      used to look up the character in a table.  That may be appropriate\r\n      in some cases where the goal is really to represent the UTF-8 form\r\n      but, in general, it just obscures desired information and makes\r\n      errors more likely and debugging harder.",
    "correct_text": "      or more decoding steps to determine a Unicode code point that can\r\n      be used to look up the character in a table.  That may be\r\n      appropriate in some cases where the goal is really to represent\r\n      the UTF-8 form but, in general, it just obscures desired\r\n      information and makes errors more likely and debugging harder.",
    "notes": "Missing \"be\".",
    "submit_date": "2022-11-02",
    "submitter_name": "Ivan Panchenko",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7235",
    "doc-id": "RFC5137",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "2",
    "orig_text": "   form used in Java (See Section 6.3).  While those forms are",
    "correct_text": "   form used in Java (see Section 6.3).  While those forms are",
    "notes": "The word \"see\" should not be capitalized here.",
    "submit_date": "2022-11-02",
    "submitter_name": "Ivan Panchenko",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "7236",
    "doc-id": "RFC5137",
    "errata_status_code": "Reported",
    "errata_type_code": "Editorial",
    "section": "5.1",
    "orig_text": "   start in \"\\u\" (See, e.g., Section 6.1, below>), but uses explicit",
    "correct_text": "   start in \"\\u\" (see, e.g., Section 6.1, below), but uses explicit",
    "notes": "The character \">\" should not be here and the word \"see\" should not be capitalized here.",
    "submit_date": "2022-11-02",
    "submitter_name": "Ivan Panchenko",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]
