[
  {
    "errata_id": "111",
    "doc-id": "RFC4366",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "",
    "orig_text": "(1)  imprecise syntax description for `ciphersuites`\r\n\r\nThis is an issue inherited from RFC 2246, RFC 3546, and RFC 4346;\r\nI already have reported this issue against RFC 4346 (and RFC 4347\r\nas well).\r\n\r\nSection 7.4.1.2 of RFC 4346, on page 37 of RFC 4346 defines the syntax:\r\n\r\n      uint8 CipherSuite[2];    /* Cryptographic suite selector */\r\n\r\nAccording to the specifications given in Section 4.3 of RFC 4346,\r\nvectors of type CipherSuite strictly must have byte lengths being\r\na multiple of 2.\r\nThis also means that the upper bound for a varaiable-length array\r\nof type CipherSuite should always be a multiple of 2.\r\n\r\nHence, the declaration in Section 2.1 of RFC 4366 (on page 5),\r\nan extended version of the basic declaration in Section 7.4.1.2\r\nof RFC 4346 (on top of page 38), stating\r\n\r\n         struct {\r\n             ProtocolVersion client_version;\r\n             Random random;\r\n             SessionID session_id;\r\n             CipherSuite cipher_suites<2..2^16-1>;\r\n             CompressionMethod compression_methods<1..2^8-1>;\r\n             Extension client_hello_extension_list<0..2^16-1>;\r\n         } ClientHello;\r\n\r\nshould better say:\r\n\r\n         struct {\r\n             ProtocolVersion client_version;\r\n             Random random;\r\n             SessionID session_id;\r\n|            CipherSuite cipher_suites<2..2^16-2>;\r\n             CompressionMethod compression_methods<1..2^8-1>;\r\n             Extension client_hello_extension_list<0..2^16-1>;\r\n         } ClientHello;\r\n\r\n\r\n(2)  incomplete semantics specified for \"server_name\" extension\r\n\r\nSection 3.1 of RFC 4366, on page 9, defines the \"server_name\"\r\nextension as containing a *list* of `ServerName` structures.\r\n\r\nOn page 10, the same section says:\r\n\r\n   It is RECOMMENDED that clients include an extension of type\r\n   \"server_name\" in the client hello whenever they locate a server by a\r\n   supported name type.\r\n\r\n   A server that receives a client hello containing the \"server_name\"\r\n   extension MAY use the information contained in the extension to guide\r\n   its selection of an appropriate certificate to return to the client,\r\n   and/or other aspects of security policy.  In this event, the server\r\n   SHALL include an extension of type \"server_name\" in the (extended)\r\n   server hello.  The \"extension_data\" field of this extension SHALL be\r\n   empty.\r\n\r\n   If the server understood the client hello extension but does not\r\n|  recognize the server name, it SHOULD send an \"unrecognized_name\"\r\n             ^^^\r\n   alert (which MAY be fatal).\r\n\r\nand on page 19, Section 4 defines the error alert,\r\n\r\n   -  \"unrecognized_name\": this alert is sent by servers that receive a\r\n|     server_name extension request, but do not recognize the server\r\n      name.  This message MAY be fatal.                   ^^^\r\n\r\nAll these clauses apparently state the semantics for the \"server_name\"\r\nextension solely in the case where the data field of the extension in\r\nthe (extended) Client Hello contains a *single* `ServerName` structure.\r\n\r\nIMHO, if the client, as allowed by the syntax, indeed specifies\r\nmultiple names in the \"server_name\" extension -- a feature that\r\nseems to be useful in certain scenarios --, it needs to get feedback\r\nfrom the server as to which of the specified names has been used for\r\nthe purpose described in the second paragraph cited above.\r\nHence, the server should better be instructed by the specification\r\nto include the selected name in the \"server_name\" extension returned\r\nto the client in the (extended) Server Hello.\r\nFor backwards compatibility, the specification should perhaps\r\nprescribe to omit this feedback, reverting to the specification\r\ncited above) in the case that the Client Hello received contained\r\nonly a single server name.\r\n\r\nIn parallel, the semantics of the \"unrecognized_name\" alerts should\r\nbe amended to mean: all received names are unrecognized.\r\n\r\n\r\n(3)  incomplete / outdated referencing text\r\n\r\nThe paragraph of Section 3.2 spanning from page 11 to page 12, says:\r\n\r\n                               [...].  For example, if the negotiated\r\n<page break>\r\n   length is 2^9=512, then for currently defined cipher suites (those\r\n   defined in [TLS], [KERB], and [AESSUITES]), and when null compression\r\n   is used, the record layer output can be at most 793 bytes: 5 bytes of\r\n   headers, 512 bytes of application data, 256 bytes of padding, and 20\r\n   bytes of MAC.  [...]\r\n\r\nThis apparently is not up to date.  I propose to either substitute\r\n\"[TLSbis],\" for \"[TLS],\" in the text above -- thus referring only to\r\ncurrent specifications --, or even to substitute \"[TLS] and [TLSbis],\"\r\nfor \"[TLS],\" there -- thus honoring to the predecessor.\r\n\r\n\r\n(4)   spurious blank line\r\n\r\nWithin Section 3.6, the 5th paragraph on page 18 is interrupted\r\nby a blank line in the middle of a sentence.\r\nPerhaps this is a formatting artifact inherited from the page break\r\nthat was at this place in the text in RFC 3546.\r\n\r\nThus, the text body:\r\n\r\n   Servers return a certificate response along with their certificate by\r\n   sending a \"CertificateStatus\" message immediately after the\r\n   \"Certificate\" message (and before any \"ServerKeyExchange\" or\r\n   \"CertificateRequest\" messages).  If a server returns a\r\n|\r\n   \"CertificateStatus\" message, then the server MUST have included an\r\n   extension of type \"status_request\" with empty \"extension_data\" in the\r\n   extended server hello.\r\n\r\nshould be joined to say:\r\n\r\n   Servers return a certificate response along with their certificate by\r\n   sending a \"CertificateStatus\" message immediately after the\r\n   \"Certificate\" message (and before any \"ServerKeyExchange\" or\r\n   \"CertificateRequest\" messages).  If a server returns a\r\n   \"CertificateStatus\" message, then the server MUST have included an\r\n   extension of type \"status_request\" with empty \"extension_data\" in the\r\n   extended server hello.\r\n\r\n\r\n(5)  punctuation issue in Informative Reference\r\n\r\nThe following Informative Reference entry on page 28 contains\r\nsyntactically inconsistent punctuation:\r\n\r\n   [MAILINGLIST]  J. Mikkelsen, R. Eberhard, and J. Kistler, \"General\r\n                  ClientHello extension mechanism and virtual hosting,\"\r\n                  ietf-tls mailing list posting, August 14, 2000.\r\n\r\nshould say:\r\n\r\n   [MAILINGLIST]  J. Mikkelsen, R. Eberhard, and J. Kistler, \"General\r\n|                 ClientHello extension mechanism and virtual hosting\",\r\n                  ietf-tls mailing list posting, August 14, 2000.",
    "correct_text": "",
    "notes": "All excerpts from the RFC text are taken literally, keeping their\r\noriginal formatting, and modified text is formatted in conformance\r\nwith RFC guidelines again.\r\n\r\nI use change bars ('|' in column 1) and casual up/down pointing\r\ntags ('^^^' / 'vvv' marks in extra lines) to emphasize the location\r\nof textual issues and/or proposed textual enhancements/corrections.\r\n\r\nIssue (2) above certainly needs discussion; perhaps you know what\r\nonce was intended.  The other issues seem to be straightforward.\r\n\r\nfrom pending",
    "submit_date": "2006-05-29",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "2",
    "verifier_name": "David Hopwood",
    "update_date": "2019-09-10 09:09:03"
  }
]
