[
  {
    "errata_id": "134",
    "doc-id": "RFC4302",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "3.3.4",
    "orig_text": "   NOTE: For IPv6 -- For bump-in-the-stack and bump-in-the-wire\r\n   implementations, it will be necessary to examine all the extension\r\n   headers to determine if there is a fragmentation header and hence\r\n   that the packet needs reassembling prior to IPsec processing.\r\n",
    "correct_text": "   NOTE: For IPv6 -- For bump-in-the-stack and bump-in-the-wire\r\n   implementations, it will be necessary to examine all the extension\r\n   headers to determine if there is a fragmentation header, and either\r\n   the More flag or the Fragment Offset is non-zero. If so that packet\r\n   needs reassembling prior to IPsec processing.\r\n",
    "notes": "",
    "submit_date": "2006-01-12",
    "submitter_name": "Vishwas Manral",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1644",
    "doc-id": "RFC4302",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "B2",
    "orig_text": "Appendix B2 says:\r\n     + Case A: Tl >= (W - 1). In this case, the window is within one\r\n                              sequence number subspace.  (See Figure 1)\r\n     + Case B: Tl < (W - 1).  In this case, the window spans two\r\n                              sequence number subspaces.  (See Figure 2)\r\n\r\n   In the figures below, the bottom line (\"----\") shows two consecutive\r\n   sequence number subspaces, with zeros indicating the beginning of\r\n   each subspace.  The two shorter lines above it show the higher-order\r\n   bits that apply.  The \"====\" represents the window.  The \"****\"\r\n   represents future sequence numbers, i.e., those beyond the current\r\n   highest sequence number authenticated (ThTl).\r\n        Th+1                         *********\r\n\r\n        Th               =======*****\r\n\r\n              --0--------+-----+-----0--------+-----------0--\r\n                         Bl    Tl            Bl\r\n                                        (Bl+2^32) mod 2^32\r\n\r\n                            Figure 1 -- Case A\r\n\r\n\r\n        Th                           ====**************\r\n\r\n        Th-1                      ===\r\n\r\n              --0-----------------+--0--+--------------+--0--\r\n                                  Bl    Tl            Bl\r\n                                                 (Bl+2^32) mod 2^32\r\n\r\n                            Figure 2 -- Case B",
    "correct_text": "Must say:\r\n     + Case A: Tl >= (W - 1). In this case, the window is within one\r\n                              sequence number subspace.  (See Figure 2)\r\n     + Case B: Tl < (W - 1).  In this case, the window spans two\r\n                              sequence number subspaces.  (See Figure 3)\r\n\r\n   In the figures below, the bottom line (\"----\") shows two consecutive\r\n   sequence number subspaces, with zeros indicating the beginning of\r\n   each subspace.  The two shorter lines above it show the higher-order\r\n   bits that apply.  The \"====\" represents the window.  The \"****\"\r\n   represents future sequence numbers, i.e., those beyond the current\r\n   highest sequence number authenticated (ThTl).\r\n        Th+1                         *********\r\n\r\n        Th               =======*****\r\n\r\n              --0--------+-----+-----0--------+-----------0--\r\n                         Bl    Tl            Bl\r\n                                        (Bl+2^32) mod 2^32\r\n\r\n                            Figure 2 -- Case A\r\n\r\n\r\n        Th                           ====**************\r\n\r\n        Th-1                      ===\r\n\r\n              --0-----------------+--0--+--------------+--0--\r\n                                  Bl    Tl            Bl\r\n                                                 (Bl+2^32) mod 2^32\r\n\r\n                            Figure 3 -- Case B",
    "notes": "Wrong numbers for figures in Section B2.",
    "submit_date": "2008-12-25",
    "submitter_name": "Nikolai Malykh",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "1645",
    "doc-id": "RFC4302",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "B2.2",
    "orig_text": "      + Under Case A (Figure 1):\r\n        If Seql >= Bl (where Bl = Tl - W + 1), then Seqh = Th\r\n        If Seql <  Bl (where Bl = Tl - W + 1), then Seqh = Th + 1\r\n\r\n      + Under Case B (Figure 2):\r\n        If Seql >= Bl (where Bl = Tl - W + 1), then Seqh = Th - 1\r\n        If Seql <  Bl (where Bl = Tl - W + 1), then Seqh = Th",
    "correct_text": "      + Under Case A (Figure 2):\r\n        If Seql >= Bl (where Bl = Tl - W + 1), then Seqh = Th\r\n        If Seql <  Bl (where Bl = Tl - W + 1), then Seqh = Th + 1\r\n\r\n      + Under Case B (Figure 3):\r\n        If Seql >= Bl (where Bl = Tl - W + 1), then Seqh = Th - 1\r\n        If Seql <  Bl (where Bl = Tl - W + 1), then Seqh = Th",
    "notes": "Wrong numbering for figures",
    "submit_date": "2008-12-26",
    "submitter_name": "Nikolai Malykh",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2157",
    "doc-id": "RFC4302",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "2.5",
    "orig_text": "anti-reply",
    "correct_text": "anti-replay",
    "notes": "(End of first para.) \r\nObvious, but maybe confusing to learners.",
    "submit_date": "2010-04-10",
    "submitter_name": "Carsten Bormann",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2185",
    "doc-id": "RFC4302",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "2.4.",
    "orig_text": "datagrams to SAs.  Implementations that support only unicast traffic\r\nneed not implement this de-multiplexing algorithm.",
    "correct_text": "datagrams to SAs.  Implementations that support only unicast traffic\r\nneed not to implement this de-multiplexing algorithm.",
    "notes": "grammar\n --VERIFIER NOTES-- \nThe original text is grammatically correct.",
    "submit_date": "2010-04-28",
    "submitter_name": "Constantin Hagemeier",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2186",
    "doc-id": "RFC4302",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "2.5.",
    "orig_text": "Verification\".  Thus, the sender MUST always transmit this field, but\r\nthe receiver need not act upon it.",
    "correct_text": "Verification\".  Thus, the sender MUST always transmit this field, but\r\nthe receiver needs not to act upon it.",
    "notes": "grammar\n --VERIFIER NOTES-- \n   The original text is grammatically correct. ",
    "submit_date": "2010-04-28",
    "submitter_name": "Constantin Hagemeier",
    "verifier_id": "112",
    "verifier_name": "Tim Polk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2187",
    "doc-id": "RFC4302",
    "errata_status_code": "Rejected",
    "errata_type_code": "Editorial",
    "section": "3.3.3.2.1.",
    "orig_text": "(The padding is arbitrary, but need not be random to achieve\r\nsecurity.)  These padding bytes are included in the ICV calculation,",
    "correct_text": "(The padding is arbitrary, but needs not to be random to achieve\r\nsecurity.)  These padding bytes are included in the ICV calculation,",
    "notes": "grammar\n --VERIFIER NOTES-- \n   The original text is grammatically correct. ",
    "submit_date": "2010-04-28",
    "submitter_name": "Constantin Hagemeier",
    "verifier_id": "112",
    "verifier_name": "Tim Polk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2188",
    "doc-id": "RFC4302",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "3.3.3.2.2.",
    "orig_text": "If padding bytes are needed\r\nbut the algorithm does not specify the padding contents, then the\r\npadding octets MUST have a value of zero.",
    "correct_text": "The padding bytes MUST be zero. The algorithm MUST NOT specify\r\nanything else.",
    "notes": "This is forced two times in this RFC4302, namely before in this\r\nsection 3.3.3.2.2 and in 3.4.4 .\n --VERIFIER NOTES-- \nSection 3.4.4 deals with verification of the ICV, whereas section 3.3.3 deal with generation of an ICV. Thus discussion of padding is needed in both contexts and is not redundant. The text should remain as it is.",
    "submit_date": "2010-04-28",
    "submitter_name": "Constantin Hagemeier",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "2189",
    "doc-id": "RFC4302",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "3.4.3.",
    "orig_text": "received Sequence Number against the receive window.  In constructing\r\nthe full sequence number, if the low-order 32 bits carried in the\r\npacket are lower in value than the low-order 32 bits of the\r\nreceiver's sequence number counter, the receiver assumes that the\r\nhigh-order 32 bits have been incremented, moving to a new sequence\r\nnumber subspace.  (This algorithm accommodates gaps in reception for",
    "correct_text": "received Sequence Number against the receive window.  In constructing\r\nthe full sequence number, if the low-order 32 bits carried in the\r\npacket are lower in value than the low-order 32 bits of the\r\nreceiver's left edge's sequence number counter, the receiver assumes\r\nthat the\r\nhigh-order 32 bits have been incremented, moving to a new sequence\r\nnumber subspace.  (This algorithm accommodates gaps in reception for",
    "notes": "\n --VERIFIER NOTES-- \n   There is no mention of a \"left edge sequence number counter\" in 4302.",
    "submit_date": "2010-04-28",
    "submitter_name": "Constantin Hagemeier",
    "verifier_id": "124",
    "verifier_name": "Sean Turner",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "744",
    "doc-id": "RFC4302",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "",
    "orig_text": "(1)\r\n\r\nRFC 4301, in section 13, \"Differences from RFC 2401\", in the\r\nsecond bulleted item (near the top of page 73) states:\r\n\r\n   o There is no longer a requirement to support nested SAs or \"SA\r\n     bundles\".  [...]\r\n\r\nAnd later on, on page 74:\r\n\r\n   o Support for AH in both IPv4 and IPv6 is no longer required.\r\n\r\nTherefore, the paragraph on page 10 of RFC 4302,\r\n\r\n   ESP and AH headers can be combined in a variety of modes.  The IPsec\r\n   Architecture document describes the combinations of security\r\n   associations that must be supported.\r\n                     ^^^^^^^^^^^^^^^^^\r\nentails more or less a \"NOPE\".  If something like the second\r\nsentence is still desired, it might better say, e.g.,\r\n\r\n   ESP and AH headers can be combined in a variety of modes.  The IPsec\r\n   Architecture document briefly describes the methods to configure\r\n   such combinations of security associations.\r\n\r\n\r\n(2)\r\n\r\nOn page 25, Appendix A1 presents a table classifying the IPv4 options.\r\nWithin that table, the second column is partially misaligned.\r\n\r\n\r\n(3)\r\n\r\nOn page 26, the table within Appendix A2 classifying the IPv6\r\nextension headers,\r\n\r\n       Option/Extension Name                  Reference\r\n       -----------------------------------    ---------\r\n       MUTABLE BUT PREDICTABLE -- included in ICV calculation\r\n         Routing (Type 0)                    [DH98]\r\n\r\n       BIT INDICATES IF OPTION IS MUTABLE (CHANGES UNPREDICTABLY DURING\r\n       TRANSIT)\r\n         Hop-by-Hop options                  [DH98]\r\n         Destination options                 [DH98]\r\n\r\n       NOT APPLICABLE\r\n         Fragmentation                       [DH98]\r\n\r\nperhaps would have better been formatted like:\r\n\r\n       Option/Extension Name                  Reference\r\n       -----------------------------------    ---------\r\n       MUTABLE BUT PREDICTABLE\r\n       -- included in ICV calculation\r\n         Routing (Type 0)                       [DH98]\r\n\r\n       BIT INDICATES IF OPTION IS MUTABLE\r\n       (CHANGES UNPREDICTABLY DURING TRANSIT)\r\n         Hop-by-Hop options                     [DH98]\r\n         Destination options                    [DH98]\r\n\r\n       NOT APPLICABLE\r\n         Fragmentation                          [DH98]\r\n\r\nto avoid the overlap of the columns.\r\n\r\n\r\n(4)\r\n\r\nIn Appendix B2.1, at one place on page 30, the variable\r\n\"seqh\" is mis-spelled as \"seqH\" (this is in the 6th-to-last\r\nline of Appendix B2.1).\r\n\r\n\r\n(5)\r\n\r\nAppendix B, as a whole, is a [near] duplicate of Appendix A of\r\nRFC 4303; the latter does not contain the typo from item (4)\r\nabove, and it contains extended and improved explanations in\r\nthe third subsection -- corresponding to page 32 of RFC 4302.\r\n\r\nReaders and potential implementors need to read both Appendices\r\njust to detect that they are in fact essentially the same spec.\r\n\r\nIMHO, it would have been better to avoid this re-specification,\r\nand instead have pointers to the (better, and mandatory!) ESP\r\nAppendix placed into the AH RFC.\r\nHaving a single specification always avoids disagreement or\r\ninconsistency, and it facilitates the maintenance of the spec.\r\n\r\n\r\n(6)\r\n\r\nFinally:\r\nI would have appreciated the introduction of an explicit version\r\nnumbering for AH, e.g. rename:\r\n      AH as per RFC 1826  to  AHv1,\r\n      AH as per RFC 2402  to  AHv2  or  AHv2.0,   and\r\n      AH as per RFC 4302  to  AHv3  or  AHv2.1\r\n(or similar).\r\n\r\nThis would make it easier to specify / identify versions and/or\r\nversion specific behaviour in implementations, without having\r\nto refer to the RFC numbers explicitely. (Similar numbering has\r\nproven very useful with protocols like BGP, SNMP, IMAP, POP, etc.)",
    "correct_text": "[see above]",
    "notes": "from pending",
    "submit_date": "2006-03-01",
    "submitter_name": "Alfred Hoenes",
    "verifier_id": "111",
    "verifier_name": "Pasi Eronen",
    "update_date": "2019-09-10 09:09:03"
  }
]
